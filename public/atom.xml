<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>tony&#39;s blog</title>
  
  <subtitle>越努力越幸运</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://zjgyb.github.io/"/>
  <updated>2019-10-03T13:11:18.612Z</updated>
  <id>https://zjgyb.github.io/</id>
  
  <author>
    <name>tony</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>meta元素内容含义</title>
    <link href="https://zjgyb.github.io/meta%E5%85%83%E7%B4%A0%E5%86%85%E5%AE%B9%E5%90%AB%E4%B9%89.html"/>
    <id>https://zjgyb.github.io/meta元素内容含义.html</id>
    <published>2019-10-03T13:11:18.000Z</published>
    <updated>2019-10-03T13:11:18.612Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>打开VSCode，输入<code>html:5</code>，按下<code>tab</code>，一个基本的<code>html</code>结构出来了，却从未注意过里面某些元素的含义。今天就来总结总结这些重要却不起眼的元素标签<code>meta</code>。</p><h2 id="head内各种meta含义"><a href="#head内各种meta含义" class="headerlink" title="head内各种meta含义"></a>head内各种meta含义</h2><p>首先meta元素有什么作用呢？看英文版<a href="https://www.w3schools.com/tags/tag_meta.asp" target="_blank" rel="noopener">w3schools</a></p><div class="note info"><p>The <strong>&lt;meta&gt;</strong> tag provides metadata about the HTML document. Metadata will not be displayed on the page, but will be machine parsable.<br><strong>&lt;meta&gt;</strong>元素标签是提供有关HTML文档的元数据，元数据不会显示在页面上，但是能够被机器识别。</p></div><p>总而言之, <code>meta</code>标签是用来让机器识别的，同时它对SEO起着重要的作用。</p><h3 id="charset"><a href="#charset" class="headerlink" title="charset"></a>charset</h3><p>指定了<code>html</code>文档的编码格式，常用的是<code>utf-8</code>(Unicode的字符编码)，还有<code>ISO-8859-1</code>(拉丁字母的字符编码)。当然还有其他的，但是一般不常用也就不介绍了</p><figure class="highlight html"><figcaption><span>html</span></figcaption><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h3 id="name-amp-content"><a href="#name-amp-content" class="headerlink" title="name &amp; content"></a>name &amp; content</h3><p>指定元数据的名称(这部分对SEO非常有用)</p><h4 id="author——定义了页面的作者"><a href="#author——定义了页面的作者" class="headerlink" title="author——定义了页面的作者"></a><code>author</code>——定义了页面的作者</h4><figure class="highlight html"><figcaption><span>html</span></figcaption><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"author"</span> <span class="attr">content</span>=<span class="string">"Tony"</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h4 id="keywords——为搜索引擎提供关键字"><a href="#keywords——为搜索引擎提供关键字" class="headerlink" title="keywords——为搜索引擎提供关键字"></a><code>keywords</code>——为搜索引擎提供关键字</h4><figure class="highlight html"><figcaption><span>html</span></figcaption><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"keywords"</span> <span class="attr">content</span>=<span class="string">"HTML, CSS, JavaScript"</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h4 id="description——对网页整体的描述"><a href="#description——对网页整体的描述" class="headerlink" title="description——对网页整体的描述"></a><code>description</code>——对网页整体的描述</h4><figure class="highlight html"><figcaption><span>html</span></figcaption><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"description"</span> <span class="attr">content</span>=<span class="string">"My tutorials on HTML, CSS and JavaScript"</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h4 id="viewport——对页面视图相关进行定义"><a href="#viewport——对页面视图相关进行定义" class="headerlink" title="viewport——对页面视图相关进行定义"></a><code>viewport</code>——对页面视图相关进行定义</h4><ul><li><code>width=device-width</code>——将页面宽度设置为跟随屏幕宽度变化而变化</li><li><code>initial-scale=1.0</code>——设置浏览器首次加载页面时的初始缩放比例(0.0-10.0正数)</li><li><code>maximum-scale=1.0</code>——允许用户缩放的最大比例(0.0-10.0正数)，必须大于等于<code>minimum-scale</code></li><li><code>minimum-scale=1.0</code>——允许用户缩放的最小比例(0.0-10.0正数)，必须小于等于<code>maximum-scale</code></li><li><code>user-scalable=no</code>——是否允许用户手动缩放(yes或者no)</li></ul><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0, maximum-scale=1.0, minmum-scale=1.0"</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h4 id="generator——包含生成页面软件的标识符"><a href="#generator——包含生成页面软件的标识符" class="headerlink" title="generator——包含生成页面软件的标识符"></a><code>generator</code>——包含生成页面软件的标识符</h4><blockquote><p>which contains the identifier of the software that generated the page.</p></blockquote><figure class="highlight html"><figcaption><span>html</span></figcaption><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"generator"</span> <span class="attr">content</span>=<span class="string">"Hexo 3.8.0"</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h4 id="theme-color——定义主题颜色"><a href="#theme-color——定义主题颜色" class="headerlink" title="theme-color——定义主题颜色"></a><code>theme-color</code>——定义主题颜色</h4><figure class="highlight html"><figcaption><span>html</span></figcaption><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"theme-color"</span> <span class="attr">content</span>=<span class="string">"#222"</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h3 id="http-equiv-amp-content"><a href="#http-equiv-amp-content" class="headerlink" title="http-equiv &amp; content"></a>http-equiv &amp; content</h3><blockquote><p>Provides an HTTP header for the information/value of the content attribute</p></blockquote><h4 id="refresh——每30s刷新一次文档"><a href="#refresh——每30s刷新一次文档" class="headerlink" title="refresh——每30s刷新一次文档"></a><code>refresh</code>——每30s刷新一次文档</h4><figure class="highlight html"><figcaption><span>html</span></figcaption><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"refresh"</span> <span class="attr">content</span>=<span class="string">"30"</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h4 id="X-UA-Compatible——告知浏览器以何种版本渲染界面。下面的例子有限使用IE最新版本"><a href="#X-UA-Compatible——告知浏览器以何种版本渲染界面。下面的例子有限使用IE最新版本" class="headerlink" title="X-UA-Compatible——告知浏览器以何种版本渲染界面。下面的例子有限使用IE最新版本"></a><code>X-UA-Compatible</code>——告知浏览器以何种版本渲染界面。下面的例子有限使用IE最新版本</h4><figure class="highlight html"><figcaption><span>html</span></figcaption><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"ie=edge"</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><div class="note warning"><p>关于是否有必要使用这一条在<a href="https://stackoverflow.com/questions/6771258/what-does-meta-http-equiv-x-ua-compatible-content-ie-edge-do" target="_blank" rel="noopener">stack overflow</a>尚且有争议。个人认为如果不想兼容低版本的IE，可以直接忽略这一条。</p></div><h4 id="Cache-Control——请求和响应遵循的缓存机制，可以声明缓存的内容，修改过期时间，可多次声明"><a href="#Cache-Control——请求和响应遵循的缓存机制，可以声明缓存的内容，修改过期时间，可多次声明" class="headerlink" title="Cache-Control——请求和响应遵循的缓存机制，可以声明缓存的内容，修改过期时间，可多次声明"></a><code>Cache-Control</code>——请求和响应遵循的缓存机制，可以声明缓存的内容，修改过期时间，可多次声明</h4><ul><li><code>no-transform</code>——不得对资源进行转换或转变。</li><li><code>no-siteapp</code>——禁止百度进行转码</li></ul><figure class="highlight html"><figcaption><span>html</span></figcaption><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"Cache-Control"</span> <span class="attr">content</span>=<span class="string">"no-transform"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"Cache-Control"</span> <span class="attr">content</span>=<span class="string">"no-siteapp"</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>为什么我会介绍这两个呢？因为<a href="https://zjgyb.github.io/">我的博客</a>在生成后存在，查了一下原因，正如之前所述，这个是针对百度转码的。具体可以看github的<a href="https://github.com/iissnan/hexo-theme-next/issues/1646" target="_blank" rel="noopener">issue</a></p><p>其他更多内容可以查看<a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/Cache-Control" target="_blank" rel="noopener">MDN</a></p><h3 id="property-amp-content"><a href="#property-amp-content" class="headerlink" title="property &amp; content"></a>property &amp; content</h3><p>可以让网页成为一个<strong>富媒体对象</strong>，同意网页内容被其他网站引用，同时在应用的时候不会只是一个链接，会提取相应的信息展现给用户。</p><figure class="highlight html"><figcaption><span>html</span></figcaption><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">property</span>=<span class="string">"og:type"</span> <span class="attr">content</span>=<span class="string">"website"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">property</span>=<span class="string">"og:url"</span> <span class="attr">content</span>=<span class="string">"https://zjgyb.github.io/index.html"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">property</span>=<span class="string">"og:site_name"</span> <span class="attr">content</span>=<span class="string">"tony's blog"</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>具体可以参照<a href="https://ogp.me/" target="_blank" rel="noopener">The Open Graph protocal</a></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>我只总结了一些常用的<code>meta</code>标签，其他的不太常用的也就暂时不总结了，如果将来用到再进行补充。总算是有了一些了解。<span class="github-emoji" style="color: transparent;background:no-repeat url(https://github.githubassets.com/images/icons/emoji/unicode/1f604.png?v8) center/contain" data-src="https://github.githubassets.com/images/icons/emoji/unicode/1f604.png?v8">😄</span> <span class="github-emoji" style="color: transparent;background:no-repeat url(https://github.githubassets.com/images/icons/emoji/unicode/1f602.png?v8) center/contain" data-src="https://github.githubassets.com/images/icons/emoji/unicode/1f602.png?v8">😂</span></p><h2 id="参考教程"><a href="#参考教程" class="headerlink" title="参考教程"></a>参考教程</h2><ul><li><a href="https://www.w3schools.com/tags/tag_meta.asp" target="_blank" rel="noopener">w3school</a></li><li><a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/meta" target="_blank" rel="noopener">MDN-meta</a></li><li><a href="http://www.jsphp.net/html/show-19-15-1.html" target="_blank" rel="noopener">web教程网</a></li><li><a href="https://segmentfault.com/a/1190000004279791" target="_blank" rel="noopener">segmentfault-Lxxyx开发笔记</a></li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/Cache-Control" target="_blank" rel="noopener">MDN-Cache-Control</a></li><li><a href="https://www.grammarly.com/blog/meta-meaning/" target="_blank" rel="noopener">首屏图片</a></li></ul><!-- rebuild by neat --><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      本文介绍meta标签元素内容以含义
    
    </summary>
    
      <category term="HTML" scheme="https://zjgyb.github.io/categories/HTML/"/>
    
    
      <category term="前端" scheme="https://zjgyb.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="meta" scheme="https://zjgyb.github.io/tags/meta/"/>
    
      <category term="html" scheme="https://zjgyb.github.io/tags/html/"/>
    
  </entry>
  
  <entry>
    <title>web存储&amp;cookie</title>
    <link href="https://zjgyb.github.io/web%E5%AD%98%E5%82%A8&amp;cookie.html"/>
    <id>https://zjgyb.github.io/web存储&amp;cookie.html</id>
    <published>2019-09-30T08:50:40.000Z</published>
    <updated>2019-09-30T08:53:10.404Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>区分三个概念<code>sessionStorage</code>、<code>localStorage</code>、<code>cookie</code>。</p><h2 id="web存储"><a href="#web存储" class="headerlink" title="web存储"></a>web存储</h2><p>为什么会出现存储？它的两个目的：</p><blockquote><p>提供一种在cookie之外存储会话数据的途径<br>提供一种存储大量可以跨会话存在的数据的机制</p></blockquote><h2 id="sessionStorage"><a href="#sessionStorage" class="headerlink" title="sessionStorage"></a>sessionStorage</h2><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><blockquote><p>sessionStorage对象存储特定于某个会话的数据，也就是该数据只保持到浏览器关闭。</p></blockquote><p>通熟来讲，就是sessionStorage在关闭浏览器界面(不包括像chrome浏览器崩溃重新恢复)数据就会消失(即使重新打开同一个相同窗口)</p><h3 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h3><p>主要有四个方法：<code>getItem</code>, <code>setItem</code>, <code>removeItem</code>, <code>clear</code>，分别测试一下</p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">sessionStorage.setItem(<span class="string">'key1'</span>, <span class="string">'key1'</span>);</span><br><span class="line">sessionStorage.setItem(<span class="string">'key2'</span>, <span class="string">'key2'</span>);</span><br><span class="line">sessionStorage.setItem(<span class="string">'key3'</span>, <span class="string">'key3'</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(sessionStorage.getItem(<span class="string">'key2'</span>)); <span class="comment">// key2</span></span><br><span class="line"><span class="built_in">console</span>.log(sessionStorage.getItem(<span class="string">'key5'</span>)); <span class="comment">// null</span></span><br><span class="line"></span><br><span class="line">sessionStorage.removeItem(<span class="string">'key3'</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(sessionStorage.getItem(<span class="string">'key3'</span>)); <span class="comment">// null</span></span><br><span class="line"></span><br><span class="line">sessionStorage.clear();</span><br></pre></td></tr></tbody></table></figure><p>一些不太常用的方法</p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">sessionStorage.setItem(<span class="string">'key1'</span>, <span class="string">'key1'</span>);</span><br><span class="line">sessionStorage.setItem(<span class="string">'key2'</span>, <span class="string">'key2'</span>);</span><br><span class="line">sessionStorage.setItem(<span class="string">'key3'</span>, <span class="string">'key3'</span>);</span><br><span class="line"></span><br><span class="line">sessionStorage.valueOf(); <span class="comment">// 返回一个Storage对象</span></span><br><span class="line"><span class="built_in">console</span>.log(sessionStorage.key1); <span class="comment">// key1</span></span><br><span class="line"><span class="built_in">console</span>.log(sessionStorage.length); <span class="comment">// 3</span></span><br></pre></td></tr></tbody></table></figure><h3 id="tips"><a href="#tips" class="headerlink" title="tips"></a>tips</h3><p>你可以打开浏览器，按<code>F12</code>，打开控制台，到<code>Application</code>部分查看<code>sessionStorage</code>，如图：</p><p><img src="/web存储&amp;cookie/web.png" alt="浏览器查看存储信息"></p><h2 id="localStorage"><a href="#localStorage" class="headerlink" title="localStorage"></a>localStorage</h2><blockquote><p>作用域：页面必须来自同一个域名，使用同一个协议，同一个端口上。</p></blockquote><p><code>localStorage</code>会把数据存储在硬盘中，因此即使关闭浏览器，重新打开界面，数据还是存在。</p><h3 id="用法-1"><a href="#用法-1" class="headerlink" title="用法"></a>用法</h3><p>等同于<code>sessionStorage</code></p><h3 id="限制"><a href="#限制" class="headerlink" title="限制"></a>限制</h3><p>可以通过<a href="http://dev-test.nemikor.com/web-storage/support-test/" target="_blank" rel="noopener">这里</a>这个网址测试浏览器是否支持以及存储的最大空间，经过测试，我最新的Chrome(77.0.3865.90)，sessionStorage和localStorage最大存储空间是<code>5101kb</code></p><h2 id="HTTP-Cookie-cookie"><a href="#HTTP-Cookie-cookie" class="headerlink" title="HTTP Cookie(cookie)"></a>HTTP Cookie(cookie)</h2><h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><blockquote><p>最初是在客户端用于存储会话信息的。该标准要求服务器对任意HTTP请求发送Set-Cookie HTTP头作为响应的一部分，其中包含信息。</p></blockquote><p>我在前端开发中没有用到过cookie，但是在node中使用session作为登录验证的字段存储于cookie中。</p><p>cookie有几个特点，可以设置失效时间，可以设置指定的域，可以设定指定的路径。</p><h3 id="用法-2"><a href="#用法-2" class="headerlink" title="用法"></a>用法</h3><p>因为在前端开发中很少用到<code>cookie</code>了，因此只介绍相关的概念</p><h3 id="注意点"><a href="#注意点" class="headerlink" title="注意点"></a>注意点</h3><div class="note warning"><p>cookie很不安全，因此一定不要在cookie中存储重要和敏感的信息。</p></div><h3 id="限制-1"><a href="#限制-1" class="headerlink" title="限制"></a>限制</h3><p>大多数浏览器都有大约4096B的长度限制。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>三者其实都要避免存放敏感信息，都要关注是否会受到xss攻击</p><h2 id="首屏图片来源"><a href="#首屏图片来源" class="headerlink" title="首屏图片来源"></a>首屏图片来源</h2><p><a href="https://www.youtube.com/watch?v=GihQAC1I39Q" target="_blank" rel="noopener">YouTube</a></p><!-- rebuild by neat --><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      本文介绍sessionStorage、localStorage以及cookie的相关知识
    
    </summary>
    
      <category term="JavaScript" scheme="https://zjgyb.github.io/categories/JavaScript/"/>
    
    
      <category term="sessionStorage" scheme="https://zjgyb.github.io/tags/sessionStorage/"/>
    
      <category term="localStorage" scheme="https://zjgyb.github.io/tags/localStorage/"/>
    
      <category term="cookie" scheme="https://zjgyb.github.io/tags/cookie/"/>
    
  </entry>
  
  <entry>
    <title>JS对象分类</title>
    <link href="https://zjgyb.github.io/JS%E5%AF%B9%E8%B1%A1%E5%88%86%E7%B1%BB.html"/>
    <id>https://zjgyb.github.io/JS对象分类.html</id>
    <published>2019-09-23T08:51:22.000Z</published>
    <updated>2019-09-23T08:51:22.300Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>原本认为JS对象分类十分简单，但是看到有许多分法并且每一种分法似乎都有道理，因此我列举出一些分法以及它们的包含范围，算是拾人牙慧吧，同时发表一些自己的看法，最后总结一下一些常用的全局函数和属性。</p><h2 id="分类方法"><a href="#分类方法" class="headerlink" title="分类方法"></a>分类方法</h2><p>我看到有四种分类方法：</p><div class="note info"><p>最主要的是前两种，后两种只是涉及到了而已，但是我还是拿出来讨论一下。</p></div><ol><li><p><strong>内部对象</strong>、<strong>宿主对象</strong>和<strong>自定义对象</strong>三种</p><ul><li>内部对象——包含<code>Array</code>、<code>Boolean</code>、<code>Date</code>、<code>Function</code>、<code>Global</code>、<code>Math</code>、<code>Error</code>…</li><li>宿主对象——运行JS脚本环境提供的对象，包含<code>Window</code>、<code>Document</code>、<code>FormDate</code>、<code>XMLHttpRequest</code>…</li><li>自定义对象——开发人员自己定义的对象</li></ul></li><li><p><a href="https://www.w3school.com.cn/js/pro_js_object_types.asp" target="_blank" rel="noopener">W3school</a>中的分类，分为<strong>本地对象(native object)</strong>、<strong>内置对象(build-in object)</strong>、<strong>宿主对象(host object)</strong>三种</p><ul><li>本地对象——独立于宿主环境的ECMAScript实现提供的对象，例如<code>Array</code>、<code>Boolean</code>、<code>Date</code>、<code>Function</code>…</li><li>内置对象——总共两类<code>Global</code>和<code>Math</code>，<code>Global</code>对象包含顶级函数(全局函数)，例如<code>parseInt</code>、<code>parseFloat</code>…和顶级属性(全局属性)，例如<code>Infinity</code>、<code>undefined</code>…</li><li>宿主对象——所有非本地对象都是，即由ECMAScript实现的宿主环境提供的对象，所有BOM和DOM对象都是宿主对象</li></ul></li><li><p><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript" target="_blank" rel="noopener">MDN</a>只定义了一种<strong>内置对象</strong><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects" target="_blank" rel="noopener">MDN</a>，因此不是内置对象我把它归类为其他对象</p><ul><li>内置对象——<code>Array</code>、<code>Boolean</code>、<code>Date</code>、<code>Function</code>、<code>Global</code>、<code>Math</code>、<code>Error</code>…，等同于第一种的内部对象</li><li>其他对象——除内置对象之外的对象</li></ul></li><li><p>高程中分为两类<strong>Global对象</strong>和<strong>Math对象</strong>，它们都属于单体内置对象</p><ul><li>Global对象——Global对象方法、Global对象属性、window对象</li><li>Math——保存数学公式和信息提供的公共位置，分为Math对象属性、Math对象方法</li></ul></li></ol><h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><ul><li>第一种分类中的“内部对象”，等同于第三种分类的“内置对象”</li><li>第一种分类的“宿主对象”等同于第二种的“宿主对象”</li></ul><h2 id="规范上的解释"><a href="#规范上的解释" class="headerlink" title="规范上的解释"></a>规范上的解释</h2><p>引用<a href="http://es5.github.io/#x4.3.6" target="_blank" rel="noopener">规范</a>上的解释</p><blockquote><p><strong>native object</strong><br>object in an ECMAScript implementation whose semantics are fully defined by this specification rather than by the host environment.<br><strong>NOTE</strong> Standard native objects are defined in this specification. Some native objects are built-in; others may be constructed during the course of execution of an ECMAScript program.</p></blockquote><blockquote><p><strong>build-in object</strong><br>object supplied by an ECMAScript implementation, independent of the host environment, that is present at the start of the execution of an ECMAScript program.<br><strong>NOTE</strong> Standard built-in objects are defined in this specification, and an ECMAScript implementation may specify and define others. Every built-in object is a native object. A built-in constructor is a built-in object that is also a constructor.</p></blockquote><blockquote><p><strong>host object</strong><br>object supplied by the host environment to complete the execution environment of ECMAScript.<br><strong>NOTE</strong> Any object that is not native is a host object.</p></blockquote><p>这里很好的印证了W3school里面的分类符合规范说的。</p><h2 id="我的见解"><a href="#我的见解" class="headerlink" title="我的见解"></a>我的见解</h2><p>从之前的分类其实看出第一种的<strong>内部对象</strong>其实就是第二种的<strong>本地对象</strong>，而第二种的<strong>内置对象</strong>其实是属于<strong>本地对象</strong>的，因此我认为可以把JS对象分成第一种分类方法的三种，其中的<strong>内部对象</strong>又可以分为需要通过<code>new</code>创建的<strong>本地对象</strong>和不需要手动实例化的<strong>内置对象</strong></p><p>也就是</p><ul><li>内部对象(本地对象+内置对象)</li><li>宿主对象(执行环境提供)</li><li>自定义对象(开发人员自定义)</li></ul><h2 id="常用的全局函数和属性"><a href="#常用的全局函数和属性" class="headerlink" title="常用的全局函数和属性"></a>常用的全局函数和属性</h2><h3 id="global对象相关"><a href="#global对象相关" class="headerlink" title="global对象相关"></a>global对象相关</h3><ol><li>Number相关</li></ol><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">isNaN</span>(<span class="string">'abc'</span>); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">parseInt</span>(<span class="string">'12a'</span>); <span class="comment">// 12</span></span><br><span class="line"><span class="built_in">parseFloat</span>(<span class="string">'123.23z'</span>); <span class="comment">// 123.23</span></span><br></pre></td></tr></tbody></table></figure><div class="note warning"><p>在ES6中这些方法可定义到了Number对象上，我认为前面加上Number更符合语境。因此以后写前面还是加上Number</p></div><ol start="2"><li>URL相关(常用于与后端对接的时候get方法传参)</li></ol><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> url = <span class="string">"https://zjgyb.github.io/CSS-animate1.html #input-radio"</span>;</span><br><span class="line"><span class="comment">// 不会对本身属于URL的特殊字符进行编码，例如冒号、正斜杠、问号、井号</span></span><br><span class="line"><span class="keyword">const</span> encodeURL = <span class="built_in">encodeURI</span>(url);</span><br><span class="line"><span class="built_in">console</span>.log(encodeURL); <span class="comment">// https://zjgyb.github.io/CSS-animate1.html%20#input-radio</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">decodeURI</span>(encodeURL)); <span class="comment">// https://zjgyb.github.io/CSS-animate1.html #input-radio</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 对它发现的任何非标准字符进行编码</span></span><br><span class="line"><span class="keyword">const</span> encodeCom = <span class="built_in">encodeURIComponent</span>(url);</span><br><span class="line"><span class="built_in">console</span>.log(encodeCom); <span class="comment">// https%3A%2F%2Fzjgyb.github.io%2FCSS-animate1.html%23input-radio</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">decodeURIComponent</span>(encodeCom)); <span class="comment">//  "https://zjgyb.github.io/CSS-animate1.html #input-radio"</span></span><br></pre></td></tr></tbody></table></figure><ol start="3"><li>内置的属性<code>Date</code>、<code>Array</code>、<code>Function</code>…这些就不展开了</li></ol><h3 id="Math相关"><a href="#Math相关" class="headerlink" title="Math相关"></a>Math相关</h3><h4 id="Math属性"><a href="#Math属性" class="headerlink" title="Math属性"></a>Math属性</h4><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Math</span>.E); <span class="comment">// 2.718...</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Math</span>.PI); <span class="comment">// 3.141...</span></span><br></pre></td></tr></tbody></table></figure><h4 id="Math方法"><a href="#Math方法" class="headerlink" title="Math方法"></a>Math方法</h4><p><strong>Min</strong> &amp; <strong>Max</strong></p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Math</span>.min(<span class="number">1</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">0</span>); <span class="comment">// 0</span></span><br><span class="line"><span class="built_in">Math</span>.max(<span class="number">1</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">0</span>); <span class="comment">// 4</span></span><br></pre></td></tr></tbody></table></figure><p><strong>Ceil</strong>、<strong>Floor</strong>、<strong>Round</strong> &amp; <strong>Trunc</strong><br></p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Math</span>.ceil(<span class="number">1.5</span>)); <span class="comment">// 2</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Math</span>.floor(<span class="number">1.5</span>)); <span class="comment">// 1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 四舍五入</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Math</span>.round(<span class="number">1.5</span>)); <span class="comment">// 2</span></span><br><span class="line"><span class="comment">// 去除一个数的小数部分，负数是表现为ceil，正数表现为Floor</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Math</span>.floor(<span class="number">-2.4</span>)); <span class="comment">// -3</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Math</span>.trunc(<span class="number">-2.4</span>)); <span class="comment">// -2</span></span><br></pre></td></tr></tbody></table></figure><p></p><p><strong>Random</strong></p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">selectFrom</span>(<span class="params">lower, upper</span>) </span>{</span><br><span class="line">  <span class="keyword">const</span> choices = upper - lower + <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random() * choices + lower);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> num = selectFrom(<span class="number">1</span>, <span class="number">10</span>);</span><br><span class="line"><span class="built_in">console</span>.log(num); <span class="comment">// 1-10之间</span></span><br></pre></td></tr></tbody></table></figure><p><strong>Abs</strong></p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Math</span>.abs(<span class="number">-2.4</span>)); <span class="comment">// 2.4</span></span><br></pre></td></tr></tbody></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>看来JS对象分类并不简单。<span class="github-emoji" style="color: transparent;background:no-repeat url(https://github.githubassets.com/images/icons/emoji/unicode/1f602.png?v8) center/contain" data-src="https://github.githubassets.com/images/icons/emoji/unicode/1f602.png?v8">😂</span></p><h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><ul><li><a href="https://www.w3school.com.cn/js/pro_js_object_types.asp" target="_blank" rel="noopener">W3school(中文)</a></li><li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript" target="_blank" rel="noopener">MDN</a></li><li><a href="http://es5.github.io/#x4.3.6" target="_blank" rel="noopener">ES5规范</a></li><li><a href="https://www.creativebloq.com/features/12-common-javascript-questions-answered" target="_blank" rel="noopener">首屏图片</a></li></ul><!-- rebuild by neat --><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      本文介绍JS的对象分类以及常用的内置对象属性和方法。
    
    </summary>
    
      <category term="JavaScript" scheme="https://zjgyb.github.io/categories/JavaScript/"/>
    
    
      <category term="Object" scheme="https://zjgyb.github.io/tags/Object/"/>
    
      <category term="分类" scheme="https://zjgyb.github.io/tags/%E5%88%86%E7%B1%BB/"/>
    
      <category term="JavaScript" scheme="https://zjgyb.github.io/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>日期相关-Date</title>
    <link href="https://zjgyb.github.io/%E6%97%A5%E6%9C%9F%E7%9B%B8%E5%85%B3-Date.html"/>
    <id>https://zjgyb.github.io/日期相关-Date.html</id>
    <published>2019-09-13T06:27:45.000Z</published>
    <updated>2019-09-13T06:27:45.086Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在项目中不可避免对日期进行操作，因此我对其进行总结，以便随时翻阅。</p><h2 id="设置日期的语法"><a href="#设置日期的语法" class="headerlink" title="设置日期的语法"></a>设置日期的语法</h2><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// "英文月名 日 年 时:分:秒"</span></span><br><span class="line"><span class="keyword">const</span> date = <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="string">"May 5 19 05:15:30"</span>);</span><br><span class="line"><span class="built_in">console</span>.log(date); <span class="comment">// Sun May 05 2019 05:15:30 GMT+0800 (GMT+08:00)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 年 月 日 时 分 秒</span></span><br><span class="line"><span class="keyword">const</span> date1 = <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="number">2019</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">5</span>, <span class="number">15</span>, <span class="number">30</span>);</span><br><span class="line"><span class="built_in">console</span>.log(date1); <span class="comment">// Sun May 05 2019 05:15:30 GMT+0800 (GMT+08:00)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 月/日/年/时:分:秒</span></span><br><span class="line"><span class="keyword">const</span> date2 = <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="string">"5/5/2019 05:15:30"</span>);</span><br><span class="line"><span class="built_in">console</span>.log(date2); <span class="comment">// Sun May 05 2019 05:15:30 GMT+0800 (GMT+08:00)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 年-月-日T时:分:秒</span></span><br><span class="line"><span class="keyword">const</span> date3 = <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="string">"2019-05-05T05:15:30"</span>);</span><br><span class="line"><span class="built_in">console</span>.log(date3); <span class="comment">// Sun May 05 2019 05:15:30 GMT+0800 (GMT+08:00)</span></span><br></pre></td></tr></tbody></table></figure><h2 id="简单获取日期"><a href="#简单获取日期" class="headerlink" title="简单获取日期"></a>简单获取日期</h2><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> date = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 完整日期</span></span><br><span class="line"><span class="built_in">console</span>.log(date.toString()); <span class="comment">// Fri Sep 13 2019 10:41:11 GMT+0800 (GMT+08:00)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 年-月-日 时:分:秒</span></span><br><span class="line"><span class="built_in">console</span>.log(date.toLocaleString()); <span class="comment">// 2019-9-13 10:41:11</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 星期几 月 日 年</span></span><br><span class="line"><span class="built_in">console</span>.log(date.toDateString()); <span class="comment">// Fri Sep 13 2019</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 时:分:秒 时区</span></span><br><span class="line"><span class="built_in">console</span>.log(date.toTimeString()); <span class="comment">// 10:41:11 GMT+0800 (GMT+08:00)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 年-月-日</span></span><br><span class="line"><span class="built_in">console</span>.log(date.toLocaleDateString()); <span class="comment">// 2019-9-13</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 时:分:秒</span></span><br><span class="line"><span class="built_in">console</span>.log(date.toLocaleTimeString()); <span class="comment">// 10:41:11</span></span><br></pre></td></tr></tbody></table></figure><h2 id="获取时间的语法总结"><a href="#获取时间的语法总结" class="headerlink" title="获取时间的语法总结"></a>获取时间的语法总结</h2><h3 id="获取日期毫秒数"><a href="#获取日期毫秒数" class="headerlink" title="获取日期毫秒数"></a>获取日期毫秒数</h3><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">getTime(); <span class="comment">// 返回日期的毫秒数 例如：1568335062493 (13位)</span></span><br><span class="line"><span class="keyword">const</span> date = <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="string">"5/25/10"</span>);</span><br><span class="line"><span class="built_in">console</span>.log(date.getTime()); <span class="comment">// 1274716800000</span></span><br><span class="line"><span class="built_in">console</span>.log(date.valueOf()); <span class="comment">// 1274716800000</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Date</span>.parse(date)); <span class="comment">// 1274716800000</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Date</span>.now()); <span class="comment">// 获取当前的日期的毫秒数</span></span><br><span class="line"><span class="built_in">console</span>.log(+<span class="keyword">new</span> <span class="built_in">Date</span>()); <span class="comment">// 获取当前的日期的毫秒数</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Date</span>.UTC(<span class="number">2010</span>, <span class="number">4</span>, <span class="number">25</span>)); <span class="comment">// 获取UTC时间下的毫秒数 1274745600000</span></span><br></pre></td></tr></tbody></table></figure><h3 id="获取年、月、日、星期"><a href="#获取年、月、日、星期" class="headerlink" title="获取年、月、日、星期"></a>获取年、月、日、星期</h3><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 年</span></span><br><span class="line">getFullYear(); <span class="comment">// 取得四位数的年份 如果是三位数的年份，返回三位数</span></span><br><span class="line"><span class="keyword">const</span> date = <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="string">"5/25/100"</span>);</span><br><span class="line"><span class="built_in">console</span>.log(date.getFullYear()); <span class="comment">// 100</span></span><br><span class="line"><span class="keyword">const</span> date1 = <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="string">"5/25/10"</span>);</span><br><span class="line"><span class="built_in">console</span>.log(date1.getFullYear()); <span class="comment">// 2010</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 月</span></span><br><span class="line">getMonth(); <span class="comment">// 返回日期中的月份，0表示一月，11表示十二月</span></span><br><span class="line"><span class="keyword">const</span> date2 = <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="string">"5/25/100"</span>);</span><br><span class="line"><span class="built_in">console</span>.log(date2.getMonth()); <span class="comment">// 4</span></span><br><span class="line"><span class="keyword">const</span> date3 = <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="string">"12/25/100"</span>);</span><br><span class="line"><span class="built_in">console</span>.log(date3.getMonth()); <span class="comment">// 11</span></span><br><span class="line"><span class="comment">// 如果月份不是0-11整数，那么返回NaN</span></span><br><span class="line"><span class="keyword">const</span> date4 = <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="string">"12/31/2019"</span>);</span><br><span class="line"><span class="built_in">console</span>.log(date4.getMonth()); <span class="comment">// NaN</span></span><br><span class="line"><span class="comment">// 如果日期超过当月日期数，但不大于31，则月份+1，如果超过31则返回NaN</span></span><br><span class="line"><span class="keyword">const</span> date5 = <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="string">"6/32/2019"</span>);</span><br><span class="line"><span class="built_in">console</span>.log(date5.getMonth()); <span class="comment">// NaN</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 日</span></span><br><span class="line">getDate(); <span class="comment">// 返回日期月份中的天数</span></span><br><span class="line"><span class="keyword">const</span> date6 = <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="string">"6/30/19"</span>);</span><br><span class="line"><span class="built_in">console</span>.log(date6.getDate()); <span class="comment">// 30</span></span><br><span class="line"><span class="comment">// 如果月份不是0-11的整数，那么返回NaN</span></span><br><span class="line"><span class="keyword">const</span> date7 = <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="string">"13/20/2019"</span>);</span><br><span class="line"><span class="built_in">console</span>.log(date7.getDate()); <span class="comment">// NaN</span></span><br><span class="line"><span class="comment">// 如果日期超过当月日期数，但不大于31，则日期为第二月超出的日期，如果超过31则返回NaN</span></span><br><span class="line"><span class="keyword">const</span> date8 = <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="string">"2/31/19"</span>);</span><br><span class="line"><span class="built_in">console</span>.log(date8.getDate()); <span class="comment">// 3</span></span><br><span class="line"><span class="keyword">const</span> date9 = <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="string">"12/32/2019"</span>);</span><br><span class="line"><span class="built_in">console</span>.log(date9.getDate()); <span class="comment">// NaN</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 星期</span></span><br><span class="line">getDay(); <span class="comment">// 返回日期中星期的星期几(0代表星期日, 6代表星期六)</span></span><br><span class="line"><span class="keyword">const</span> date10 = <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="string">"2/15/19"</span>);</span><br><span class="line"><span class="built_in">console</span>.log(date10.getDay()); <span class="comment">// 5</span></span><br><span class="line"><span class="comment">// 如果日期超过当月日期数，但不大于31，则日期为第二月超出的星期值，如果超过31则返回NaN</span></span><br><span class="line"><span class="keyword">const</span> date11 = <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="string">"11/32/2019"</span>);</span><br><span class="line"><span class="built_in">console</span>.log(date11.getDay()); <span class="comment">// NaN</span></span><br></pre></td></tr></tbody></table></figure><h3 id="获取时、分、秒、毫秒"><a href="#获取时、分、秒、毫秒" class="headerlink" title="获取时、分、秒、毫秒"></a>获取时、分、秒、毫秒</h3><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 时</span></span><br><span class="line">getHours(); <span class="comment">// 返回日期中的小时数(0到23)</span></span><br><span class="line"><span class="keyword">const</span> date = <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="number">2019</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">17</span>, <span class="number">55</span>, <span class="number">55</span>);</span><br><span class="line"><span class="built_in">console</span>.log(date.getHours()); <span class="comment">// 17</span></span><br><span class="line"><span class="keyword">const</span> date1 = <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="number">2019</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">25</span>, <span class="number">55</span>, <span class="number">55</span>);</span><br><span class="line"><span class="built_in">console</span>.log(date1.getHours()); <span class="comment">// 1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 分</span></span><br><span class="line">getMinutes();</span><br><span class="line"><span class="keyword">const</span> date2 = <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="number">2019</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">17</span>, <span class="number">55</span>, <span class="number">55</span>);</span><br><span class="line"><span class="built_in">console</span>.log(date2.getMinutes()); <span class="comment">// 55</span></span><br><span class="line"><span class="keyword">const</span> date3 = <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="number">2019</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">21</span>, <span class="number">65</span>, <span class="number">55</span>);</span><br><span class="line"><span class="built_in">console</span>.log(date3.getMinutes()); <span class="comment">// 5</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 秒</span></span><br><span class="line">getSeconds(); <span class="comment">// 返回日期中的秒数(0-59)</span></span><br><span class="line"><span class="keyword">const</span> date4 = <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="number">2019</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">17</span>, <span class="number">55</span>, <span class="number">55</span>);</span><br><span class="line"><span class="built_in">console</span>.log(date4.getSeconds()); <span class="comment">// 55</span></span><br><span class="line"><span class="keyword">const</span> date5 = <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="number">2019</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">21</span>, <span class="number">55</span>, <span class="number">60</span>);</span><br><span class="line"><span class="built_in">console</span>.log(date5.getSeconds()); <span class="comment">// 0</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 毫秒</span></span><br><span class="line">getMilliseconds(); <span class="comment">// 获取日期中的毫秒数(0-999)</span></span><br><span class="line"><span class="keyword">const</span> date6 = <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="number">2019</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">17</span>, <span class="number">55</span>, <span class="number">55</span>, <span class="number">200</span>);</span><br><span class="line"><span class="built_in">console</span>.log(date6.getMilliseconds()); <span class="comment">// 200</span></span><br><span class="line"><span class="keyword">const</span> date7 = <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="number">2019</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">21</span>, <span class="number">55</span>, <span class="number">55</span>, <span class="number">1000</span>);</span><br><span class="line"><span class="built_in">console</span>.log(date7.getMilliseconds()); <span class="comment">// 0</span></span><br></pre></td></tr></tbody></table></figure><h2 id="设置时间的语法总结"><a href="#设置时间的语法总结" class="headerlink" title="设置时间的语法总结"></a>设置时间的语法总结</h2><div class="note"><p>获取时间的语法前面都有<code>get</code>, 设置时间的语法与之对应的是前面都是<code>set</code></p></div><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 例如设置这个日期 Sun May 05 2019 05:15:30 GMT+0800 (GMT+08:00)</span></span><br><span class="line"><span class="keyword">const</span> date = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line">date.setFullYear(<span class="number">2019</span>);</span><br><span class="line">date.setMonth(<span class="number">4</span>);</span><br><span class="line">date.setDate(<span class="number">5</span>);</span><br><span class="line">date.setHours(<span class="number">5</span>);</span><br><span class="line">date.setMinutes(<span class="number">15</span>);</span><br><span class="line">date.setSeconds(<span class="number">30</span>);</span><br><span class="line"><span class="built_in">console</span>.log(date); <span class="comment">// Sun May 05 2019 05:15:30 GMT+0800 (GMT+08:00)</span></span><br></pre></td></tr></tbody></table></figure><h2 id="日期毫秒数转化"><a href="#日期毫秒数转化" class="headerlink" title="日期毫秒数转化"></a>日期毫秒数转化</h2><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * description: 把日期毫秒数得到年月日 支持Number和String的毫秒数</span></span><br><span class="line"><span class="comment"> * param {type} time-时间毫秒数 monthWord 0(英文月份缩写) 1(英文月份全拼写) 2(中文)</span></span><br><span class="line"><span class="comment"> * return: obj-{ year, month, day, week, hour, minute, second }</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getTime</span>(<span class="params">time, monthArg = <span class="number">0</span></span>) </span>{</span><br><span class="line">  <span class="keyword">const</span> abbrMonth = [</span><br><span class="line">    <span class="string">"JAN."</span>,</span><br><span class="line">    <span class="string">"FEB."</span>,</span><br><span class="line">    <span class="string">"Mar."</span>,</span><br><span class="line">    <span class="string">"APR."</span>,</span><br><span class="line">    <span class="string">"MAY."</span>,</span><br><span class="line">    <span class="string">"JUN."</span>,</span><br><span class="line">    <span class="string">"JUL."</span>,</span><br><span class="line">    <span class="string">"AUG."</span>,</span><br><span class="line">    <span class="string">"SEP."</span>,</span><br><span class="line">    <span class="string">"OCT."</span>,</span><br><span class="line">    <span class="string">"NOV."</span>,</span><br><span class="line">    <span class="string">"DEC"</span></span><br><span class="line">  ];</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> enMonth = [</span><br><span class="line">    <span class="string">"January"</span>,</span><br><span class="line">    <span class="string">"February"</span>,</span><br><span class="line">    <span class="string">"March"</span>,</span><br><span class="line">    <span class="string">"April"</span>,</span><br><span class="line">    <span class="string">"May"</span>,</span><br><span class="line">    <span class="string">"June"</span>,</span><br><span class="line">    <span class="string">"July"</span>,</span><br><span class="line">    <span class="string">"Auguest"</span>,</span><br><span class="line">    <span class="string">"September"</span>,</span><br><span class="line">    <span class="string">"October"</span>,</span><br><span class="line">    <span class="string">"November"</span>,</span><br><span class="line">    <span class="string">"December"</span></span><br><span class="line">  ];</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> zhMonth = [</span><br><span class="line">    <span class="string">"一月"</span>,</span><br><span class="line">    <span class="string">"二月"</span>,</span><br><span class="line">    <span class="string">"三月"</span>,</span><br><span class="line">    <span class="string">"四月"</span>,</span><br><span class="line">    <span class="string">"五月"</span>,</span><br><span class="line">    <span class="string">"六月"</span>,</span><br><span class="line">    <span class="string">"七月"</span>,</span><br><span class="line">    <span class="string">"八月"</span>,</span><br><span class="line">    <span class="string">"九月"</span>,</span><br><span class="line">    <span class="string">"十月"</span>,</span><br><span class="line">    <span class="string">"十一月"</span>,</span><br><span class="line">    <span class="string">"十二月"</span></span><br><span class="line">  ];</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> date = <span class="keyword">new</span> <span class="built_in">Date</span>(+time);</span><br><span class="line">  <span class="keyword">const</span> year = date.getFullYear();</span><br><span class="line">  <span class="keyword">const</span> monthNum = date.getMonth();</span><br><span class="line">  <span class="keyword">let</span> month = <span class="string">""</span>;</span><br><span class="line">  <span class="keyword">switch</span> (monthArg) {</span><br><span class="line">    <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">      month = enMonth[monthNum];</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">      month = zhMonth[monthNum];</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">      month = abbrMonth[monthNum];</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">  }</span><br><span class="line">  <span class="keyword">const</span> day = date.getDate();</span><br><span class="line">  <span class="keyword">const</span> week = date.getDay();</span><br><span class="line">  <span class="keyword">const</span> hour = date.getHours();</span><br><span class="line">  <span class="keyword">const</span> minute = date.getMinutes();</span><br><span class="line">  <span class="keyword">const</span> second = date.getSeconds();</span><br><span class="line">  <span class="keyword">return</span> { year, month, day, week, hour, minute, second };</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> time = <span class="string">"1274716800000"</span>;</span><br><span class="line"><span class="built_in">console</span>.log(getTime(time)); <span class="comment">// { year: 2010, month: 'MAY.', day: 25, week: 2, hour: 0, minute: 0, second: 0 }</span></span><br></pre></td></tr></tbody></table></figure><h2 id="关于-UTC"><a href="#关于-UTC" class="headerlink" title="关于 UTC"></a>关于 UTC</h2><p>全称<code>Coordinated Universal Time</code>即国际协调时间，在时刻上尽量接近于<strong>格林尼(GMT)标准时间</strong></p><div class="note info"><p>时区。全球 24 个时区，把以伦敦为中心的世界地图展开，UTC 和 GMT 的伦敦是 0 区，伦敦的右边直到新西兰的东部不远的斐济为东区，而左边到太平洋中间为西区。一般用 5 位时区差来表示与 UTC 相差的小时数，东区为正，西区为负。如北京时区是东八区，领先 UTC 八个小时，记为+0800；纽约的时区是西五区，比 UTC 落后五个小时，记为 -0500。<strong>UTC + 时区差 ＝ 本地时间</strong></p></div><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> date = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line"><span class="built_in">console</span>.log(date); <span class="comment">// Fri Sep 13 2019 11:32:32 GMT+0800 (GMT+08:00)</span></span><br><span class="line"><span class="built_in">console</span>.log(date.getHours()); <span class="comment">// 11</span></span><br><span class="line"><span class="built_in">console</span>.log(date.getUTCHours()); <span class="comment">// 3</span></span><br></pre></td></tr></tbody></table></figure><div class="note primary"><p>因为平常不涉及 UTC，因此就不展开了</p></div><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>继续努力。<span class="github-emoji" style="color: transparent;background:no-repeat url(https://github.githubassets.com/images/icons/emoji/unicode/1f604.png?v8) center/contain" data-src="https://github.githubassets.com/images/icons/emoji/unicode/1f604.png?v8">😄</span> <span class="github-emoji" style="color: transparent;background:no-repeat url(https://github.githubassets.com/images/icons/emoji/unicode/1f604.png?v8) center/contain" data-src="https://github.githubassets.com/images/icons/emoji/unicode/1f604.png?v8">😄</span> <span class="github-emoji" style="color: transparent;background:no-repeat url(https://github.githubassets.com/images/icons/emoji/unicode/1f604.png?v8) center/contain" data-src="https://github.githubassets.com/images/icons/emoji/unicode/1f604.png?v8">😄</span></p><h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><ul><li><a href="https://zh.wikipedia.org/wiki/%E5%8D%8F%E8%B0%83%E4%B8%96%E7%95%8C%E6%97%B6" target="_blank" rel="noopener">维基百科-协调世界时</a></li><li><a href="https://zh.wikipedia.org/wiki/%E6%A0%BC%E6%9E%97%E5%B0%BC%E6%B2%BB%E6%A8%99%E6%BA%96%E6%99%82%E9%96%93" target="_blank" rel="noopener">维基百科-格林尼治时间</a></li><li><a href="https://jiaolonghuang.github.io/2015/03/12/shiqu/" target="_blank" rel="noopener">小路口的博客-时区的概念</a></li><li><a href="https://www.tutsmake.com/guide-for-javascript-date-methods/" target="_blank" rel="noopener">封面图片</a></li></ul><!-- rebuild by neat --><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      本文是对JavaScript日期语法的总结
    
    </summary>
    
      <category term="JavaScript" scheme="https://zjgyb.github.io/categories/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="https://zjgyb.github.io/tags/JavaScript/"/>
    
      <category term="Date" scheme="https://zjgyb.github.io/tags/Date/"/>
    
      <category term="日期" scheme="https://zjgyb.github.io/tags/%E6%97%A5%E6%9C%9F/"/>
    
  </entry>
  
  <entry>
    <title>JS数据类型判断</title>
    <link href="https://zjgyb.github.io/JS%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E5%88%A4%E6%96%AD.html"/>
    <id>https://zjgyb.github.io/JS数据类型判断.html</id>
    <published>2019-09-08T08:18:49.000Z</published>
    <updated>2019-09-30T00:31:07.130Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>本文是对<code>typeof</code>和<code>instanceof</code>两个操作符的总结。</p><h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><p>在讲这两个操作符之前，需要把相关的概念先行说明。</p><div class="note info"><p>ES6前有5种简单数据类型，分别是<code>Undefined</code>, <code>Null</code>, <code>Boolean</code>, <code>Number</code>, <code>String</code>; 还有一种复杂数据类型<code>Object</code><br>而ES6又增加了一种<code>Symbol</code></p></div><h2 id="typeof检测"><a href="#typeof检测" class="headerlink" title="typeof检测"></a>typeof检测</h2><h3 id="举例说明"><a href="#举例说明" class="headerlink" title="举例说明"></a>举例说明</h3><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> [a1, b1, c1, d1, e1, f1, g1] = [<span class="literal">undefined</span>, <span class="literal">null</span>, <span class="literal">false</span>, <span class="literal">NaN</span>, <span class="string">"abc"</span>, {}, <span class="built_in">Symbol</span>()];</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> a1); <span class="comment">// undefined</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> b1); <span class="comment">// object</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> c1); <span class="comment">// boolean</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> d1); <span class="comment">// number</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> e1); <span class="comment">// string</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> f1); <span class="comment">// object</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> g1); <span class="comment">// symbol</span></span><br><span class="line"><span class="keyword">const</span> h1 = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>{};</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> h1); <span class="comment">// function</span></span><br><span class="line"><span class="keyword">const</span> [i1, j1, l1, m1, n1] = [<span class="keyword">new</span> <span class="built_in">Date</span>(), /\s/, <span class="built_in">Math</span>.sign, <span class="built_in">Math</span>.PI, []];</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> i1); <span class="comment">// object</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> j1); <span class="comment">// object</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> l1); <span class="comment">// function</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> m1); <span class="comment">// number</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> n1); <span class="comment">// object</span></span><br></pre></td></tr></tbody></table></figure><p>由此可以看出可以使用typeof检测判断出来的是<code>undefined</code>, <code>boolean</code>, <code>number</code>, <code>symbol</code>, <code>function</code>, <code>string</code>, 但需要注意的是<code>boolean</code>, <code>number</code>, <code>string</code>的值都不能通过<code>new</code>出来的，否则检测出的都是<code>object</code>，而<code>function</code>不受影响，例如：</p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> a2 = <span class="keyword">new</span> <span class="built_in">Boolean</span>(<span class="literal">false</span>);</span><br><span class="line"><span class="keyword">const</span> b2 = <span class="keyword">new</span> <span class="built_in">Number</span>(<span class="number">25</span>);</span><br><span class="line"><span class="keyword">const</span> c2 = <span class="keyword">new</span> <span class="built_in">String</span>(<span class="string">'abc'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> a2); <span class="comment">// object</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> b2); <span class="comment">// object</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> c2); <span class="comment">// object</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> d2 = <span class="keyword">new</span> <span class="built_in">Function</span>(<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'return a + b'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> d2); <span class="comment">// function</span></span><br></pre></td></tr></tbody></table></figure><h2 id="instanceof"><a href="#instanceof" class="headerlink" title="instanceof"></a>instanceof</h2><p>因为<code>typeof</code>不能检测出引用的数据类型，例如数组、正则等等使用<code>typeof</code>检测出的都是<code>object</code></p><div class="note warning"><p>基本类型的数据使用<code>instanceof</code>始终判断<code>false</code>，因为基本类型不是对象</p></div><h3 id="举例"><a href="#举例" class="headerlink" title="举例"></a>举例</h3><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> [a3, b3, c3, d3] = [[], {}, <span class="keyword">new</span> <span class="built_in">Date</span>(), /\s/];</span><br><span class="line"><span class="built_in">console</span>.log(a3 <span class="keyword">instanceof</span> <span class="built_in">Array</span>); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(b3 <span class="keyword">instanceof</span> <span class="built_in">Object</span>); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(c3 <span class="keyword">instanceof</span> <span class="built_in">Date</span>); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(d3 <span class="keyword">instanceof</span> <span class="built_in">RegExp</span>); <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> e3 = <span class="keyword">new</span> <span class="built_in">Boolean</span>(<span class="literal">false</span>);</span><br><span class="line"><span class="keyword">const</span> f3 = <span class="keyword">new</span> <span class="built_in">Number</span>(<span class="number">25</span>);</span><br><span class="line"><span class="keyword">const</span> g3 = <span class="keyword">new</span> <span class="built_in">String</span>(<span class="string">'abc'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(e3 <span class="keyword">instanceof</span> <span class="built_in">Boolean</span>); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(f3 <span class="keyword">instanceof</span> <span class="built_in">Number</span>); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(g3 <span class="keyword">instanceof</span> <span class="built_in">String</span>); <span class="comment">// true</span></span><br></pre></td></tr></tbody></table></figure><h3 id="两个意外"><a href="#两个意外" class="headerlink" title="两个意外"></a>两个意外</h3><p>值得注意的是有两个意外</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> h3 = <span class="literal">null</span>;</span><br><span class="line"><span class="built_in">console</span>.log(h3 <span class="keyword">instanceof</span> <span class="built_in">Object</span>); <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> i3 = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>{};</span><br><span class="line"><span class="built_in">console</span>.log(i3 <span class="keyword">instanceof</span> <span class="built_in">Function</span>); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(i3 <span class="keyword">instanceof</span> <span class="built_in">Object</span>); <span class="comment">// true</span></span><br></pre></td></tr></tbody></table></figure><p>为什么会这样呢？</p><p>从它的语法中我们可以看出<code>result = variable instanceof constructor</code>它是通过该操作符寻找它的引用类型，而所有引用类型的值都是<code>Object</code>的实例，这也就解释了所有的对象使用<code>instanceof</code>的时候结果都为<code>true</code></p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> [a4, b4, c4] = [[], {}, <span class="keyword">new</span> <span class="built_in">Date</span>(), /\s/];</span><br><span class="line"><span class="built_in">console</span>.log(a4 <span class="keyword">instanceof</span> <span class="built_in">Object</span>); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(b4 <span class="keyword">instanceof</span> <span class="built_in">Object</span>); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(c4 <span class="keyword">instanceof</span> <span class="built_in">Object</span>); <span class="comment">// true</span></span><br></pre></td></tr></tbody></table></figure><p><code>null</code>是空对象指针，因此<code>typeof null === 'object'</code>，然而<code>null</code>又不是<code>object</code>的引用类型的实例，因此使用<code>instanceof</code>会显示<code>false</code></p><h2 id="参考教程"><a href="#参考教程" class="headerlink" title="参考教程"></a>参考教程</h2><ul><li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/typeof" target="_blank" rel="noopener">MDN-typeof</a></li><li><a href="https://blog.logrocket.com/javascript-typeof-2511d53a1a62/" target="_blank" rel="noopener">封面图片</a></li></ul><!-- rebuild by neat --><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      本文介绍一下 typeof &amp; instanceof 两个操作符对数据类型的判断。
    
    </summary>
    
      <category term="JavaScript" scheme="https://zjgyb.github.io/categories/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="https://zjgyb.github.io/tags/JavaScript/"/>
    
      <category term="typeof" scheme="https://zjgyb.github.io/tags/typeof/"/>
    
      <category term="instanceof" scheme="https://zjgyb.github.io/tags/instanceof/"/>
    
  </entry>
  
  <entry>
    <title>函数柯里化&amp;偏函数</title>
    <link href="https://zjgyb.github.io/%E5%87%BD%E6%95%B0%E6%9F%AF%E9%87%8C%E5%8C%96&amp;%E5%81%8F%E5%87%BD%E6%95%B0.html"/>
    <id>https://zjgyb.github.io/函数柯里化&amp;偏函数.html</id>
    <published>2019-09-04T01:08:13.000Z</published>
    <updated>2019-09-04T01:09:45.961Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>最近几天在看高程，对于其中的概念有些疑惑，因此找了相关的教程，希望自己能够了解它，并且有可能运用它。本文主要参考的是<a href="https://github.com/mqyqingfeng/Blog" target="_blank" rel="noopener">冴羽的博客</a>，结合自身能理解的方式来熟悉这两个概念。</p><h2 id="柯里化"><a href="#柯里化" class="headerlink" title="柯里化"></a>柯里化</h2><p>什么是柯里化呢？来自于<a href="https://github.com/mqyqingfeng/Blog/issues/42" target="_blank" rel="noopener">冴羽的博客-JavaScript专题之函数柯里化</a></p><blockquote><p>在数学和计算机科学中，柯里化是一种将使用多个参数的一个函数转换成一系列使用一个参数的函数的技术。</p></blockquote><h2 id="举个例子"><a href="#举个例子" class="headerlink" title="举个例子"></a>举个例子</h2><p>本例子来自于<a href="https://www.youtube.com/watch?v=iZLP4qOwY8I" target="_blank" rel="noopener">Fun Fun Function-YouTube</a></p><h3 id="先举一个普通函数"><a href="#先举一个普通函数" class="headerlink" title="先举一个普通函数"></a>先举一个普通函数</h3><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> dragon = <span class="function">(<span class="params">name, size, element</span>) =&gt;</span> {</span><br><span class="line">  <span class="keyword">return</span> <span class="string">`<span class="subst">${name}</span> is a <span class="subst">${size}</span> dragon that breathes <span class="subst">${element}</span>!`</span>;</span><br><span class="line">};</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(dragon(<span class="string">"Karo"</span>, <span class="string">"large"</span>, <span class="string">"ice"</span>));</span><br><span class="line"><span class="comment">// Karo is a large dragon that breathes ice!</span></span><br></pre></td></tr></tbody></table></figure><h3 id="模拟柯里化方式"><a href="#模拟柯里化方式" class="headerlink" title="模拟柯里化方式"></a>模拟柯里化方式</h3><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> dragon = <span class="function"><span class="params">name</span> =&gt;</span> size =&gt; <span class="function"><span class="params">element</span> =&gt;</span></span><br><span class="line">  <span class="string">`<span class="subst">${name}</span> is a <span class="subst">${size}</span> dragon that breathes <span class="subst">${element}</span>!`</span>;</span><br><span class="line"><span class="built_in">console</span>.log(dragon(<span class="string">'Karo'</span>)(<span class="string">'large'</span>)(<span class="string">'ice'</span>));</span><br><span class="line"><span class="comment">// Karo is a large dragon that breathes ice!</span></span><br></pre></td></tr></tbody></table></figure><h2 id="高程中柯里化的实现方式"><a href="#高程中柯里化的实现方式" class="headerlink" title="高程中柯里化的实现方式"></a>高程中柯里化的实现方式</h2><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">curry</span>(<span class="params">fn</span>) </span>{</span><br><span class="line">  <span class="keyword">var</span> args = <span class="built_in">Array</span>.prototype.slice.call(<span class="built_in">arguments</span>, <span class="number">1</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>{</span><br><span class="line">    <span class="keyword">var</span> innerArgs = <span class="built_in">Array</span>.prototype.slice.call(<span class="built_in">arguments</span>);</span><br><span class="line">    <span class="keyword">var</span> finalArgs = args.concat(innerArgs);</span><br><span class="line">    <span class="keyword">return</span> fn.apply(<span class="literal">null</span>, finalArgs);</span><br><span class="line">  }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> dragon = <span class="function">(<span class="params">name, size, element</span>) =&gt;</span> {</span><br><span class="line">  <span class="keyword">return</span> <span class="string">`<span class="subst">${name}</span> is a <span class="subst">${size}</span> dragon that breathes <span class="subst">${element}</span>!`</span>;</span><br><span class="line">};</span><br><span class="line">dragon = curry(dragon);</span><br><span class="line"><span class="keyword">let</span> fluffykinsDragon = dragon(<span class="string">'fluffykins'</span>); <span class="comment">// curyy函数只能保存一个参数就返回了</span></span><br><span class="line"><span class="comment">// fluffykins is a undefined dragon that breathes undefined! </span></span><br><span class="line"><span class="comment">// 如果执行下面语句就会报错，</span></span><br><span class="line"><span class="comment">// let tinyDragon = fluffykinsDragon("tiny"); 报错</span></span><br></pre></td></tr></tbody></table></figure><h2 id="柯里化函数如何实现呢？"><a href="#柯里化函数如何实现呢？" class="headerlink" title="柯里化函数如何实现呢？"></a>柯里化函数如何实现呢？</h2><p>借助上面的例子，我们开始从第一版写起</p><h3 id="柯里化第一版"><a href="#柯里化第一版" class="headerlink" title="柯里化第一版"></a>柯里化第一版</h3><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 第一版</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">curry</span>(<span class="params">fn</span>) </span>{</span><br><span class="line">  <span class="keyword">var</span> args = [];</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>{</span><br><span class="line">    args = args.concat([].slice.call(<span class="built_in">arguments</span>));</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>{</span><br><span class="line">      args = args.concat([].slice.call(<span class="built_in">arguments</span>));</span><br><span class="line">      <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>{</span><br><span class="line">        args = args.concat([].slice.call(<span class="built_in">arguments</span>));</span><br><span class="line">        <span class="keyword">return</span> fn.apply(<span class="literal">null</span>, args);</span><br><span class="line">      }</span><br><span class="line">    }</span><br><span class="line">  };</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>测试一下</p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 测试</span></span><br><span class="line"><span class="keyword">let</span> dragon = <span class="function">(<span class="params">name, size, element</span>) =&gt;</span> {</span><br><span class="line">  <span class="keyword">return</span> <span class="string">`<span class="subst">${name}</span> is a <span class="subst">${size}</span> dragon that breathes <span class="subst">${element}</span>!`</span>;</span><br><span class="line">};</span><br><span class="line">dragon = curry(dragon);</span><br><span class="line"><span class="keyword">let</span> fluffykinsDragon = dragon(<span class="string">"fluffykins"</span>);</span><br><span class="line"><span class="keyword">let</span> tinyDragon = fluffykinsDragon(<span class="string">"tiny"</span>);</span><br><span class="line"><span class="built_in">console</span>.log(tinyDragon(<span class="string">"ice"</span>));</span><br><span class="line"><span class="comment">// fluffykins is a tiny dragon that breathes ice!</span></span><br></pre></td></tr></tbody></table></figure><p>如果参数过多，那么就会无限嵌套，因此第二版用递归优化一下</p><h3 id="柯里化第二版"><a href="#柯里化第二版" class="headerlink" title="柯里化第二版"></a>柯里化第二版</h3><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 第二版</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">curry</span>(<span class="params">fn, args, length</span>) </span>{</span><br><span class="line">  length = length || fn.length;</span><br><span class="line">  args = args || [];</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>{</span><br><span class="line">    args = args.concat([].slice.call(<span class="built_in">arguments</span>));</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">arguments</span>.length &lt; length) {</span><br><span class="line">      <span class="keyword">return</span> curry(fn, args, length - <span class="built_in">arguments</span>.length);</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> fn.apply(<span class="keyword">this</span>, args);</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>我们发现<code>curry(fn, args, length - 1)</code>有三个参数，我们利用高程中的例子当成中间函数可以再优化一下，于是有了第三版</p><h3 id="柯里化第三版"><a href="#柯里化第三版" class="headerlink" title="柯里化第三版"></a>柯里化第三版</h3><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 第三版</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sub_curry</span>(<span class="params">fn</span>) </span>{</span><br><span class="line">  <span class="keyword">var</span> args = <span class="built_in">Array</span>.prototype.slice.call(<span class="built_in">arguments</span>, <span class="number">1</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>{</span><br><span class="line">    <span class="keyword">var</span> innerArgs = <span class="built_in">Array</span>.prototype.slice.call(<span class="built_in">arguments</span>);</span><br><span class="line">    <span class="keyword">var</span> finalArgs = args.concat(innerArgs);</span><br><span class="line">    <span class="keyword">return</span> fn.apply(<span class="literal">null</span>, finalArgs);</span><br><span class="line">  }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">curry</span>(<span class="params">fn, length</span>) </span>{</span><br><span class="line">  length = length || fn.length;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>{</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">arguments</span>.length &lt; length) {</span><br><span class="line">      <span class="keyword">var</span> args = [fn].concat([].slice.call(<span class="built_in">arguments</span>));</span><br><span class="line">      <span class="keyword">return</span> curry(sub_curry.apply(<span class="keyword">this</span>, args), length - <span class="built_in">arguments</span>.length);</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> fn.apply(<span class="keyword">this</span>, <span class="built_in">arguments</span>);</span><br><span class="line">  };</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="使用ES6改写一下，优化一下"><a href="#使用ES6改写一下，优化一下" class="headerlink" title="使用ES6改写一下，优化一下"></a>使用ES6改写一下，优化一下</h3><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sub_curry</span>(<span class="params">fn, ...args</span>) </span>{</span><br><span class="line">  <span class="keyword">return</span> <span class="function">(<span class="params">...args1</span>) =&gt;</span> fn(...args, ...args1);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">curry</span>(<span class="params">fn, length</span>) </span>{</span><br><span class="line">  length = length || fn.length;</span><br><span class="line">  <span class="keyword">return</span> <span class="function">(<span class="params">...args</span>) =&gt;</span> {</span><br><span class="line">    <span class="keyword">if</span> (args.length &lt; length) {</span><br><span class="line">      <span class="keyword">return</span> curry(sub_curry(fn, ...args), length - args.length);</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> fn(...args);</span><br><span class="line">  };</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="穿插一下1"><a href="#穿插一下1" class="headerlink" title="穿插一下1"></a>穿插一下1</h3><p>之前我把<code>args</code>参数进行柯里化了，现在除去<code>length</code>参数的另一种写法</p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">curry</span>(<span class="params">fn, args</span>) </span>{</span><br><span class="line">  <span class="keyword">var</span> length = fn.length;</span><br><span class="line"></span><br><span class="line">  args = args || [];</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>{</span><br><span class="line">    <span class="keyword">var</span> _args = args.concat([].slice.call(<span class="built_in">arguments</span>));</span><br><span class="line">    <span class="keyword">if</span> (_args.length &lt; length) {</span><br><span class="line">      <span class="keyword">return</span> curry.call(<span class="keyword">this</span>, fn, _args);</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> fn.apply(<span class="keyword">this</span>, _args);</span><br><span class="line">  };</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="穿插一下2——我看到一种更简洁的写法"><a href="#穿插一下2——我看到一种更简洁的写法" class="headerlink" title="穿插一下2——我看到一种更简洁的写法"></a>穿插一下2——我看到一种更简洁的写法</h3><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">curry</span>(<span class="params">fn</span>) </span>{</span><br><span class="line">  <span class="keyword">return</span> judge = <span class="function">(<span class="params">...args</span>) =&gt;</span> {</span><br><span class="line">    <span class="keyword">return</span> args.length === fn.length ? fn(...args) : <span class="function">(<span class="params">...arg</span>) =&gt;</span> judge(...args, ...arg);</span><br><span class="line">  };</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="柯里化第四版"><a href="#柯里化第四版" class="headerlink" title="柯里化第四版"></a>柯里化第四版</h3><p>参数含有占位符</p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 第四版</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">curry</span>(<span class="params">fn, args</span>) </span>{</span><br><span class="line">  <span class="keyword">var</span> length = fn.length;</span><br><span class="line">  args = args || [];</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>{</span><br><span class="line">    <span class="keyword">var</span> newArgs = [].slice.call(<span class="built_in">arguments</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>, len = args.length; i &lt; len; i++) {</span><br><span class="line">      <span class="keyword">if</span> (args[i] === _) {</span><br><span class="line">        args.splice(i, <span class="number">1</span>, newArgs.shift());</span><br><span class="line">      }</span><br><span class="line">      <span class="keyword">if</span> (newArgs.length === <span class="number">0</span>) <span class="keyword">break</span>;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">var</span> _args = args.concat(newArgs);</span><br><span class="line">    <span class="keyword">var</span> _filterArr = _args.filter(<span class="function"><span class="params">ele</span> =&gt;</span> ele !== _);</span><br><span class="line">    <span class="keyword">if</span> (_filterArr.length &lt; length) {</span><br><span class="line">      <span class="keyword">return</span> curry.call(<span class="keyword">this</span>, fn, _args);</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> fn.apply(<span class="keyword">this</span>, _args);</span><br><span class="line">  };</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>测试一下</p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> fn = curry(<span class="function"><span class="keyword">function</span>(<span class="params">a, b, c, d, e</span>) </span>{</span><br><span class="line">  <span class="built_in">console</span>.log([a, b, c, d, e]);</span><br><span class="line">});</span><br><span class="line"><span class="keyword">var</span> _ = {};</span><br><span class="line"><span class="comment">// 输出的结果都是[1, 2, 3, 4, 5]</span></span><br><span class="line">fn(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>);</span><br><span class="line">fn(_, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>)(<span class="number">1</span>);</span><br><span class="line">fn(<span class="number">1</span>, _, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>)(<span class="number">2</span>);</span><br><span class="line">fn(<span class="number">1</span>, _, <span class="number">3</span>)(_, <span class="number">4</span>)(<span class="number">2</span>)(<span class="number">5</span>);</span><br><span class="line">fn(<span class="number">1</span>, _, _, <span class="number">4</span>)(_, <span class="number">3</span>)(<span class="number">2</span>)(<span class="number">5</span>);</span><br><span class="line">fn(_, <span class="number">2</span>)(_, _, <span class="number">4</span>)(<span class="number">1</span>)(<span class="number">3</span>)(<span class="number">5</span>);</span><br></pre></td></tr></tbody></table></figure><h2 id="偏函数"><a href="#偏函数" class="headerlink" title="偏函数"></a>偏函数</h2><p>什么是偏函数呢？还是来自于<a href="https://github.com/mqyqingfeng/Blog/issues/43" target="_blank" rel="noopener">冴羽的博客</a></p><blockquote><p>在计算机科学中，局部应用是指固定一个函数的一些参数，然后产生另一个更小元的函数。</p></blockquote><div class="note info"><p>柯里化是将一个多参数函数转换成多个单参数函数，也就是将一个 n 元函数转换成 n 个一元函数。<br>局部应用则是固定一个函数的一个或者多个参数，也就是将一个 n 元函数转换成一个 n - x 元函数。</p></div><h2 id="偏函数第一版"><a href="#偏函数第一版" class="headerlink" title="偏函数第一版"></a>偏函数第一版</h2><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 也就是高程中的例子</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">partial</span>(<span class="params">fn</span>) </span>{</span><br><span class="line">  <span class="keyword">var</span> args = <span class="built_in">Array</span>.prototype.slice.call(<span class="built_in">arguments</span>, <span class="number">1</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>{</span><br><span class="line">    <span class="keyword">var</span> innerArgs = <span class="built_in">Array</span>.prototype.slice.call(<span class="built_in">arguments</span>);</span><br><span class="line">    <span class="keyword">var</span> finalArgs = args.concat(innerArgs);</span><br><span class="line">    <span class="keyword">return</span> fn.apply(<span class="literal">null</span>, finalArgs);</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="偏函数第二版"><a href="#偏函数第二版" class="headerlink" title="偏函数第二版"></a>偏函数第二版</h2><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> _ = {};</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">partial</span>(<span class="params">fn</span>) </span>{</span><br><span class="line">  <span class="keyword">var</span> args = [].slice.call(<span class="built_in">arguments</span>, <span class="number">1</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>{</span><br><span class="line">    <span class="keyword">var</span> len = args.length;</span><br><span class="line">    <span class="keyword">var</span> _args = [].slice.call(<span class="built_in">arguments</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; len; i++) {</span><br><span class="line">      args[i] = args[i] === _ ? _args.shift() : args[i];</span><br><span class="line">      <span class="keyword">if</span> (_args.length === <span class="number">0</span>) <span class="keyword">break</span>;</span><br><span class="line">    }</span><br><span class="line">    args.concat(_args);</span><br><span class="line">    <span class="keyword">return</span> fn.apply(<span class="keyword">this</span>, args);</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>测试一下</p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> subtract = <span class="function"><span class="keyword">function</span>(<span class="params">a, b, c</span>) </span>{</span><br><span class="line">  <span class="keyword">return</span> b - a + c;</span><br><span class="line">};</span><br><span class="line"><span class="keyword">var</span> subFrom20 = partial(subtract, <span class="number">5</span>, _, _);</span><br><span class="line"><span class="built_in">console</span>.log(subFrom20(<span class="number">15</span>, <span class="number">5</span>, <span class="number">5</span>)); <span class="comment">// 15</span></span><br></pre></td></tr></tbody></table></figure><h2 id="总结一下"><a href="#总结一下" class="headerlink" title="总结一下"></a>总结一下</h2><p>通过教程和自己的理解初步了解了柯里化和偏函数，至于具体的使用场景，可能是用到了才知道吧。<span class="github-emoji" style="color: transparent;background:no-repeat url(https://github.githubassets.com/images/icons/emoji/unicode/1f602.png?v8) center/contain" data-src="https://github.githubassets.com/images/icons/emoji/unicode/1f602.png?v8">😂</span></p><h2 id="参考教程"><a href="#参考教程" class="headerlink" title="参考教程"></a>参考教程</h2><ul><li><a href="https://github.com/mqyqingfeng/Blog/issues/42" target="_blank" rel="noopener">冴羽的博客-JavaScript专题之函数柯里化</a></li><li><a href="https://github.com/mqyqingfeng/Blog/issues/43" target="_blank" rel="noopener">冴羽的博客-JavaScript专题之偏函数</a></li><li><a href="https://www.youtube.com/watch?v=iZLP4qOwY8I" target="_blank" rel="noopener">Fun Fun Function</a></li><li><a href="https://blog.jscrambler.com/curried-functions-in-javascript/" target="_blank" rel="noopener">封面图片</a></li></ul><!-- rebuild by neat --><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      本文介绍柯里化和偏函数知识以及代码实现
    
    </summary>
    
      <category term="JavaScript" scheme="https://zjgyb.github.io/categories/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="https://zjgyb.github.io/tags/JavaScript/"/>
    
      <category term="柯里化" scheme="https://zjgyb.github.io/tags/%E6%9F%AF%E9%87%8C%E5%8C%96/"/>
    
      <category term="偏函数" scheme="https://zjgyb.github.io/tags/%E5%81%8F%E5%87%BD%E6%95%B0/"/>
    
  </entry>
  
  <entry>
    <title>说说颜色转换</title>
    <link href="https://zjgyb.github.io/%E8%AF%B4%E8%AF%B4%E9%A2%9C%E8%89%B2%E8%BD%AC%E6%8D%A2.html"/>
    <id>https://zjgyb.github.io/说说颜色转换.html</id>
    <published>2019-08-30T14:17:55.000Z</published>
    <updated>2019-08-31T11:09:19.005Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在项目中遇到了颜色转换，因此就研究了如何进行颜色转换，记录下来方便以后温故。</p><h2 id="十六进制转换成-RGBA"><a href="#十六进制转换成-RGBA" class="headerlink" title="十六进制转换成 RGBA"></a>十六进制转换成 RGBA</h2><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * description: 把十六进制颜色转化成rgba, 分别有三种, 例如: '#fff' '#ffff00' '#ffff00ff'——注意默认最后两位为透明度的rgba</span></span><br><span class="line"><span class="comment"> * param {type} str为上面描述的参数</span></span><br><span class="line"><span class="comment"> * return: rgba(num, num, num, num) 例如传入'#ffffff' 传出rgba(255, 255, 255, 1.00)没有透明度值默认是1</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">changeHexToRgba</span>(<span class="params">str</span>) </span>{</span><br><span class="line">  <span class="keyword">const</span> REGCOLOR = <span class="regexp">/^#([A-Fa-f0-9]{3}|[A-Fa-f0-9]{6}|[A-Fa-f0-9]{8})$/</span>;</span><br><span class="line">  <span class="keyword">const</span> ISRGBA = REGCOLOR.test(str);</span><br><span class="line">  <span class="keyword">if</span> (ISRGBA === <span class="literal">false</span>) {</span><br><span class="line">    <span class="keyword">throw</span> <span class="built_in">Error</span>(<span class="string">"Not a valid value"</span>);</span><br><span class="line">  }</span><br><span class="line">  <span class="comment">// 去掉#号</span></span><br><span class="line">  <span class="keyword">const</span> colorStr = str.slice(<span class="number">1</span>);</span><br><span class="line">  <span class="keyword">const</span> len = colorStr.length;</span><br><span class="line">  <span class="keyword">if</span> (len === <span class="number">3</span>) {</span><br><span class="line">    <span class="keyword">const</span> color = colorStr</span><br><span class="line">      .split(<span class="string">""</span>)</span><br><span class="line">      .map(<span class="function"><span class="params">ele</span> =&gt;</span> <span class="built_in">parseInt</span>(<span class="string">`0x<span class="subst">${ele.repeat(<span class="number">2</span>)}</span>`</span>))</span><br><span class="line">      .join(<span class="string">","</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">`rgba(<span class="subst">${color}</span>,1)`</span>;</span><br><span class="line">  }</span><br><span class="line">  <span class="keyword">const</span> color = colorStr.match(<span class="regexp">/[A-z0-9]{2}/g</span>).map(<span class="function"><span class="params">ele</span> =&gt;</span> <span class="built_in">parseInt</span>(<span class="string">`0x<span class="subst">${ele}</span>`</span>));</span><br><span class="line">  <span class="keyword">if</span> (len === <span class="number">6</span>) {</span><br><span class="line">    <span class="keyword">return</span> <span class="string">`rgba(<span class="subst">${color.join(<span class="string">","</span>)}</span>,1)`</span>;</span><br><span class="line">  }</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (len === <span class="number">8</span>) {</span><br><span class="line">    <span class="keyword">const</span> opacity = (color.pop() / <span class="number">255</span>).toFixed(<span class="number">2</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">`rgba(<span class="subst">${color.slice(<span class="number">0</span>, <span class="number">3</span>).join(<span class="string">","</span>)}</span>, <span class="subst">${opacity}</span>)`</span>;</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="RGBA-转换成-16-进制"><a href="#RGBA-转换成-16-进制" class="headerlink" title="RGBA 转换成 16 进制"></a>RGBA 转换成 16 进制</h2><p>安卓显示颜色的十六进制是<code>ARGB</code>格式，因此一开始我误以为网页里面显示的十六进制也是<code>ARGB</code>，实际是<code>RGBA</code>也就是<code>hex</code>的值</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * description: 把rgba颜色转化成十六进制颜色</span></span><br><span class="line"><span class="comment"> * param {type} str为rgba值, 例如rgba(255, 255, 255, 1);</span></span><br><span class="line"><span class="comment"> * return: 十六进制值 例如: #ffffffff</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">changeRgbaToHex</span>(<span class="params">str</span>) </span>{</span><br><span class="line">  <span class="keyword">const</span> colorArr = str.match(<span class="regexp">/(0\.)?\d+/g</span>);</span><br><span class="line">  <span class="keyword">const</span> color = colorArr.map(<span class="function">(<span class="params">ele, index, array</span>) =&gt;</span> {</span><br><span class="line">    <span class="keyword">if</span> (index === array.length - <span class="number">1</span>) {</span><br><span class="line">      <span class="comment">// 透明度</span></span><br><span class="line">      <span class="keyword">let</span> opacity = (ele * <span class="number">100</span> * <span class="number">255</span>) / <span class="number">100</span>;</span><br><span class="line">      <span class="keyword">return</span> <span class="built_in">Math</span>.round(opacity)</span><br><span class="line">        .toString(<span class="number">16</span>)</span><br><span class="line">        .padEnd(<span class="number">2</span>, <span class="string">"0"</span>);</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Number</span>.parseFloat(ele)</span><br><span class="line">      .toString(<span class="number">16</span>)</span><br><span class="line">      .padStart(<span class="number">2</span>, <span class="string">"0"</span>);</span><br><span class="line">  });</span><br><span class="line">  <span class="keyword">return</span> <span class="string">`#<span class="subst">${color.join(<span class="string">""</span>)}</span>`</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="RGBA-转换成-HSLA"><a href="#RGBA-转换成-HSLA" class="headerlink" title="RGBA 转换成 HSLA"></a>RGBA 转换成 HSLA</h2><h3 id="转换公式-来自维基百科-最下面有链接-点击图片可以放大"><a href="#转换公式-来自维基百科-最下面有链接-点击图片可以放大" class="headerlink" title="转换公式(来自维基百科, 最下面有链接, 点击图片可以放大)"></a>转换公式(来自维基百科, 最下面有链接, 点击图片可以放大)</h3><p><img src="/./说说颜色转换/rgb_hsl.png" alt="RGBA 转换成 HSLA" width="100%"></p><h3 id="按照转换公式实现代码"><a href="#按照转换公式实现代码" class="headerlink" title="按照转换公式实现代码"></a>按照转换公式实现代码</h3><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * description: 把rgba颜色转化成hsla颜色</span></span><br><span class="line"><span class="comment"> * param {type} str为rgba值, 例如rgba(15, 244, 235, 0.5);</span></span><br><span class="line"><span class="comment"> * return: hsla值 例如: hsla(178， 91%, 51%, 0.5)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">changeRgbaToHSLA</span>(<span class="params">str</span>) </span>{</span><br><span class="line">  <span class="keyword">const</span> colorArr = str.match(<span class="regexp">/(0\.)?\d+/g</span>);</span><br><span class="line">  <span class="keyword">const</span> opacity = colorArr.pop();</span><br><span class="line">  <span class="keyword">const</span> r = colorArr[<span class="number">0</span>] / <span class="number">255</span>;</span><br><span class="line">  <span class="keyword">const</span> g = colorArr[<span class="number">1</span>] / <span class="number">255</span>;</span><br><span class="line">  <span class="keyword">const</span> b = colorArr[<span class="number">2</span>] / <span class="number">255</span>;</span><br><span class="line">  <span class="keyword">const</span> max = <span class="built_in">Math</span>.max(r, g, b);</span><br><span class="line">  <span class="keyword">const</span> min = <span class="built_in">Math</span>.min(r, g, b);</span><br><span class="line">  <span class="keyword">const</span> num = max - min;</span><br><span class="line">  <span class="keyword">let</span> h = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">let</span> s = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">let</span> l = <span class="number">0.5</span> * (max + min);</span><br><span class="line">  <span class="keyword">if</span> (max !== min) {</span><br><span class="line">    s = l &lt;= <span class="number">0.5</span> ? num / (<span class="number">2</span> * l) : num / (<span class="number">2</span> - <span class="number">2</span> * l);</span><br><span class="line">    <span class="keyword">switch</span> (max) {</span><br><span class="line">      <span class="keyword">case</span> b:</span><br><span class="line">        h = ((r - g) / num) * <span class="number">60</span> + <span class="number">240</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> g:</span><br><span class="line">        h = ((b - r) / num) * <span class="number">60</span> + <span class="number">120</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> r:</span><br><span class="line">        h = g &gt;= b ? ((g - b) / num) * <span class="number">60</span> : ((g - b) / num) * <span class="number">60</span> + <span class="number">360</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">default</span>:</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line"></span><br><span class="line">  h = <span class="built_in">Math</span>.round(h);</span><br><span class="line">  s = <span class="built_in">Math</span>.round(s * <span class="number">100</span>);</span><br><span class="line">  l = <span class="built_in">Math</span>.round(l * <span class="number">100</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="string">`hsl(<span class="subst">${h}</span>, <span class="subst">${s}</span>%, <span class="subst">${l}</span>%, <span class="subst">${opacity}</span>)`</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="HSL-转换成-RGB"><a href="#HSL-转换成-RGB" class="headerlink" title="HSL 转换成 RGB"></a>HSL 转换成 RGB</h2><blockquote><p>Hue, Saturation, Lightness 分别代表色相(0~360°)、饱和(0~100%)、亮度(0~100%)</p></blockquote><h3 id="转换公式-来自维基百科-最下面有链接-点击图片可以放大-1"><a href="#转换公式-来自维基百科-最下面有链接-点击图片可以放大-1" class="headerlink" title="转换公式(来自维基百科, 最下面有链接, 点击图片可以放大)"></a>转换公式(来自维基百科, 最下面有链接, 点击图片可以放大)</h3><p><img src="/./说说颜色转换/hsl_rgb.png" alt="HSL 转换成 RGB" width="100%"></p><div class="note info"><p>刚开始没看懂tC是什么，所以注明一下，tC就是tR，tG，tB三个变量按tC的规则分别进行运算最终得到R、G、B的值</p></div><h3 id="按照转换公式实现代码-1"><a href="#按照转换公式实现代码-1" class="headerlink" title="按照转换公式实现代码"></a>按照转换公式实现代码</h3><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * description: 把hsl颜色转化成rgb颜色</span></span><br><span class="line"><span class="comment"> * param {type} str为hsl值, 例如hsl(178, 40%, 50%);</span></span><br><span class="line"><span class="comment"> * return: rgb值 例如: rgb(77, 179, 175)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">changeHSLToRGB</span>(<span class="params">str</span>) </span>{</span><br><span class="line">  <span class="keyword">const</span> colorArr = str.match(<span class="regexp">/\d+/g</span>);</span><br><span class="line">  <span class="keyword">let</span> [h, s, l] = colorArr;</span><br><span class="line">  h = h / <span class="number">360</span>;</span><br><span class="line">  s = s / <span class="number">100</span>;</span><br><span class="line">  l = l / <span class="number">100</span>;</span><br><span class="line">  <span class="keyword">if</span> (s === <span class="number">0</span>) {</span><br><span class="line">    l = <span class="built_in">Math</span>.round(l * <span class="number">255</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">`rgb(<span class="subst">${l}</span>, <span class="subst">${l}</span>, <span class="subst">${l}</span>)`</span>;</span><br><span class="line">  }</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> getRGB = <span class="function"><span class="params">num</span> =&gt;</span> {</span><br><span class="line">    <span class="keyword">let</span> q = l &gt;= <span class="number">0.5</span> ? l + s - l * s : l * (<span class="number">1</span> + s); <span class="comment">// 注意最后是数字1加上s，不是字母l</span></span><br><span class="line">    <span class="keyword">let</span> p = <span class="number">2</span> * l - q;</span><br><span class="line">    <span class="keyword">if</span> (num &lt; <span class="number">0</span>) {</span><br><span class="line">      num += <span class="number">1</span>;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">if</span> (num &gt; <span class="number">1</span>) {</span><br><span class="line">      num -= <span class="number">1</span>;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">switch</span> (<span class="literal">true</span>) {</span><br><span class="line">      <span class="keyword">case</span> num &gt; <span class="number">2</span> / <span class="number">3</span>:</span><br><span class="line">        num = p;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> num &gt;= <span class="number">1</span> / <span class="number">2</span>:</span><br><span class="line">        num = p + (q - p) * <span class="number">6</span> * (<span class="number">2</span> / <span class="number">3</span> - num);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> num &gt;= <span class="number">1</span> / <span class="number">6</span>:</span><br><span class="line">        num = q;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">default</span>:</span><br><span class="line">        num = p + (q - p) * <span class="number">6</span> * num;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Math</span>.round(num * <span class="number">255</span>);</span><br><span class="line">  };</span><br><span class="line">  <span class="keyword">let</span> tR = getRGB(h + <span class="number">1</span> / <span class="number">3</span>);</span><br><span class="line">  <span class="keyword">let</span> tG = getRGB(h);</span><br><span class="line">  <span class="keyword">let</span> tB = getRGB(h - <span class="number">1</span> / <span class="number">3</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="string">`rgb(<span class="subst">${tR}</span>, <span class="subst">${tG}</span>, <span class="subst">${tB}</span>)`</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="总结一下"><a href="#总结一下" class="headerlink" title="总结一下"></a>总结一下</h2><p>虽然能够进行颜色转换，但是除了第一个代码外其他的我都没有判断传入的值是否正确，这是一个待完善的地方。不过总算知道了如何转换，之后用到颜色转换就能够开心的复制粘贴了<span class="github-emoji" style="color: transparent;background:no-repeat url(https://github.githubassets.com/images/icons/emoji/unicode/1f604.png?v8) center/contain" data-src="https://github.githubassets.com/images/icons/emoji/unicode/1f604.png?v8">😄</span></p><h2 id="参考教程"><a href="#参考教程" class="headerlink" title="参考教程"></a>参考教程</h2><ul><li><a href="https://zh.wikipedia.org/wiki/HSL%E5%92%8CHSV%E8%89%B2%E5%BD%A9%E7%A9%BA%E9%97%B4" target="_blank" rel="noopener">维基百科</a></li><li><a href="http://syean.cn/2017/03/17/JS%E5%AE%9E%E7%8E%B0RGB-HSL-HSB%E7%9B%B8%E4%BA%92%E8%BD%AC%E6%8D%A2/" target="_blank" rel="noopener">Syean 的博客</a></li><li><a href="https://www.youtube.com/watch?v=tQASh8bbkUY" target="_blank" rel="noopener">首屏图片来自YouTube</a></li></ul><!-- rebuild by neat --><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      本文总结使用JS进行颜色转化
    
    </summary>
    
      <category term="JavaScript" scheme="https://zjgyb.github.io/categories/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="https://zjgyb.github.io/tags/JavaScript/"/>
    
      <category term="RGBA" scheme="https://zjgyb.github.io/tags/RGBA/"/>
    
      <category term="HSL" scheme="https://zjgyb.github.io/tags/HSL/"/>
    
      <category term="HEX" scheme="https://zjgyb.github.io/tags/HEX/"/>
    
      <category term="Color" scheme="https://zjgyb.github.io/tags/Color/"/>
    
  </entry>
  
  <entry>
    <title>JS数组方法总结</title>
    <link href="https://zjgyb.github.io/JS%E6%95%B0%E7%BB%84%E6%96%B9%E6%B3%95%E6%80%BB%E7%BB%93.html"/>
    <id>https://zjgyb.github.io/JS数组方法总结.html</id>
    <published>2019-08-25T01:35:27.000Z</published>
    <updated>2019-08-27T13:15:57.649Z</updated>
    
    <content type="html"><![CDATA[<h2 id="ES5"><a href="#ES5" class="headerlink" title="ES5"></a>ES5</h2><h3 id="join-amp-split"><a href="#join-amp-split" class="headerlink" title="join &amp; split"></a>join &amp; split</h3><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> colors = <span class="string">'green, red, black'</span>;</span><br><span class="line"><span class="keyword">const</span> colorsArr = colors.split(<span class="string">','</span>);</span><br><span class="line"><span class="built_in">console</span>.log(colorsArr); <span class="comment">// [ 'green', ' red', ' black' ]</span></span><br><span class="line"><span class="keyword">const</span> colorsStr = colorsArr.join(<span class="string">','</span>);</span><br><span class="line"><span class="built_in">console</span>.log(colorsStr); <span class="comment">// green, red, black</span></span><br></pre></td></tr></tbody></table></figure><h3 id="push-amp-pop"><a href="#push-amp-pop" class="headerlink" title="push &amp; pop"></a>push &amp; pop</h3><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> colors = [];</span><br><span class="line">colors.push(<span class="string">'green'</span>, <span class="string">'red'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(colors); <span class="comment">// ['green', 'red']</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> item = colors.pop();</span><br><span class="line"><span class="built_in">console</span>.log(item); <span class="comment">// 'red'</span></span><br><span class="line"><span class="built_in">console</span>.log(colors); <span class="comment">// ['green']</span></span><br></pre></td></tr></tbody></table></figure><h3 id="shift-amp-unshift"><a href="#shift-amp-unshift" class="headerlink" title="shift &amp; unshift"></a>shift &amp; unshift</h3><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> colors = [<span class="string">'green'</span>, <span class="string">'red'</span>];</span><br><span class="line"><span class="keyword">const</span> item = colors.shift();</span><br><span class="line"><span class="built_in">console</span>.log(item); <span class="comment">// 'green'</span></span><br><span class="line"><span class="built_in">console</span>.log(colors); <span class="comment">// ['red']</span></span><br><span class="line"></span><br><span class="line">colors.unshift(<span class="string">'blue'</span>, <span class="string">'grey'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(colors); <span class="comment">// ['blue', 'grey', 'red']</span></span><br></pre></td></tr></tbody></table></figure><h3 id="reverse-amp-sort"><a href="#reverse-amp-sort" class="headerlink" title="reverse &amp; sort"></a>reverse &amp; sort</h3><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> values = [<span class="number">1</span>, <span class="number">3</span>, <span class="number">44</span>, <span class="number">43</span>, <span class="number">654</span>, <span class="number">0</span>];</span><br><span class="line">values.reverse();</span><br><span class="line"><span class="built_in">console</span>.log(values); <span class="comment">// [ 0, 654, 43, 44, 3, 1 ]</span></span><br><span class="line"></span><br><span class="line">values.sort();</span><br><span class="line"><span class="built_in">console</span>.log(values); <span class="comment">// [ 0, 1, 3, 43, 44, 654 ] 首字母开始比较</span></span><br><span class="line">values.sort(<span class="function">(<span class="params">val1, val2</span>) =&gt;</span> val2 - val1);</span><br><span class="line"><span class="built_in">console</span>.log(values); <span class="comment">// [ 654, 44, 43, 3, 1, 0 ]</span></span><br></pre></td></tr></tbody></table></figure><h3 id="concat-slice-amp-splice"><a href="#concat-slice-amp-splice" class="headerlink" title="concat, slice &amp; splice"></a>concat, slice &amp; splice</h3><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> colors = [<span class="string">'red'</span>, <span class="string">'green'</span>, <span class="string">'blue'</span>];</span><br><span class="line"><span class="keyword">const</span> colors2 = colors.concat(<span class="string">'yellow'</span>, [<span class="string">'black'</span>]);</span><br><span class="line"><span class="built_in">console</span>.log(colors2); <span class="comment">// [ 'red', 'green', 'blue', 'yellow', 'black' ] </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> colors3 = colors2.slice(<span class="number">1</span>, <span class="number">5</span>);</span><br><span class="line"><span class="built_in">console</span>.log(colors3); <span class="comment">// [ 'green', 'blue', 'yellow', 'black' ] </span></span><br><span class="line"><span class="built_in">console</span>.log(colors2); <span class="comment">// [ 'red', 'green', 'blue', 'yellow', 'black' ] </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> remove1 = colors2.splice(<span class="number">0</span>, <span class="number">1</span>);</span><br><span class="line"><span class="built_in">console</span>.log(remove1); <span class="comment">// [ 'red' ]</span></span><br><span class="line"><span class="built_in">console</span>.log(colors2); <span class="comment">// [ 'green', 'blue', 'yellow', 'black' ] </span></span><br><span class="line"><span class="keyword">const</span> remove2 = colors2.splice(<span class="number">1</span>, <span class="number">0</span>, <span class="string">'red'</span>, <span class="string">'pink'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(remove2); <span class="comment">// [ ]</span></span><br><span class="line"><span class="built_in">console</span>.log(colors2); <span class="comment">// [ 'green', 'red', 'pink', 'blue', 'yellow', 'black' ]</span></span><br></pre></td></tr></tbody></table></figure><h3 id="indexOf-amp-lastIndexOf"><a href="#indexOf-amp-lastIndexOf" class="headerlink" title="indexOf &amp; lastIndexOf"></a>indexOf &amp; lastIndexOf</h3><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> values= [<span class="number">1</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">4</span>, <span class="number">3</span>, <span class="number">1</span>];</span><br><span class="line"><span class="built_in">console</span>.log(values.indexOf(<span class="number">4</span>)); <span class="comment">// 2</span></span><br><span class="line"><span class="built_in">console</span>.log(values.lastIndexOf(<span class="number">4</span>)); <span class="comment">// 5</span></span><br><span class="line"><span class="built_in">console</span>.log(values.lastIndexOf(<span class="number">4</span>, <span class="number">4</span>)); <span class="comment">// 2</span></span><br><span class="line"><span class="built_in">console</span>.log(values.lastIndexOf(<span class="number">4</span>, <span class="number">5</span>)); <span class="comment">// 5</span></span><br></pre></td></tr></tbody></table></figure><h3 id="every-filter-forEach-map-amp-some"><a href="#every-filter-forEach-map-amp-some" class="headerlink" title="every, filter, forEach, map &amp; some"></a>every, filter, forEach, map &amp; some</h3><p>every &amp; some<br></p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> values = [<span class="number">1</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">4</span>, <span class="number">3</span>, <span class="number">1</span>];</span><br><span class="line"><span class="keyword">const</span> everyResult = values.every(<span class="function">(<span class="params">item, index, array</span>) =&gt;</span> {</span><br><span class="line">  <span class="keyword">return</span> item &gt; <span class="number">2</span>;</span><br><span class="line">});</span><br><span class="line"><span class="built_in">console</span>.log(everyResult); <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> someResult = values.some(<span class="function">(<span class="params">item, index, array</span>) =&gt;</span> {</span><br><span class="line">  <span class="keyword">return</span> item &gt; <span class="number">2</span>;</span><br><span class="line">});</span><br><span class="line"><span class="built_in">console</span>.log(someResult); <span class="comment">// true</span></span><br></pre></td></tr></tbody></table></figure><p></p><p>filter<br></p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> values = [<span class="number">1</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">4</span>, <span class="number">3</span>, <span class="number">1</span>];</span><br><span class="line"><span class="keyword">const</span> filterResult = values.filter(<span class="function">(<span class="params">item, index, array</span>) =&gt;</span> {</span><br><span class="line">  <span class="keyword">return</span> item &gt; <span class="number">2</span>;</span><br><span class="line">});</span><br><span class="line"><span class="built_in">console</span>.log(filterResult); <span class="comment">// [ 3, 4, 6, 7, 4, 3 ]</span></span><br><span class="line"><span class="keyword">const</span> obj = [ { <span class="attr">num</span>: <span class="number">3</span> }, { <span class="attr">num</span>: <span class="number">4</span> }, { <span class="attr">num</span>: <span class="number">1</span> },{ <span class="attr">num</span>: <span class="number">5</span> },{ <span class="attr">num</span>: <span class="number">0</span> }, { <span class="attr">num</span>: <span class="number">4</span> }];</span><br><span class="line"><span class="keyword">const</span> filterObjResult = obj.filter(<span class="function">(<span class="params">item, index, array</span>) =&gt;</span> {</span><br><span class="line">  <span class="keyword">return</span> item.num &gt; <span class="number">2</span>;</span><br><span class="line">});</span><br><span class="line"><span class="built_in">console</span>.log(filterObjResult); <span class="comment">// [ { num: 3 }, { num: 4 }, { num: 5 }, { num: 4 } ]</span></span><br></pre></td></tr></tbody></table></figure><p></p><p>map<br></p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> values = [<span class="number">1</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">4</span>, <span class="number">3</span>, <span class="number">1</span>];</span><br><span class="line"><span class="keyword">const</span> mapResult = values.map(<span class="function">(<span class="params">item, index, array</span>) =&gt;</span> {</span><br><span class="line">  <span class="keyword">return</span> item * <span class="number">2</span>;</span><br><span class="line">});</span><br><span class="line"><span class="built_in">console</span>.log(mapResult); <span class="comment">// [ 2, 6, 8, 12, 14, 8, 6, 2 ] </span></span><br><span class="line"><span class="keyword">const</span> obj = [ { <span class="attr">num</span>: <span class="number">3</span> }, { <span class="attr">num</span>: <span class="number">4</span> }, { <span class="attr">num</span>: <span class="number">1</span> },{ <span class="attr">num</span>: <span class="number">5</span> },{ <span class="attr">num</span>: <span class="number">0</span> }, { <span class="attr">num</span>: <span class="number">4</span> }];</span><br><span class="line"><span class="keyword">const</span> mapObjResult = obj.map(<span class="function">(<span class="params">item, index, array</span>) =&gt;</span> {</span><br><span class="line">  <span class="keyword">return</span> item.num;</span><br><span class="line">});</span><br><span class="line"><span class="built_in">console</span>.log(mapObjResult); <span class="comment">// [ 3, 4, 1, 5, 0, 4 ]</span></span><br></pre></td></tr></tbody></table></figure><p></p><p>forEach<br></p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> values = [<span class="number">1</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">4</span>, <span class="number">3</span>, <span class="number">1</span>];</span><br><span class="line">values.forEach(<span class="function">(<span class="params">item, index, array</span>) =&gt;</span> {</span><br><span class="line">  array[index] = item * <span class="number">2</span>;</span><br><span class="line">});</span><br><span class="line"><span class="built_in">console</span>.log(values); <span class="comment">// [ 2, 6, 8, 12, 14, 8, 6, 2 ]</span></span><br></pre></td></tr></tbody></table></figure><p></p><h3 id="reduce-amp-reduceRight"><a href="#reduce-amp-reduceRight" class="headerlink" title="reduce &amp; reduceRight"></a>reduce &amp; reduceRight</h3><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> values = [<span class="number">1</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">4</span>, <span class="number">4</span>, <span class="number">9</span>];</span><br><span class="line"><span class="keyword">const</span> sum = values.reduce(<span class="function">(<span class="params">prev, cur, index, array</span>) =&gt;</span> {</span><br><span class="line">  <span class="keyword">return</span> prev + cur;</span><br><span class="line">});</span><br><span class="line"><span class="built_in">console</span>.log(sum); <span class="comment">// 25</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> sumRight = values.reduceRight(<span class="function">(<span class="params">prev, cur, index, array</span>) =&gt;</span> {</span><br><span class="line">  <span class="keyword">return</span> prev + cur;</span><br><span class="line">});</span><br><span class="line"><span class="built_in">console</span>.log(sumRight); <span class="comment">// 25</span></span><br></pre></td></tr></tbody></table></figure><h2 id="ES6"><a href="#ES6" class="headerlink" title="ES6"></a>ES6</h2><h3 id="拓展运算符"><a href="#拓展运算符" class="headerlink" title="拓展运算符..."></a>拓展运算符<code>...</code></h3><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> colors = [<span class="string">'green'</span>, <span class="string">'red'</span>, <span class="string">'pink'</span>];</span><br><span class="line"><span class="keyword">const</span> colors1 = [<span class="string">'white'</span>, <span class="string">'grey'</span>];</span><br><span class="line"><span class="keyword">const</span> colors2 = [...colors, ...colors1];</span><br><span class="line"><span class="built_in">console</span>.log(colors2); <span class="comment">// [ 'green', 'red', 'pink', 'white', 'grey' ]</span></span><br></pre></td></tr></tbody></table></figure><h3 id="Array-from-amp-Array-of"><a href="#Array-from-amp-Array-of" class="headerlink" title="Array.from() &amp; Array.of()"></a>Array.from() &amp; Array.of()</h3><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = {</span><br><span class="line">  <span class="string">'0'</span>: <span class="string">'123'</span>,</span><br><span class="line">  <span class="string">'1'</span>: <span class="string">'456'</span>,</span><br><span class="line">  <span class="string">'2'</span>: <span class="string">'c'</span>,</span><br><span class="line">  length: <span class="number">4</span></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> arr = <span class="built_in">Array</span>.from(obj);</span><br><span class="line"><span class="built_in">console</span>.log(arr); <span class="comment">// [ '123', '456', 'c', undefined ] </span></span><br><span class="line"><span class="keyword">const</span> values = [<span class="number">1</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>];</span><br><span class="line"><span class="keyword">const</span> setValue = <span class="keyword">new</span> <span class="built_in">Set</span>(values);</span><br><span class="line"><span class="keyword">const</span> newArr = <span class="built_in">Array</span>.from(setValue); <span class="comment">// 也可以直接[...new Set(values)]</span></span><br><span class="line"><span class="built_in">console</span>.log(newArr); <span class="comment">// [ 1, 3, 5 ]</span></span><br><span class="line"><span class="keyword">const</span> newArr2 = <span class="built_in">Array</span>.from(newArr, x =&gt; x * <span class="number">2</span>);</span><br><span class="line"><span class="built_in">console</span>.log(newArr2); <span class="comment">// [ 2, 6, 10 ]</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Array</span>.of(<span class="literal">undefined</span>, <span class="number">1</span>, <span class="literal">null</span>)); <span class="comment">// [ undefined, 1, null ]</span></span><br></pre></td></tr></tbody></table></figure><h3 id="copyWithin-target-start-0-end-this-length"><a href="#copyWithin-target-start-0-end-this-length" class="headerlink" title="copyWithin(target, start = 0, end = this.length)"></a>copyWithin(target, start = 0, end = this.length)</h3><p>有效时应 start &gt; end<br></p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [<span class="number">1</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">8</span>, <span class="number">10</span>, <span class="number">1</span>, <span class="number">0</span>].copyWithin(<span class="number">0</span>, <span class="number">3</span>, <span class="number">4</span>);</span><br><span class="line"><span class="built_in">console</span>.log(arr); <span class="comment">// [ 4, 3, 4, 4, 5, 8, 10, 1, 0 ] </span></span><br><span class="line"><span class="keyword">const</span> arr = [<span class="number">1</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">8</span>, <span class="number">10</span>, <span class="number">1</span>, <span class="number">0</span>].copyWithin(<span class="number">0</span>, <span class="number">3</span>, <span class="number">8</span>);</span><br><span class="line"><span class="built_in">console</span>.log(arr1); <span class="comment">// [ 4, 5, 8, 10, 1, 8, 10, 1, 0 ]</span></span><br></pre></td></tr></tbody></table></figure><p></p><h3 id="fill"><a href="#fill" class="headerlink" title="fill"></a>fill</h3><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> colors = [<span class="string">'green'</span>, <span class="string">'red'</span>, <span class="string">'pink'</span>];</span><br><span class="line"><span class="keyword">const</span> colors1 = colors.fill(<span class="string">'white'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(colors1); <span class="comment">// [ 'white', 'white', 'white' ]</span></span><br></pre></td></tr></tbody></table></figure><h3 id="find-amp-findIndex"><a href="#find-amp-findIndex" class="headerlink" title="find &amp; findIndex"></a>find &amp; findIndex</h3><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> values = [<span class="number">1</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="literal">NaN</span>];</span><br><span class="line"><span class="keyword">const</span> findResult = values.find(<span class="function"><span class="params">num</span> =&gt;</span> num &gt; <span class="number">4</span> ); <span class="comment">// 找不到为undefined</span></span><br><span class="line"><span class="built_in">console</span>.log(findResult); <span class="comment">// 5</span></span><br><span class="line"><span class="keyword">const</span> findIndexResult = values.findIndex(<span class="function"><span class="params">num</span> =&gt;</span> num &gt; <span class="number">4</span> ); <span class="comment">// 找不到为-1</span></span><br><span class="line"><span class="built_in">console</span>.log(findIndexResult); <span class="comment">// 3</span></span><br></pre></td></tr></tbody></table></figure><h3 id="entries-keys-amp-values"><a href="#entries-keys-amp-values" class="headerlink" title="entries(), keys() &amp; values()"></a>entries(), keys() &amp; values()</h3><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> colors = [<span class="string">"red"</span>, <span class="string">"green"</span>, <span class="string">"blue"</span>];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> index <span class="keyword">of</span> colors.keys()) {</span><br><span class="line">  <span class="built_in">console</span>.log(index); <span class="comment">// 0 1 2</span></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> ele <span class="keyword">of</span> colors.values()) {</span><br><span class="line">  <span class="built_in">console</span>.log(ele); <span class="comment">// red green blue</span></span><br><span class="line">}</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> [index, ele] <span class="keyword">of</span> colors.entries()) {</span><br><span class="line">  <span class="built_in">console</span>.log(index, ele);</span><br><span class="line">}</span><br><span class="line"><span class="comment">// 0 red</span></span><br><span class="line"><span class="comment">// 1 green</span></span><br><span class="line"><span class="comment">// 2 blue</span></span><br></pre></td></tr></tbody></table></figure><h2 id="ES7"><a href="#ES7" class="headerlink" title="ES7"></a>ES7</h2><h3 id="includes"><a href="#includes" class="headerlink" title="includes"></a>includes</h3><p>第二个参数是搜索的起始位置<br></p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> values = [<span class="number">1</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="literal">NaN</span>];</span><br><span class="line"><span class="built_in">console</span>.log(values.includes(<span class="literal">NaN</span>)); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(values.includes(<span class="number">4</span>, <span class="number">3</span>)); <span class="comment">// false</span></span><br></pre></td></tr></tbody></table></figure><p></p><h2 id="ES10"><a href="#ES10" class="headerlink" title="ES10"></a>ES10</h2><h3 id="flat-amp-flatMap"><a href="#flat-amp-flatMap" class="headerlink" title="flat &amp; flatMap"></a>flat &amp; flatMap</h3><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> values = [<span class="number">1</span>, <span class="number">2</span>, [<span class="number">3</span>, <span class="number">4</span>]].flat();</span><br><span class="line"><span class="built_in">console</span>.log(values); <span class="comment">// [1, 2, 3, 4]</span></span><br><span class="line"><span class="keyword">const</span> valuesDeep = [<span class="number">1</span>, [<span class="number">2</span>, [<span class="number">3</span>]]];</span><br><span class="line"><span class="built_in">console</span>.log(valuesDeep.flat(<span class="literal">Infinity</span>)); <span class="comment">// [1, 2, 3]</span></span><br></pre></td></tr></tbody></table></figure><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><a href="http://es6.ruanyifeng.com/#docs/array" target="_blank" rel="noopener">阮一峰 ECMAScript 6 入门</a></li><li>JavaScript高级程序设计（第三版）</li><li><a href="https://www.educba.com/es6-vs-es5/" target="_blank" rel="noopener">封面图片来源</a></li></ul><!-- rebuild by neat --><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      本文总结对于JS数组操作的总结（包含ES10）
    
    </summary>
    
      <category term="JavaScript" scheme="https://zjgyb.github.io/categories/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="https://zjgyb.github.io/tags/JavaScript/"/>
    
      <category term="Array" scheme="https://zjgyb.github.io/tags/Array/"/>
    
      <category term="ES5" scheme="https://zjgyb.github.io/tags/ES5/"/>
    
      <category term="ES6" scheme="https://zjgyb.github.io/tags/ES6/"/>
    
      <category term="ES7" scheme="https://zjgyb.github.io/tags/ES7/"/>
    
      <category term="ES10" scheme="https://zjgyb.github.io/tags/ES10/"/>
    
  </entry>
  
  <entry>
    <title>CSS-animate1</title>
    <link href="https://zjgyb.github.io/CSS-animate1.html"/>
    <id>https://zjgyb.github.io/CSS-animate1.html</id>
    <published>2019-07-20T13:34:01.000Z</published>
    <updated>2019-07-20T13:34:57.384Z</updated>
    
    <content type="html"><![CDATA[<h2 id="属性讲解"><a href="#属性讲解" class="headerlink" title="属性讲解"></a>属性讲解</h2><h3 id="webkit-appearance"><a href="#webkit-appearance" class="headerlink" title="-webkit-appearance"></a>-webkit-appearance</h3><p>能够清楚元素本身的外观，常用属性值为<code>none</code></p><h3 id="pointer-events"><a href="#pointer-events" class="headerlink" title="pointer-events"></a>pointer-events</h3><p>属性值为<code>none</code>的作用，能够阻止用户点击产生效果，阻止CSS内hover和active行为</p><h2 id="input-radio"><a href="#input-radio" class="headerlink" title="input-radio"></a>input-radio</h2><iframe id="cp_embed_ymNyro" src="//codepen.io/zjgyb/embed/ymNyro?height=500&amp;theme-id=33713&amp;slug-hash=ymNyro&amp;default-tab=result&amp;embed-version=2" scrolling="no" frameborder="no" height="500" allowtransparency="true" allowfullscreen="" class="cp_embed_iframe" style="width:100%;overflow:hidden"></iframe><h2 id="input-text-amp-textarea"><a href="#input-text-amp-textarea" class="headerlink" title="input-text&amp;textarea"></a>input-text&amp;textarea</h2><iframe id="cp_embed_mNJyZb" src="//codepen.io/zjgyb/embed/mNJyZb?height=500&amp;theme-id=33713&amp;slug-hash=mNJyZb&amp;default-tab=result&amp;embed-version=2" scrolling="no" frameborder="no" height="500" allowtransparency="true" allowfullscreen="" class="cp_embed_iframe" style="width:100%;overflow:hidden"></iframe><h2 id="参考教程"><a href="#参考教程" class="headerlink" title="参考教程"></a>参考教程</h2><ul><li><a href="https://www.youtube.com/watch?v=BQSNBa3gZJU" target="_blank" rel="noopener">YouTube-radio</a></li><li><a href="https://www.youtube.com/watch?v=BKhoo6RSEDU" target="_blank" rel="noopener">YouTube-text-textarea</a></li></ul><!-- rebuild by neat --><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      本文是CSS动画系列，本文主要是表单元素的动画
    
    </summary>
    
      <category term="CSS" scheme="https://zjgyb.github.io/categories/CSS/"/>
    
    
      <category term="CSS" scheme="https://zjgyb.github.io/tags/CSS/"/>
    
      <category term="animation" scheme="https://zjgyb.github.io/tags/animation/"/>
    
  </entry>
  
  <entry>
    <title>CSS-animate</title>
    <link href="https://zjgyb.github.io/CSS-animate.html"/>
    <id>https://zjgyb.github.io/CSS-animate.html</id>
    <published>2019-07-16T05:44:53.000Z</published>
    <updated>2019-07-20T13:34:49.526Z</updated>
    
    <content type="html"><![CDATA[<h2 id="说明一下"><a href="#说明一下" class="headerlink" title="说明一下"></a>说明一下</h2><p>因为自己经常会忘相关的属性，因此在介绍动画之前首先介绍这些CSS属性及属性值</p><h2 id="box-shadow"><a href="#box-shadow" class="headerlink" title="box-shadow"></a>box-shadow</h2><p><code>box-shadow: h-shadow v-shadow blur spread color inset;</code></p><table><thead><tr><th style="text-align:left">值</th><th style="text-align:left">说明</th></tr></thead><tbody><tr><td style="text-align:left">h-shadow</td><td style="text-align:left">水平阴影的位置 <span class="github-emoji" style="color: transparent;background:no-repeat url(https://github.githubassets.com/images/icons/emoji/unicode/2714.png?v8) center/contain" data-src="https://github.githubassets.com/images/icons/emoji/unicode/2714.png?v8">✔</span></td></tr><tr><td style="text-align:left">v-shadow</td><td style="text-align:left">垂直阴影的位置 <span class="github-emoji" style="color: transparent;background:no-repeat url(https://github.githubassets.com/images/icons/emoji/unicode/2714.png?v8) center/contain" data-src="https://github.githubassets.com/images/icons/emoji/unicode/2714.png?v8">✔</span></td></tr><tr><td style="text-align:left">blur</td><td style="text-align:left">模糊距离</td></tr><tr><td style="text-align:left">spread</td><td style="text-align:left">阴影的大小</td></tr><tr><td style="text-align:left">color</td><td style="text-align:left">阴影的颜色</td></tr><tr><td style="text-align:left">inset</td><td style="text-align:left">阴影改为内侧</td></tr></tbody></table><h2 id="animation"><a href="#animation" class="headerlink" title="animation"></a>animation</h2><p><code>animation: name duration timing-function delay iteration-count direction fill-mode play-state;</code></p><table><thead><tr><th style="text-align:left">值</th><th style="text-align:left">说明</th></tr></thead><tbody><tr><td style="text-align:left">name</td><td style="text-align:left">动画名。配合@keyframes使用</td></tr><tr><td style="text-align:left">duration</td><td style="text-align:left">动画完成时间</td></tr><tr><td style="text-align:left">time-function</td><td style="text-align:left">规定动画完成方式</td></tr><tr><td style="text-align:left">delay</td><td style="text-align:left">动画开始前的延迟时间</td></tr><tr><td style="text-align:left">iteration-count</td><td style="text-align:left">动画的播放次数</td></tr><tr><td style="text-align:left">direction</td><td style="text-align:left">动画运动的方向</td></tr><tr><td style="text-align:left">fill-mode</td><td style="text-align:left">规定当动画不播放时（当动画完成时，或当动画有一个延迟未开始播放时），要应用到元素的样式。<span class="github-emoji" style="color: transparent;background:no-repeat url(https://github.githubassets.com/images/icons/emoji/unicode/2753.png?v8) center/contain" data-src="https://github.githubassets.com/images/icons/emoji/unicode/2753.png?v8">❓</span> (不理解，之后用到回来补充)</td></tr><tr><td style="text-align:left">play-state</td><td style="text-align:left">指定动画是否运行</td></tr><tr><td style="text-align:left">initial</td><td style="text-align:left">设置为默认值</td></tr><tr><td style="text-align:left">inherit</td><td style="text-align:left">从父元素继承属性</td></tr></tbody></table><h2 id="制作一个蛇形loading"><a href="#制作一个蛇形loading" class="headerlink" title="制作一个蛇形loading"></a>制作一个蛇形loading</h2><p>我将其分成4步</p><p>第一步</p><p><img src="/CSS-animate/first-step.png" alt="第一步"></p><p>第二步</p><p><img src="/CSS-animate/second-step.png" alt="第二步"></p><p>第三步</p><p><img src="/CSS-animate/third-step.png" alt="第三步"></p><p>第四步</p><p><img src="/CSS-animate/forth-step.png" alt="第四步"></p><h2 id="最终效果"><a href="#最终效果" class="headerlink" title="最终效果"></a>最终效果</h2><iframe id="cp_embed_LKKvXZ" src="//codepen.io/zjgyb/embed/LKKvXZ?height=500&amp;theme-id=33713&amp;slug-hash=LKKvXZ&amp;default-tab=result&amp;embed-version=2" scrolling="no" frameborder="no" height="500" allowtransparency="true" allowfullscreen="" class="cp_embed_iframe" style="width:100%;overflow:hidden"></iframe><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>本文作为学习CSS动画的开头，希望能够加强自己动画方面的能力。<span class="github-emoji" style="color: transparent;background:no-repeat url(https://github.githubassets.com/images/icons/emoji/unicode/1f604.png?v8) center/contain" data-src="https://github.githubassets.com/images/icons/emoji/unicode/1f604.png?v8">😄</span></p><h2 id="参考视频"><a href="#参考视频" class="headerlink" title="参考视频"></a>参考视频</h2><ul><li><a href="https://www.youtube.com/watch?v=MajaScL0lCs" target="_blank" rel="noopener">YouTube</a></li></ul><!-- rebuild by neat --><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      介绍CSS动画需要用到的属性以及制作好看的动画
    
    </summary>
    
      <category term="CSS" scheme="https://zjgyb.github.io/categories/CSS/"/>
    
    
      <category term="CSS" scheme="https://zjgyb.github.io/tags/CSS/"/>
    
      <category term="animation" scheme="https://zjgyb.github.io/tags/animation/"/>
    
  </entry>
  
  <entry>
    <title>单例模式</title>
    <link href="https://zjgyb.github.io/%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F.html"/>
    <id>https://zjgyb.github.io/单例模式.html</id>
    <published>2019-05-25T01:40:53.000Z</published>
    <updated>2019-05-25T01:51:29.034Z</updated>
    
    <content type="html"><![CDATA[<h2 id="解释"><a href="#解释" class="headerlink" title="解释"></a>解释</h2><h3 id="什么是单例模式？"><a href="#什么是单例模式？" class="headerlink" title="什么是单例模式？"></a>什么是单例模式？</h3><p>单例就是保证一个类只有一个实例，实现的方法是判断实例是否存在与否，如果存在直接返回，如果不存在就创建了再返回，这就确保了一个类只有一个实例对象。</p><h3 id="模块作用"><a href="#模块作用" class="headerlink" title="模块作用"></a>模块作用</h3><ol><li>模块间通信</li><li>系统中某个类的对象只能存在一个</li><li>保护自己的属性和方法</li></ol><h2 id="简单的单例模式"><a href="#简单的单例模式" class="headerlink" title="简单的单例模式"></a>简单的单例模式</h2><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> home = {</span><br><span class="line">  style: <span class="string">"Chinese styles"</span>,</span><br><span class="line">  door() {</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  },</span><br><span class="line">  <span class="built_in">window</span>() {</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">  }</span><br><span class="line">};</span><br></pre></td></tr></tbody></table></figure><h2 id="以一个弹窗为例"><a href="#以一个弹窗为例" class="headerlink" title="以一个弹窗为例"></a>以一个弹窗为例</h2><p>以第一篇参考文章为例，使用 ES6 实现其效果</p><h3 id="前置代码"><a href="#前置代码" class="headerlink" title="前置代码"></a>前置代码</h3><p>html 部分，css 自行补充</p><figure class="highlight html"><figcaption><span>html</span></figcaption><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"btn-group"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"open"</span> <span class="attr">class</span>=<span class="string">"btn btn-primary"</span>&gt;</span></span><br><span class="line">    打开</span><br><span class="line">  <span class="tag">&lt;<span class="name">&amp;#47;button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"delete"</span> <span class="attr">class</span>=<span class="string">"btn btn-default"</span>&gt;</span>关闭<span class="tag">&lt;<span class="name">&amp;#47;button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">&amp;#47;div</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h3 id="创建主要代码"><a href="#创建主要代码" class="headerlink" title="创建主要代码"></a>创建主要代码</h3><p>先创建一个 Modal 类</p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Modal</span> </span>{</span><br><span class="line">  <span class="keyword">constructor</span>(id, html) {</span><br><span class="line">    <span class="keyword">this</span>.html = html;</span><br><span class="line">    <span class="keyword">this</span>.id = id;</span><br><span class="line">    <span class="keyword">this</span>.open = <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">this</span>.instance = <span class="literal">null</span>;</span><br><span class="line">  }</span><br><span class="line"></span><br><span class="line">  create() {</span><br><span class="line">    <span class="keyword">if</span> (!<span class="keyword">this</span>.open) {</span><br><span class="line">      <span class="keyword">const</span> modal = <span class="built_in">document</span>.createElement(<span class="string">"div"</span>);</span><br><span class="line">      modal.innerHTML = <span class="keyword">this</span>.html;</span><br><span class="line">      modal.id = <span class="keyword">this</span>.id;</span><br><span class="line">      <span class="built_in">document</span>.body.appendChild(modal);</span><br><span class="line">      setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> {</span><br><span class="line">        modal.classList.add(<span class="string">"show"</span>);</span><br><span class="line">      }, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">      <span class="keyword">this</span>.open = <span class="literal">true</span>;</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line"></span><br><span class="line">  <span class="keyword">delete</span>() {</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.open) {</span><br><span class="line">      <span class="keyword">const</span> modal = $(<span class="keyword">this</span>.id);</span><br><span class="line">      modal.classList.add(<span class="string">"hide"</span>);</span><br><span class="line">      setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> {</span><br><span class="line">        <span class="built_in">document</span>.body.removeChild(modal);</span><br><span class="line">      }, <span class="number">200</span>);</span><br><span class="line">      <span class="keyword">this</span>.open = <span class="literal">false</span>;</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line"></span><br><span class="line">  <span class="keyword">static</span> createIntance(id, html) {</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.instance || (<span class="keyword">this</span>.instance = <span class="keyword">new</span> Modal(id, html));</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><div class="note primary"><p>使用了惰性单例模式：在需要的时候创建单例，再次调用就使用第一次实例化后的实例对象</p></div><p>剩余部分</p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// class Modal ...</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> $ = <span class="function"><span class="params">id</span> =&gt;</span> {</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">typeof</span> id === <span class="string">"string"</span> ? <span class="built_in">document</span>.getElementById(id) : id;</span><br><span class="line">};</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> operate = {</span><br><span class="line">  setModal: <span class="literal">null</span>,</span><br><span class="line">  open() {</span><br><span class="line">    <span class="keyword">this</span>.setModal = Modal.createIntance(<span class="string">"modal"</span>, <span class="string">"这是一个弹窗"</span>);</span><br><span class="line">    <span class="keyword">this</span>.setModal.create();</span><br><span class="line">  },</span><br><span class="line">  <span class="keyword">delete</span>() {</span><br><span class="line">    <span class="keyword">this</span>.setModal &amp;&amp; <span class="keyword">this</span>.setModal.delete();</span><br><span class="line">  }</span><br><span class="line">};</span><br><span class="line"></span><br><span class="line">$(<span class="string">"open"</span>).onclick = <span class="function"><span class="params">()</span> =&gt;</span> {</span><br><span class="line">  operate.open();</span><br><span class="line">};</span><br><span class="line"></span><br><span class="line">$(<span class="string">"delete"</span>).onclick = <span class="function"><span class="params">()</span> =&gt;</span> {</span><br><span class="line">  operate.delete();</span><br><span class="line">};</span><br></pre></td></tr></tbody></table></figure><div class="note"><p>其实<code>operate</code>就是一个普通的单例模式</p></div><h2 id="在Vue中的使用"><a href="#在Vue中的使用" class="headerlink" title="在Vue中的使用"></a>在Vue中的使用</h2><h3 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h3><p><img src="/单例模式/show.png" width="100%" alt="单例模式图片"></p><p>点击按钮能够新增条目，点击条目能够删除这一行</p><h3 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h3><figure class="highlight gherkin"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">|<span class="string">- src</span></span><br><span class="line">|<span class="string">   </span>|<span class="string">- components</span></span><br><span class="line">|<span class="string">       </span>|<span class="string">- dialog-container</span></span><br><span class="line">|<span class="string">           </span>|<span class="string">- dialog-container.vue</span></span><br><span class="line">|<span class="string">           </span>|<span class="string">- index.js</span></span><br><span class="line">|<span class="string">   </span>|<span class="string">- App.vue</span></span><br><span class="line">|<span class="string">   </span>|<span class="string">- main.js</span></span><br></pre></td></tr></tbody></table></figure><h3 id="具体实现"><a href="#具体实现" class="headerlink" title="具体实现"></a>具体实现</h3><figure class="highlight html"><figcaption><span>vue</span></figcaption><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- dialog-container.vue --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">"list in lists"</span> <span class="attr">:key</span>=<span class="string">"list.id"</span> @<span class="attr">click</span>=<span class="string">"del(list.id)"</span>&gt;</span>{{ list.content }}<span class="tag">&lt;<span class="name">&amp;#47;li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">&amp;#47;ul</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">&amp;#47;div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">&amp;#47;template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> {</span></span><br><span class="line"><span class="undefined">  methods: {</span></span><br><span class="line"><span class="undefined">    del(id) {</span></span><br><span class="line"><span class="javascript">      <span class="keyword">const</span> index = <span class="keyword">this</span>.lists.findIndex(<span class="function"><span class="params">ele</span> =&gt;</span> ele.id === id);</span></span><br><span class="line"><span class="actionscript">      <span class="keyword">if</span> (<span class="number">-1</span> !== index) {</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">this</span>.lists.splice(index, <span class="number">1</span>);</span></span><br><span class="line"><span class="undefined">      }</span></span><br><span class="line"><span class="undefined">    }</span></span><br><span class="line"><span class="undefined">  }</span></span><br><span class="line"><span class="undefined">};</span></span><br><span class="line"><span class="handlebars"><span class="xml"><span class="tag">&lt;<span class="name">&amp;#47;script</span>&gt;</span></span></span></span><br></pre></td></tr></tbody></table></figure><p>具体单例使用</p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">"vue"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> Container <span class="keyword">from</span> <span class="string">"./dialog-container.vue"</span>;</span><br><span class="line"></span><br><span class="line">Container.installSlot = <span class="function">(<span class="params">(</span>) =&gt;</span> {</span><br><span class="line">  <span class="keyword">let</span> [component, lists] = [<span class="literal">null</span>, <span class="literal">null</span>];</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="function">(<span class="params">id, list</span>) =&gt;</span> {</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> list === <span class="string">"object"</span> &amp;&amp; <span class="keyword">typeof</span> id === <span class="string">"string"</span>) {</span><br><span class="line">      <span class="keyword">if</span> (!component) {</span><br><span class="line">        <span class="keyword">const</span> container = Vue.extend(Container);</span><br><span class="line">        lists = [list];</span><br><span class="line">        component = <span class="keyword">new</span> container({</span><br><span class="line">          data() {</span><br><span class="line">            <span class="keyword">return</span> {</span><br><span class="line">              lists</span><br><span class="line">            };</span><br><span class="line">          }</span><br><span class="line">        });</span><br><span class="line"></span><br><span class="line">        <span class="built_in">document</span>.getElementById(id).appendChild(component.$mount().$el);</span><br><span class="line">      } <span class="keyword">else</span> {</span><br><span class="line">        lists.push(list);</span><br><span class="line">      }</span><br><span class="line">    }</span><br><span class="line">  };</span><br><span class="line">})();</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> {</span><br><span class="line">  install: <span class="function"><span class="params">Vue</span> =&gt;</span> {</span><br><span class="line">    Vue.prototype.$dialog = Container.installSlot;</span><br><span class="line">  }</span><br><span class="line">};</span><br></pre></td></tr></tbody></table></figure><p>配置及使用</p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Dialog <span class="keyword">from</span> <span class="string">"./components/dialog-container"</span>;</span><br><span class="line">Vue.use(Dialog);</span><br></pre></td></tr></tbody></table></figure><figure class="highlight html"><figcaption><span>html</span></figcaption><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"content"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"hi('content')"</span>&gt;</span>Hellos<span class="tag">&lt;<span class="name">&amp;#47;button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">&amp;#47;div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">&amp;#47;div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">&amp;#47;template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> {</span></span><br><span class="line"><span class="actionscript">  name: <span class="string">"App"</span>,</span></span><br><span class="line"><span class="undefined">  methods: {</span></span><br><span class="line"><span class="undefined">    hi(domId) {</span></span><br><span class="line"><span class="javascript">      <span class="keyword">const</span> id = <span class="built_in">Math</span>.random()</span></span><br><span class="line"><span class="undefined">        .toString()</span></span><br><span class="line"><span class="undefined">        .substr(2, 6);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="actionscript">      <span class="comment">// 使用</span></span></span><br><span class="line"><span class="actionscript">      <span class="keyword">this</span>.$dialog(domId, {</span></span><br><span class="line"><span class="undefined">        id,</span></span><br><span class="line"><span class="javascript">        content: <span class="string">`The id is <span class="subst">${id}</span>`</span></span></span><br><span class="line"><span class="undefined">      });</span></span><br><span class="line"><span class="undefined">    }</span></span><br><span class="line"><span class="undefined">  }</span></span><br><span class="line"><span class="undefined">};</span></span><br><span class="line"><span class="handlebars"><span class="xml"><span class="tag">&lt;<span class="name">&amp;#47;script</span>&gt;</span></span></span></span><br></pre></td></tr></tbody></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>单例模式其他具体场景不是很清楚，希望以后能够看到其他用法，对于设计模式我也才刚开始看，继续努力。</p><h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><ul><li><a href="http://www.codeceo.com/article/javascript-single-instance.html" target="_blank" rel="noopener">http://www.codeceo.com/article/javascript-single-instance.html</a></li><li><a href="https://solojiang.github.io/2018/04/30/%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F%E5%9C%A8Dialog%E7%B1%BB%E7%BB%84%E4%BB%B6%E4%B8%AD%E7%9A%84%E4%BD%BF%E7%94%A8/" target="_blank" rel="noopener">Solo Jiang’s blog</a></li><li><a href="https://zhuanlan.zhihu.com/p/34754447" target="_blank" rel="noopener">知乎-从 ES6 重新认识 JavaScript 设计模式(一): 单例模式</a></li><li><a href="https://www.youtube.com/watch?v=X7GJ485r20A&amp;list=PL9nxfq1tlKKnsi68A6Gbsv-ip8kRNFK7-&amp;index=2" target="_blank" rel="noopener">YouTube</a></li></ul><!-- rebuild by neat --><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      解释单例模式是什么以及单例模式使用的具体场景
    
    </summary>
    
      <category term="JavaScript" scheme="https://zjgyb.github.io/categories/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="https://zjgyb.github.io/tags/JavaScript/"/>
    
      <category term="Vue" scheme="https://zjgyb.github.io/tags/Vue/"/>
    
      <category term="单例模式" scheme="https://zjgyb.github.io/tags/%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/"/>
    
      <category term="设计模式" scheme="https://zjgyb.github.io/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>nodejs实现简易登录注册</title>
    <link href="https://zjgyb.github.io/nodejs%E5%AE%9E%E7%8E%B0%E7%AE%80%E6%98%93%E7%99%BB%E5%BD%95%E6%B3%A8%E5%86%8C.html"/>
    <id>https://zjgyb.github.io/nodejs实现简易登录注册.html</id>
    <published>2019-05-22T14:33:49.000Z</published>
    <updated>2019-05-23T13:13:39.628Z</updated>
    
    <content type="html"><![CDATA[<p><strong>介绍Nodejs登录与注册并实现与MongoDB数据储存与查询</strong></p><a id="more"></a><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>之前一直都有学过Node，但是没怎么上心，然而现在有业务需求同时也希望自己多掌握点技能，因此下定决心学习Node。本文内容还是参考《了不起的Node.js》里面的案例，但只是参考了一部分。</p><p>项目例子采用MVC模式</p><p>项目结构<br></p><figure class="highlight md"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">|- view</span><br><span class="line">|   |- login.pug</span><br><span class="line">|   |- signup.pug</span><br><span class="line">|   |- layout.pug</span><br><span class="line">|- model</span><br><span class="line">|   |- server.js</span><br><span class="line">|- controller</span><br><span class="line">|   |-index.js</span><br><span class="line">|- index.js</span><br></pre></td></tr></tbody></table></figure><p></p><p>所需要的包，其中<code>express-session</code>验证用户信息的。<br></p><figure class="highlight js"><figcaption><span>json</span></figcaption><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">{</span><br><span class="line">  ...</span><br><span class="line">  <span class="string">"dependencies"</span>: {</span><br><span class="line">    <span class="string">"express"</span>: <span class="string">"^4.16.4"</span>,</span><br><span class="line">    <span class="string">"body-parser"</span>: <span class="string">"^1.19.0"</span>,</span><br><span class="line">    <span class="string">"express-session"</span>: <span class="string">"^1.16.1"</span></span><br><span class="line">  }</span><br><span class="line">  ...</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p></p><h2 id="注册"><a href="#注册" class="headerlink" title="注册"></a>注册</h2><h3 id="公共模板"><a href="#公共模板" class="headerlink" title="公共模板"></a>公共模板</h3><figure class="highlight plain"><figcaption><span>pug</span></figcaption><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">doctype 5</span><br><span class="line">html</span><br><span class="line">  head</span><br><span class="line">    title MongoDB example</span><br><span class="line">  body</span><br><span class="line">    h1 My first MongoDB app</span><br><span class="line">    hr</span><br><span class="line">    block body</span><br></pre></td></tr></tbody></table></figure><h3 id="注册界面"><a href="#注册界面" class="headerlink" title="注册界面"></a>注册界面</h3><figure class="highlight plain"><figcaption><span>pug</span></figcaption><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">//- signup.pug</span><br><span class="line">extends layout</span><br><span class="line">block body</span><br><span class="line">  form(action="/signup", method="POST")</span><br><span class="line">    fieldset</span><br><span class="line">      legend Sign up</span><br><span class="line">      p</span><br><span class="line">        label First</span><br><span class="line">        input(name="first", type="text")</span><br><span class="line">      p</span><br><span class="line">        label Last</span><br><span class="line">        input(name="last", type="text")</span><br><span class="line">      p</span><br><span class="line">        label Email</span><br><span class="line">        input(name="email", type="text")</span><br><span class="line">      p</span><br><span class="line">        label Password</span><br><span class="line">        input(name="password", type="text")</span><br><span class="line">      p</span><br><span class="line">        button Submit</span><br><span class="line">      p</span><br><span class="line">        a(href="/") Go back</span><br></pre></td></tr></tbody></table></figure><h3 id="后端代码"><a href="#后端代码" class="headerlink" title="后端代码"></a>后端代码</h3><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// index.js</span></span><br><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>);</span><br><span class="line"><span class="keyword">const</span> app = express();</span><br><span class="line"><span class="keyword">const</span> bodyParser = <span class="built_in">require</span>(<span class="string">'body-parser'</span>);</span><br><span class="line"><span class="keyword">const</span> controller = <span class="built_in">require</span>(<span class="string">'./controller'</span>);</span><br><span class="line"><span class="keyword">const</span> urlencodedParser = bodyParser.urlencoded({ <span class="attr">extended</span>: <span class="literal">false</span> });</span><br><span class="line"></span><br><span class="line">app.get(<span class="string">'/signup'</span>, (req, res) =&gt; {</span><br><span class="line">  res.render(<span class="string">'signup'</span>);</span><br><span class="line">});</span><br><span class="line"></span><br><span class="line">app.post(<span class="string">'/signup'</span>, urlencodedParser, controller.postSignUp);</span><br><span class="line"></span><br><span class="line">app.listen(<span class="number">3000</span>, () =&gt; {</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'start'</span>);</span><br><span class="line">});</span><br></pre></td></tr></tbody></table></figure><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// controller/index.js</span></span><br><span class="line"><span class="keyword">const</span> model = <span class="built_in">require</span>(<span class="string">'../model/server'</span>);</span><br><span class="line">exports.postSignUp = <span class="function">(<span class="params">req, res</span>) =&gt;</span> {</span><br><span class="line">  <span class="keyword">const</span> { first, last, email, password} = req.body;</span><br><span class="line">  <span class="comment">// 交由model来存储数据</span></span><br><span class="line">  model.insert({</span><br><span class="line">    first,</span><br><span class="line">    last,</span><br><span class="line">    email,</span><br><span class="line">    password</span><br><span class="line">  }, (num) =&gt; {</span><br><span class="line">    <span class="keyword">if</span> (num === <span class="number">-1</span>) {</span><br><span class="line">      res.redirect(<span class="string">'/error'</span>); <span class="comment">// 这里其实是跳转错误界面，这些细节就不介绍了</span></span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">if</span> (<span class="number">1</span> === num) {</span><br><span class="line">      res.redirect(<span class="string">`/login/<span class="subst">${email}</span>`</span>);</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    }</span><br><span class="line">  })</span><br><span class="line">};</span><br></pre></td></tr></tbody></table></figure><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// model/server.js</span></span><br><span class="line"><span class="keyword">const</span> MongoClient = <span class="built_in">require</span>(<span class="string">"mongodb"</span>).MongoClient;</span><br><span class="line"><span class="keyword">const</span> url = <span class="string">"mongodb://localhost:27017"</span>;</span><br><span class="line"><span class="keyword">const</span> dbName = <span class="string">"student"</span>;</span><br><span class="line"></span><br><span class="line">MongoClient.connect(url, <span class="function"><span class="keyword">function</span>(<span class="params">err, client</span>) </span>{</span><br><span class="line">  <span class="keyword">if</span> (err) <span class="keyword">throw</span> err;</span><br><span class="line">  <span class="keyword">const</span> col = client.db(dbName).collection(<span class="string">"classes"</span>);</span><br><span class="line">  <span class="comment">// 插入数据</span></span><br><span class="line">  exports.insert = <span class="function">(<span class="params">data, next</span>) =&gt;</span> {</span><br><span class="line">    col.insertOne(data,</span><br><span class="line">      err =&gt; {</span><br><span class="line">        <span class="keyword">if</span> (err) {</span><br><span class="line">          next(<span class="number">-1</span>);</span><br><span class="line">          <span class="keyword">return</span>;</span><br><span class="line">        }</span><br><span class="line">        next(<span class="number">1</span>);</span><br><span class="line">      }</span><br><span class="line">    );</span><br><span class="line">  };</span><br><span class="line">});</span><br></pre></td></tr></tbody></table></figure><h2 id="登录"><a href="#登录" class="headerlink" title="登录"></a>登录</h2><h3 id="登录界面"><a href="#登录界面" class="headerlink" title="登录界面"></a>登录界面</h3><figure class="highlight plain"><figcaption><span>pug</span></figcaption><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">extends layout</span><br><span class="line">block body</span><br><span class="line">  form(action="/login", method="POST")</span><br><span class="line">    fieldset</span><br><span class="line">      legend Log in</span><br><span class="line">      if (signupEmail)</span><br><span class="line">        p Congratulations on signing up! Please login below</span><br><span class="line">      p</span><br><span class="line">        label Email</span><br><span class="line">        input(name="email", type="text", value=signupEmail)</span><br><span class="line">      p</span><br><span class="line">        label Password</span><br><span class="line">        input(name="password", type="text")</span><br><span class="line">      p</span><br><span class="line">        button Submit</span><br><span class="line">      p</span><br><span class="line">        a(href="/") Go back</span><br></pre></td></tr></tbody></table></figure><h3 id="后端代码-1"><a href="#后端代码-1" class="headerlink" title="后端代码"></a>后端代码</h3><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// index.js</span></span><br><span class="line">...</span><br><span class="line">app.get(<span class="string">'/login'</span>, (req, res) =&gt; {</span><br><span class="line">  res.render(<span class="string">'login'</span>);</span><br><span class="line">});</span><br><span class="line"></span><br><span class="line">app.get(<span class="string">'/login/:signupEmail'</span>, (req, res) =&gt; {</span><br><span class="line">  res.render(<span class="string">"login"</span>, { <span class="attr">signupEmail</span>: req.params.signupEmail });</span><br><span class="line">});</span><br><span class="line"></span><br><span class="line">app.post(<span class="string">"/login"</span>, urlencodedParser, controller.postLogin);</span><br><span class="line">...</span><br></pre></td></tr></tbody></table></figure><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// controller/index.js</span></span><br><span class="line">...</span><br><span class="line">exports.postLogin = <span class="function">(<span class="params">req, res</span>) =&gt;</span> {</span><br><span class="line">  <span class="keyword">const</span> { email, password } = req.body;</span><br><span class="line">  model.find({ email, password }, (num, result) =&gt; {</span><br><span class="line">    <span class="keyword">if</span> (<span class="number">-1</span> === num) {</span><br><span class="line">      res.redirect(<span class="string">'/error'</span>);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="number">0</span> === num) {</span><br><span class="line">      res.send(<span class="string">'&amp;lt;p&amp;gt;Email or password is not correct. Go back and try again.&amp;lt;/p&amp;gt;'</span>);</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="number">1</span> === num) {</span><br><span class="line">      <span class="comment">// 存储用户信息</span></span><br><span class="line">      req.session.loggedIn = result._id.toString();</span><br><span class="line">      res.redirect(<span class="string">'/'</span>);</span><br><span class="line">    }</span><br><span class="line">  });</span><br><span class="line">}</span><br><span class="line">...</span><br></pre></td></tr></tbody></table></figure><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// model/server.js</span></span><br><span class="line">MongoClient.connect(url, <span class="function"><span class="keyword">function</span>(<span class="params">err, client</span>) </span>{</span><br><span class="line">  ...</span><br><span class="line">  exports.find = <span class="function">(<span class="params">data, next</span>) =&gt;</span> {</span><br><span class="line">    col.findOne(</span><br><span class="line">      data,</span><br><span class="line">      (err, result) =&gt; {</span><br><span class="line">        <span class="keyword">if</span> (err) {</span><br><span class="line">          next(<span class="number">-1</span>);</span><br><span class="line">          <span class="keyword">return</span>;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">if</span> (!result) {</span><br><span class="line">          next(<span class="number">0</span>);</span><br><span class="line">          <span class="keyword">return</span>;</span><br><span class="line">        }</span><br><span class="line">        next(<span class="number">1</span>, result);</span><br><span class="line">      }</span><br><span class="line">    );</span><br><span class="line">  }</span><br><span class="line">  ...</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h2><p>其实项目中还有logout功能，显示用户功能没有讲，但是这些相对简单，因此就不展开了。</p><p>在登录的时候有一句<code>req.session.loggedIn = result._id.toString();</code>，如果想通过id查询数据，则</p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> ObjectId = <span class="built_in">require</span>(<span class="string">"mongodb"</span>).ObjectId;</span><br><span class="line"><span class="keyword">const</span> ID= req.session.loggedIn;</span><br><span class="line">model.find({<span class="attr">_id</span>: ObjectId(ID)}, (num, result) =&gt; {</span><br><span class="line">  <span class="comment">//...</span></span><br><span class="line">});</span><br></pre></td></tr></tbody></table></figure><h2 id="跟新于19-05-23"><a href="#跟新于19-05-23" class="headerlink" title="跟新于19-05-23"></a>跟新于19-05-23</h2><p>使用<code>mongoose</code>替代<code>mongodb</code>保存数据, 具体文档参照<a href="https://mongoosejs.com/" target="_blank" rel="noopener">mongoose官网</a></p><p>主要改动在<code>model/server.js</code></p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// model/server.js</span></span><br><span class="line"><span class="keyword">const</span> mongoose = <span class="built_in">require</span>(<span class="string">"mongoose"</span>);</span><br><span class="line"><span class="keyword">const</span> Schema = mongoose.Schema;</span><br><span class="line">mongoose.connect(<span class="string">"mongodb://localhost/student"</span>, { <span class="attr">useNewUrlParser</span>: <span class="literal">true</span> });</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> personSchema = <span class="keyword">new</span> Schema(</span><br><span class="line">  {</span><br><span class="line">    first: <span class="built_in">String</span>,</span><br><span class="line">    last: <span class="built_in">String</span>,</span><br><span class="line">    email: {</span><br><span class="line">      type: <span class="built_in">String</span>,</span><br><span class="line">      unique: <span class="literal">true</span></span><br><span class="line">    },</span><br><span class="line">    password: {</span><br><span class="line">      type: <span class="built_in">String</span>,</span><br><span class="line">      unique: <span class="literal">true</span></span><br><span class="line">    }</span><br><span class="line">  },</span><br><span class="line">  { <span class="attr">autoIndex</span>: <span class="literal">false</span> }</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> Person = mongoose.model(<span class="string">'classes'</span>, personSchema);</span><br><span class="line"></span><br><span class="line">exports.insert = <span class="function">(<span class="params">data, next</span>) =&gt;</span> {</span><br><span class="line">  <span class="keyword">const</span> person = <span class="keyword">new</span> Person(data);</span><br><span class="line">  person.save(<span class="function"><span class="params">err</span> =&gt;</span> {</span><br><span class="line">    <span class="keyword">if</span> (err) {</span><br><span class="line">      next(<span class="number">-1</span>);</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    }</span><br><span class="line">    next(<span class="number">1</span>);</span><br><span class="line">  });</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">exports.find = <span class="function">(<span class="params">data, next</span>) =&gt;</span> {</span><br><span class="line">  Person.findOne(data, (err, result) =&gt; {</span><br><span class="line">    <span class="keyword">if</span> (err) {</span><br><span class="line">      next(<span class="number">-1</span>);</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">if</span> (!result) {</span><br><span class="line">      next(<span class="number">0</span>);</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    }</span><br><span class="line">    next(<span class="number">1</span>, result);</span><br><span class="line">  });</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="补充-1"><a href="#补充-1" class="headerlink" title="补充"></a>补充</h3><p>原来的Mongodb获取ObjectId转变成Mongoose方式</p><div class="note warning"><p><del>const ObjectId = require(“mongodb”).ObjectId;</del></p></div><div class="note success"><p>const ObjectId = require(“mongoose”).Types.ObjectId;</p></div><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>总的来说迈出了第一步<span class="github-emoji" style="color: transparent;background:no-repeat url(https://github.githubassets.com/images/icons/emoji/unicode/1f603.png?v8) center/contain" data-src="https://github.githubassets.com/images/icons/emoji/unicode/1f603.png?v8">😃</span> <span class="github-emoji" style="color: transparent;background:no-repeat url(https://github.githubassets.com/images/icons/emoji/unicode/1f603.png?v8) center/contain" data-src="https://github.githubassets.com/images/icons/emoji/unicode/1f603.png?v8">😃</span> <span class="github-emoji" style="color: transparent;background:no-repeat url(https://github.githubassets.com/images/icons/emoji/unicode/1f603.png?v8) center/contain" data-src="https://github.githubassets.com/images/icons/emoji/unicode/1f603.png?v8">😃</span></p><!-- rebuild by neat --><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      nodejs实现登录注册
    
    </summary>
    
      <category term="Node" scheme="https://zjgyb.github.io/categories/Node/"/>
    
    
      <category term="login" scheme="https://zjgyb.github.io/tags/login/"/>
    
      <category term="nodejs" scheme="https://zjgyb.github.io/tags/nodejs/"/>
    
      <category term="express" scheme="https://zjgyb.github.io/tags/express/"/>
    
      <category term="body-parser" scheme="https://zjgyb.github.io/tags/body-parser/"/>
    
      <category term="express-session" scheme="https://zjgyb.github.io/tags/express-session/"/>
    
      <category term="signp" scheme="https://zjgyb.github.io/tags/signp/"/>
    
  </entry>
  
  <entry>
    <title>websocket交互</title>
    <link href="https://zjgyb.github.io/websocket%E4%BA%A4%E4%BA%92.html"/>
    <id>https://zjgyb.github.io/websocket交互.html</id>
    <published>2019-05-19T08:23:13.000Z</published>
    <updated>2019-05-19T08:30:29.344Z</updated>
    
    <content type="html"><![CDATA[<p>介绍 websocket 的使用<br>后台(nodejs) ws 包与 websocket 的对接</p><a id="more"></a><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>之前其实已经写过相关的内容，<a href="https://zjgyb.github.io/socket-io%E5%88%9D%E5%B0%9D%E8%AF%95.html">socket.io</a>能够很好的实现服务器与客户端之间的双向连接，今天只是对原生的 websocket 进行简单的介绍，当你不需要实现太复杂的功能时可以考虑使用这种方式，当然这也是对最近学 nodejs 的记录。</p><p>本文参考《了不起的 node.js》，但是书中<code>websocket.io</code>的包在我的 node 版本<code>v10.13.0</code>中会报错，而且包很长时间没有跟新，因此我选择了<code>ws</code>作为我的代码实例。</p><h2 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h2><video width="100%" height="240" controls=""><br><source src="websocket交互/show.mp4" type="video/mp4"><br></video><p>其实是两个页面的转换，每个界面控制一个手势，但是能看到其他界面的手势</p><h2 id="初始化项目"><a href="#初始化项目" class="headerlink" title="初始化项目"></a>初始化项目</h2><p>后端使用了两个包，<a href="https://www.npmjs.com/package/express" target="_blank" rel="noopener">express</a>和<a href="https://www.npmjs.com/package/ws" target="_blank" rel="noopener">ws</a>，如果想要看具体用法请看他们的相关介绍</p><figure class="highlight shell"><figcaption><span>shell</span></figcaption><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">yarn init -y</span><br><span class="line">yarn add express</span><br><span class="line">yarn add ws</span><br></pre></td></tr></tbody></table></figure><h2 id="服务端代码"><a href="#服务端代码" class="headerlink" title="服务端代码"></a>服务端代码</h2><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">"express"</span>);</span><br><span class="line"><span class="keyword">const</span> app = express();</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> WebSocket = <span class="built_in">require</span>(<span class="string">"ws"</span>);</span><br><span class="line"><span class="comment">// 注意接听的端口和当前服务器启动的端口不能一致，否则会报错</span></span><br><span class="line"><span class="keyword">const</span> ws = <span class="keyword">new</span> WebSocket.Server({ <span class="attr">port</span>: <span class="number">3000</span> });</span><br><span class="line"></span><br><span class="line"><span class="comment">// 保存各个界面的手势位置</span></span><br><span class="line"><span class="keyword">const</span> positions = {};</span><br><span class="line"><span class="keyword">let</span> total = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">ws.on(<span class="string">"connection"</span>, socket =&gt; {</span><br><span class="line">  socket.id = ++total;</span><br><span class="line"></span><br><span class="line">  socket.on(<span class="string">"message"</span>, msg =&gt; {</span><br><span class="line">    <span class="keyword">let</span> pos = <span class="built_in">JSON</span>.parse(msg);</span><br><span class="line">    positions[socket.id] = pos;</span><br><span class="line">    broadcast(<span class="built_in">JSON</span>.stringify({ <span class="attr">type</span>: <span class="string">"position"</span>, pos, <span class="attr">id</span>: socket.id }));</span><br><span class="line">  });</span><br><span class="line"></span><br><span class="line">  socket.on(<span class="string">"close"</span>, () =&gt; {</span><br><span class="line">    <span class="keyword">delete</span> positions[socket.id];</span><br><span class="line">    broadcast(<span class="built_in">JSON</span>.stringify({ <span class="attr">type</span>: <span class="string">"disconnect"</span>, <span class="attr">id</span>: socket.id }));</span><br><span class="line">  });</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">broadcast</span>(<span class="params">msg</span>) </span>{</span><br><span class="line">    <span class="keyword">const</span> id = <span class="built_in">JSON</span>.parse(msg).id;</span><br><span class="line">    ws.clients.forEach(<span class="function">(<span class="params">client, index</span>) =&gt;</span> {</span><br><span class="line">      <span class="comment">// 广播功能，但是不广播当前连接的客户端</span></span><br><span class="line">      <span class="keyword">if</span> (client.readyState === WebSocket.OPEN &amp;&amp; index !== id) {</span><br><span class="line">        client.send(msg);</span><br><span class="line">      }</span><br><span class="line">    });</span><br><span class="line">  }</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 一开始连接的时候把其他界面的手势位置发送到当前客户端</span></span><br><span class="line">  socket.send(<span class="built_in">JSON</span>.stringify(positions));</span><br><span class="line">});</span><br><span class="line"></span><br><span class="line">app.use(express.static(<span class="string">"public"</span>));</span><br><span class="line">app.listen(<span class="number">4000</span>, () =&gt; {</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"start"</span>);</span><br><span class="line">});</span><br></pre></td></tr></tbody></table></figure><h2 id="客户端主要代码"><a href="#客户端主要代码" class="headerlink" title="客户端主要代码"></a>客户端主要代码</h2><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.onload = <span class="function"><span class="params">()</span> =&gt;</span> {</span><br><span class="line">  <span class="keyword">const</span> ws = <span class="keyword">new</span> WebSocket(<span class="string">"ws://localhost:3000"</span>);</span><br><span class="line"></span><br><span class="line">  ws.onopen = <span class="function"><span class="params">ev</span> =&gt;</span> {</span><br><span class="line">    <span class="built_in">document</span>.addEventListener(<span class="string">"mousemove"</span>, fun);</span><br><span class="line">  };</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 为了一开始能够加载其他界面的手势图片</span></span><br><span class="line">  <span class="keyword">let</span> initialized;</span><br><span class="line"></span><br><span class="line">  ws.onmessage = <span class="function">(<span class="params">ev</span>) =&gt;</span> {</span><br><span class="line">    <span class="keyword">const</span> obj = <span class="built_in">JSON</span>.parse(ev.data);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!initialized) {</span><br><span class="line">      initialized = <span class="literal">true</span>;</span><br><span class="line">      <span class="comment">// 首次加载其他界面的图片</span></span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">let</span> id <span class="keyword">in</span> obj) {</span><br><span class="line">        move(id, obj[id]);</span><br><span class="line">      }</span><br><span class="line">    } <span class="keyword">else</span> {</span><br><span class="line">      <span class="keyword">if</span> (<span class="string">"disconnect"</span> === obj.type) {</span><br><span class="line">        remove(obj.id);</span><br><span class="line">      } <span class="keyword">else</span> {</span><br><span class="line">        move(obj.id, obj.pos);</span><br><span class="line">      }</span><br><span class="line">    }</span><br><span class="line">  };</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">fun</span>(<span class="params">ev</span>) </span>{</span><br><span class="line">    ws.send(<span class="built_in">JSON</span>.stringify({ <span class="attr">x</span>: ev.clientX, <span class="attr">y</span>: ev.clientY }));</span><br><span class="line">  }</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">move</span>(<span class="params">id, pos</span>) </span>{</span><br><span class="line">    <span class="keyword">let</span> cursor = <span class="built_in">document</span>.getElementById(<span class="string">"cursor-"</span> + id);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!cursor) {</span><br><span class="line">      cursor = <span class="built_in">document</span>.createElement(<span class="string">"img"</span>);</span><br><span class="line">      cursor.id = <span class="string">"cursor-"</span> + id;</span><br><span class="line">      cursor.src = <span class="string">"/cursor.png"</span>;</span><br><span class="line">      cursor.style.position = <span class="string">"absolute"</span>;</span><br><span class="line">      <span class="built_in">document</span>.body.appendChild(cursor);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    cursor.style.left = pos.x + <span class="string">"px"</span>;</span><br><span class="line">    cursor.style.top = pos.y + <span class="string">"px"</span>;</span><br><span class="line">  }</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">remove</span>(<span class="params">id</span>) </span>{</span><br><span class="line">    <span class="keyword">const</span> cursor = <span class="built_in">document</span>.getElementById(<span class="string">"cursor-"</span> + id);</span><br><span class="line">    cursor.parentNode.removeChild(cursor);</span><br><span class="line">  }</span><br><span class="line">};</span><br></pre></td></tr></tbody></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>在有需要的时候就可以轻松的使用它了。<span class="github-emoji" style="color: transparent;background:no-repeat url(https://github.githubassets.com/images/icons/emoji/unicode/1f603.png?v8) center/contain" data-src="https://github.githubassets.com/images/icons/emoji/unicode/1f603.png?v8">😃</span> <span class="github-emoji" style="color: transparent;background:no-repeat url(https://github.githubassets.com/images/icons/emoji/unicode/1f603.png?v8) center/contain" data-src="https://github.githubassets.com/images/icons/emoji/unicode/1f603.png?v8">😃</span> <span class="github-emoji" style="color: transparent;background:no-repeat url(https://github.githubassets.com/images/icons/emoji/unicode/1f603.png?v8) center/contain" data-src="https://github.githubassets.com/images/icons/emoji/unicode/1f603.png?v8">😃</span></p><p>完</p><!-- rebuild by neat --><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      关于websocket的简单教程
    
    </summary>
    
      <category term="Node" scheme="https://zjgyb.github.io/categories/Node/"/>
    
    
      <category term="nodejs" scheme="https://zjgyb.github.io/tags/nodejs/"/>
    
      <category term="express" scheme="https://zjgyb.github.io/tags/express/"/>
    
      <category term="websocket" scheme="https://zjgyb.github.io/tags/websocket/"/>
    
      <category term="ws" scheme="https://zjgyb.github.io/tags/ws/"/>
    
  </entry>
  
  <entry>
    <title>regular-expression.md</title>
    <link href="https://zjgyb.github.io/regular-express-1.html"/>
    <id>https://zjgyb.github.io/regular-express-1.html</id>
    <published>2019-03-24T07:17:02.000Z</published>
    <updated>2019-09-15T01:15:13.012Z</updated>
    
    <content type="html"><![CDATA[<div class="note success"><p>介绍正则表达式的语法<br>列举一些用过的正则表达式</p></div><a id="more"></a><h2 id="正则表达式语法"><a href="#正则表达式语法" class="headerlink" title="正则表达式语法"></a>正则表达式语法</h2><h3 id="元字符"><a href="#元字符" class="headerlink" title="元字符"></a>元字符</h3><ul><li><code>.</code> 代表查找单个字符，除了换行和行结束符</li><li><code>\b</code> 匹配单词边界 border boundary</li><li><code>\B</code> 匹配非单词边界</li><li><code>\d</code> 查找数字 digital</li><li><code>\D</code> 查找非数字</li><li><code>\s</code> 查找空白符 spacing</li><li><code>\S</code> 查找非空白符</li><li><code>\w</code> 查找单词字符 word 数字+字母+下划线+汉字</li><li><code>\W</code> 查找非单词字符</li></ul><h3 id="量词"><a href="#量词" class="headerlink" title="量词"></a>量词</h3><ul><li><code>n?</code>匹配 0 个或 1 个字符串</li><li><code>n*</code>匹配 0 个或者多个 n 的字符串</li><li><code>n+</code>匹配 1 个或者多个 n 的字符串</li><li><code>n{X}</code>匹配包含 X 个 n 的序列的字符串</li><li><code>n{X,}</code>匹配包含 X 个或更多个 n 的序列的字符串</li><li><code>n{X,Y}</code>匹配至少出现 X 至多出现 Y 个你的字符串</li><li><code>n$</code>匹配任何 n 结尾的字符</li><li><code>^n</code>匹配任何 n 开头的字符</li></ul><h2 id="正则的一些方法"><a href="#正则的一些方法" class="headerlink" title="正则的一些方法"></a>正则的一些方法</h2><h3 id="search"><a href="#search" class="headerlink" title="search"></a>search</h3><p>用于检索字符串中指定的子字符串，或检索与正则表达式相匹配的子字符串，并返回子串的起始位置。</p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> reg = <span class="regexp">/e/</span>;</span><br><span class="line"><span class="keyword">const</span> reg1 = <span class="regexp">/m/</span>;</span><br><span class="line"><span class="keyword">const</span> str = <span class="string">"Hello world! Hi eeee. Tony bbbbb. 1234 +_ * / PPP"</span>;</span><br><span class="line"><span class="built_in">console</span>.log(str.search(reg)); <span class="comment">// 1</span></span><br><span class="line"><span class="built_in">console</span>.log(str.search(reg1)); <span class="comment">// -1</span></span><br></pre></td></tr></tbody></table></figure><h3 id="replace"><a href="#replace" class="headerlink" title="replace"></a>replace</h3><p>用于在字符串中用一些字符替换另一些字符，或替换一个与正则表达式匹配的子串。</p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> reg = <span class="regexp">/e/</span>;</span><br><span class="line"><span class="keyword">const</span> reg1 = <span class="regexp">/e/g</span>;</span><br><span class="line"><span class="keyword">const</span> str = <span class="string">"HEello eeee"</span>;</span><br><span class="line"><span class="built_in">console</span>.log(str.replace(reg, <span class="string">"a"</span>)); <span class="comment">// HEallo eeee</span></span><br><span class="line"><span class="built_in">console</span>.log(str.replace(reg1, <span class="string">"a"</span>)); <span class="comment">// HEallo aaaa</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> reg2 = <span class="regexp">/(e+)(l+)/g</span>;</span><br><span class="line"><span class="keyword">const</span> str1 = <span class="string">"HEello eeee hellllll eee abc"</span>;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * description:</span></span><br><span class="line"><span class="comment"> * param {type}</span></span><br><span class="line"><span class="comment"> *   - match-匹配的字符串</span></span><br><span class="line"><span class="comment"> *   - p1, p2, ... 第n个括号匹配的字符串</span></span><br><span class="line"><span class="comment"> *   - offset 子字符串在原字符串中的偏移量</span></span><br><span class="line"><span class="comment"> *   - str 原字符串</span></span><br><span class="line"><span class="comment"> * return:</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">replacer</span>(<span class="params">match, p1, p2, offset, str</span>) </span>{</span><br><span class="line">  <span class="built_in">console</span>.log(match); <span class="comment">// ell ellllll</span></span><br><span class="line">  <span class="built_in">console</span>.log(p1); <span class="comment">// e e</span></span><br><span class="line">  <span class="built_in">console</span>.log(p2); <span class="comment">// ll llllll</span></span><br><span class="line">  <span class="built_in">console</span>.log(offset); <span class="comment">// 2 13</span></span><br><span class="line">  <span class="built_in">console</span>.log(str); <span class="comment">// HEello eeee hellllll eee abc,  HEello eeee hellllll eee abc</span></span><br><span class="line">  <span class="keyword">return</span> match.toLocaleUpperCase();</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(str1.replace(reg2, replacer)); <span class="comment">// HEELLo eeee hELLLLLL eee abc</span></span><br><span class="line"><span class="comment">// 匹配的第一个字符间的交换</span></span><br><span class="line"><span class="keyword">const</span> reg3 = <span class="regexp">/(e+)(l+)/g</span>;</span><br><span class="line"><span class="built_in">console</span>.log(str1.replace(reg3, <span class="string">"$2 $1"</span>)); <span class="comment">// HEll eo eeee hllllll e eee abc</span></span><br></pre></td></tr></tbody></table></figure><h3 id="split"><a href="#split" class="headerlink" title="split"></a>split</h3><p>这里介绍与正则相关分割匹配的字符串</p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> reg = <span class="regexp">/\s*,\s*/gi</span>;</span><br><span class="line"><span class="keyword">const</span> str = <span class="string">'Footbal, food, for, fool, hi'</span>;</span><br><span class="line"><span class="keyword">const</span> arr = str.split(reg);</span><br><span class="line"><span class="built_in">console</span>.log(arr); <span class="comment">// [ 'Footbal', 'food', 'for', 'fool', 'hi' ] </span></span><br><span class="line"><span class="keyword">const</span> arr1 = str.split(reg, <span class="number">2</span>);</span><br><span class="line"><span class="built_in">console</span>.log(arr1); <span class="comment">// [ 'Footbal', 'food' ]</span></span><br></pre></td></tr></tbody></table></figure><h3 id="match"><a href="#match" class="headerlink" title="match"></a>match</h3><p>找到一个或者多个正则表达是的匹配</p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> reg = <span class="regexp">/foo/gi</span>;</span><br><span class="line"><span class="keyword">const</span> str = <span class="string">'Footbal, food, for, fool, hi'</span>;</span><br><span class="line"><span class="keyword">const</span> arr = str.match(reg);</span><br><span class="line"><span class="built_in">console</span>.log(arr); <span class="comment">// [ 'Foo', 'foo', 'foo' ]</span></span><br></pre></td></tr></tbody></table></figure><h3 id="test"><a href="#test" class="headerlink" title="test"></a>test</h3><p>如果字符串中含有匹配的文本，则返回 true，否则返回 false。</p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> reg = <span class="regexp">/e/i</span>;</span><br><span class="line"><span class="keyword">const</span> reg1 = <span class="regexp">/A/</span>;</span><br><span class="line"><span class="keyword">const</span> str = <span class="string">'HEllo! World'</span>;</span><br><span class="line"><span class="built_in">console</span>.log(reg.test(str)); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(reg1.test(str)); <span class="comment">// false</span></span><br></pre></td></tr></tbody></table></figure><h3 id="exec"><a href="#exec" class="headerlink" title="exec"></a>exec</h3><p>返回一个数组，如果没有时返回 null。有 lastIndex 等方法，可以检查下一个字符出现的位置。</p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> reg = <span class="regexp">/foo/gi</span>;</span><br><span class="line"><span class="keyword">const</span> str = <span class="string">'Footbal, food, for, fool, hi'</span>;</span><br><span class="line"><span class="keyword">const</span> arr = reg.exec(str);</span><br><span class="line"><span class="built_in">console</span>.log(arr);</span><br><span class="line"><span class="comment">// 匹配的第一个字符串</span></span><br><span class="line"><span class="built_in">console</span>.log(arr[<span class="number">0</span>]); <span class="comment">// Foo</span></span><br><span class="line"><span class="comment">// 匹配字符串的索引值 从0开始</span></span><br><span class="line"><span class="built_in">console</span>.log(arr.index); <span class="comment">// 0</span></span><br><span class="line"><span class="comment">// 原始字符串</span></span><br><span class="line"><span class="built_in">console</span>.log(arr.input); <span class="comment">// Footbal, food, for, fool</span></span><br><span class="line"><span class="comment">// 下一次匹配开始的位置</span></span><br><span class="line"><span class="built_in">console</span>.log(reg.lastIndex); <span class="comment">// 3</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 实现遍历</span></span><br><span class="line"><span class="keyword">const</span> str1 = <span class="string">'Footbal, food, for, fool, hi'</span>;</span><br><span class="line"><span class="keyword">const</span> arr = [];</span><br><span class="line"><span class="keyword">while</span>((myArr = reg.exec(str1)) !== <span class="literal">null</span>) {</span><br><span class="line">  arr.push(myArr[<span class="number">0</span>]);</span><br><span class="line">}</span><br><span class="line"><span class="built_in">console</span>.log(arr); <span class="comment">// [ 'Foo', 'foo', 'foo' ]</span></span><br></pre></td></tr></tbody></table></figure><h2 id="使用过的正则表达式"><a href="#使用过的正则表达式" class="headerlink" title="使用过的正则表达式"></a>使用过的正则表达式</h2><h3 id="email"><a href="#email" class="headerlink" title="email"></a>email</h3><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// /\b[A-Z0-9._%+-]+@[A-Z0-9.-]+\.[A-Z]{2,}\b/i;</span></span><br></pre></td></tr></tbody></table></figure><h3 id="正整数和零"><a href="#正整数和零" class="headerlink" title="正整数和零"></a>正整数和零</h3><figure class="highlight javascript"><figcaption><span>js</span></figcaption><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> REG = <span class="regexp">/^[1-9]\d*$|^0{1}$/i</span>;</span><br></pre></td></tr></tbody></table></figure><h3 id="小数"><a href="#小数" class="headerlink" title="小数"></a>小数</h3><figure class="highlight javascript"><figcaption><span>js</span></figcaption><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> REG = <span class="regexp">/^[1-9]\d*\.\d+$/i</span>;</span><br></pre></td></tr></tbody></table></figure><!-- rebuild by neat --><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;div class=&quot;note success&quot;&gt;&lt;p&gt;介绍正则表达式的语法&lt;br&gt;列举一些用过的正则表达式&lt;/p&gt;&lt;/div&gt;
    
    </summary>
    
      <category term="JavaScript" scheme="https://zjgyb.github.io/categories/JavaScript/"/>
    
    
      <category term="regular-expression" scheme="https://zjgyb.github.io/tags/regular-expression/"/>
    
      <category term="Js" scheme="https://zjgyb.github.io/tags/Js/"/>
    
      <category term="正则表达式" scheme="https://zjgyb.github.io/tags/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>vue-cli3使用mock</title>
    <link href="https://zjgyb.github.io/vue-cli3%E4%BD%BF%E7%94%A8mock.html"/>
    <id>https://zjgyb.github.io/vue-cli3使用mock.html</id>
    <published>2019-01-28T13:56:22.000Z</published>
    <updated>2019-01-28T13:57:37.027Z</updated>
    
    <content type="html"><![CDATA[<div class="note primary"><p>本文介绍了关于Vue CLI 3如何配置mock数据</p></div><a id="more"></a><ol><li><p>在根目录新建<code>vue.config.js</code>文件和<code>mock</code>文件夹</p></li><li><p>在mock文件夹中存放数据，例如<code>index.json</code></p></li><li><p><code>vue.config.js</code>进行配置</p></li></ol><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> mockIndex = <span class="built_in">require</span>(<span class="string">'./mock/index.json'</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = {</span><br><span class="line">  devServer: {</span><br><span class="line">    port: <span class="number">8080</span>,</span><br><span class="line">    before(app) {</span><br><span class="line">      app.get(<span class="string">'/api/index'</span>, (req, res) =&gt; {</span><br><span class="line">        res.json(mockIndex);</span><br><span class="line">      });</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">};</span><br></pre></td></tr></tbody></table></figure><ol start="4"><li>如何调用</li></ol><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">'axios'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> {</span><br><span class="line">  name: <span class="string">'home'</span>,</span><br><span class="line">  data() {</span><br><span class="line">    <span class="keyword">return</span> {</span><br><span class="line">      info: <span class="literal">null</span></span><br><span class="line">    }</span><br><span class="line">  },</span><br><span class="line">  mounted() {</span><br><span class="line">    axios</span><br><span class="line">      .get(<span class="string">'/api/index'</span>)</span><br><span class="line">      .then(<span class="function"><span class="params">res</span> =&gt;</span> { <span class="keyword">this</span>.info = res })</span><br><span class="line">  },</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><!-- rebuild by neat --><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;div class=&quot;note primary&quot;&gt;&lt;p&gt;本文介绍了关于Vue CLI 3如何配置mock数据&lt;/p&gt;&lt;/div&gt;
    
    </summary>
    
      <category term="Vue" scheme="https://zjgyb.github.io/categories/Vue/"/>
    
    
      <category term="Vue" scheme="https://zjgyb.github.io/tags/Vue/"/>
    
      <category term="Vue CLI 3" scheme="https://zjgyb.github.io/tags/Vue-CLI-3/"/>
    
      <category term="mock" scheme="https://zjgyb.github.io/tags/mock/"/>
    
  </entry>
  
  <entry>
    <title>python学习笔记（一）</title>
    <link href="https://zjgyb.github.io/python%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%80%EF%BC%89.html"/>
    <id>https://zjgyb.github.io/python学习笔记（一）.html</id>
    <published>2018-12-15T02:03:02.000Z</published>
    <updated>2018-12-15T02:04:13.146Z</updated>
    
    <content type="html"><![CDATA[<p>python与js比少了声明，少了大括号，少了分号，多了必要层级。<br><a id="more"></a></p><h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><p>只需要直接赋值就可以，前面不需要任何声明，可以用<code>print(variable)</code>查看变量。例如：</p><figure class="highlight python"><figcaption><span>python</span></figcaption><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="number">1</span></span><br><span class="line">b = <span class="string">'string'</span></span><br><span class="line">print(a, b) <span class="comment"># 1 string</span></span><br></pre></td></tr></tbody></table></figure><h2 id="If-Else"><a href="#If-Else" class="headerlink" title="If-Else"></a>If-Else</h2><figure class="highlight python"><figcaption><span>python</span></figcaption><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mark = <span class="number">65</span></span><br><span class="line"><span class="keyword">if</span> mark &lt; <span class="number">60</span>:</span><br><span class="line">    print(<span class="string">'你挂了！'</span>)</span><br><span class="line"><span class="keyword">elif</span> mark &lt; <span class="number">90</span>:</span><br><span class="line">    print(<span class="string">'你通过了！'</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">'你很优秀！'</span>)</span><br></pre></td></tr></tbody></table></figure><h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><h3 id="最简单的形式："><a href="#最简单的形式：" class="headerlink" title="最简单的形式："></a>最简单的形式：</h3><figure class="highlight python"><figcaption><span>python</span></figcaption><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">function1</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">'a'</span>)</span><br><span class="line">function1() <span class="comment"># a</span></span><br></pre></td></tr></tbody></table></figure><h3 id="参数形式"><a href="#参数形式" class="headerlink" title="参数形式"></a>参数形式</h3><figure class="highlight python"><figcaption><span>python</span></figcaption><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">function2</span><span class="params">(num)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> num ** <span class="number">2</span></span><br><span class="line">function2(<span class="number">5</span>) <span class="comment"># 25</span></span><br></pre></td></tr></tbody></table></figure><h2 id="List"><a href="#List" class="headerlink" title="List"></a>List</h2><p>等同于其他语言的数组,比如js</p><figure class="highlight python"><figcaption><span>python</span></figcaption><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a = [<span class="number">1</span>, <span class="string">'a'</span>, <span class="literal">True</span>]</span><br></pre></td></tr></tbody></table></figure><h3 id="append——把一项数据添加到数组最后面"><a href="#append——把一项数据添加到数组最后面" class="headerlink" title="append——把一项数据添加到数组最后面"></a>append——把一项数据添加到数组最后面</h3><p>类似于js的push</p><figure class="highlight python"><figcaption><span>python</span></figcaption><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a = [<span class="number">1</span>]</span><br><span class="line">a.append(<span class="string">'a'</span>)</span><br><span class="line">print(a) <span class="comment"># [1, 'a']</span></span><br></pre></td></tr></tbody></table></figure><h3 id="pop——删除数组最后一项"><a href="#pop——删除数组最后一项" class="headerlink" title="pop——删除数组最后一项"></a>pop——删除数组最后一项</h3><figure class="highlight python"><figcaption><span>python</span></figcaption><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a = [<span class="number">1</span>, <span class="string">'a'</span>]</span><br><span class="line">a.pop()</span><br><span class="line">print(a) <span class="comment"># [1]</span></span><br></pre></td></tr></tbody></table></figure><h2 id="for循环"><a href="#for循环" class="headerlink" title="for循环"></a>for循环</h2><figure class="highlight python"><figcaption><span>python</span></figcaption><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">b = [<span class="number">20</span>, <span class="number">10</span>, <span class="number">5</span>]</span><br><span class="line">total = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> e <span class="keyword">in</span> b:</span><br><span class="line">    total += e</span><br><span class="line">print(total)</span><br></pre></td></tr></tbody></table></figure><h2 id="while循环"><a href="#while循环" class="headerlink" title="while循环"></a>while循环</h2><figure class="highlight python"><figcaption><span>python</span></figcaption><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">##############</span></span><br><span class="line"><span class="comment"># total = 0</span></span><br><span class="line"><span class="comment"># for i in range(1, 5):</span></span><br><span class="line"><span class="comment">#     total += i</span></span><br><span class="line"><span class="comment"># print(total)</span></span><br><span class="line"><span class="comment">##############</span></span><br><span class="line">total2 = <span class="number">0</span></span><br><span class="line">j = <span class="number">1</span></span><br><span class="line"><span class="keyword">while</span> j &lt; <span class="number">5</span>:</span><br><span class="line">    total2 += j</span><br><span class="line">    j += <span class="number">1</span></span><br><span class="line">print(total2)</span><br></pre></td></tr></tbody></table></figure><h2 id="dictionary"><a href="#dictionary" class="headerlink" title="dictionary"></a>dictionary</h2><p>等同于其它例如js的json</p><figure class="highlight python"><figcaption><span>python</span></figcaption><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">d = { <span class="string">"George"</span>: <span class="number">24</span>, <span class="string">"Tom"</span>: <span class="number">32</span> }</span><br><span class="line">d[<span class="string">"George"</span>] = <span class="number">25</span></span><br><span class="line"><span class="keyword">for</span> key, value <span class="keyword">in</span> d.items():</span><br><span class="line">    print(<span class="string">"key:"</span>, key)</span><br><span class="line">    print(<span class="string">"value:"</span>, value)</span><br></pre></td></tr></tbody></table></figure><h2 id="class和object"><a href="#class和object" class="headerlink" title="class和object"></a>class和object</h2><figure class="highlight python"><figcaption><span>python</span></figcaption><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Robot</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name, color, weight)</span>:</span></span><br><span class="line">        self.name = name</span><br><span class="line">        self.color = color</span><br><span class="line">        self.weight = weight</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">introduce_self</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">"My name is "</span> + self.name)</span><br><span class="line"></span><br><span class="line">r1 = Robot(<span class="string">"Tom"</span>, <span class="string">"red"</span>, <span class="number">70</span>)</span><br><span class="line">r1.introduce_self()</span><br></pre></td></tr></tbody></table></figure><h2 id="Boolean"><a href="#Boolean" class="headerlink" title="Boolean"></a>Boolean</h2><figure class="highlight python"><figcaption><span>python</span></figcaption><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">type(<span class="literal">True</span>)</span><br><span class="line">type(<span class="literal">False</span>)</span><br></pre></td></tr></tbody></table></figure><h2 id="list-comprehension"><a href="#list-comprehension" class="headerlink" title="list comprehension"></a>list comprehension</h2><figure class="highlight python"><figcaption><span>python</span></figcaption><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a = [x ** <span class="number">2</span> <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">6</span>, <span class="number">0</span>, <span class="number">-1</span>)]</span><br></pre></td></tr></tbody></table></figure><h2 id="set"><a href="#set" class="headerlink" title="set"></a>set</h2><figure class="highlight python"><figcaption><span>python</span></figcaption><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">a = set()</span><br><span class="line">a.add(<span class="number">1</span>)</span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> a:</span><br><span class="line">    print(x)</span><br></pre></td></tr></tbody></table></figure><h2 id="参考视频"><a href="#参考视频" class="headerlink" title="参考视频"></a>参考视频</h2><p><a href="https://www.youtube.com/watch?v=Z1Yd7upQsXY&amp;index=1&amp;list=PLBZBJbE_rGRWeh5mIBhD-hhDwSEDxogDg" target="_blank" rel="noopener">Youtube</a></p><!-- rebuild by neat --><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;python与js比少了声明，少了大括号，少了分号，多了必要层级。&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="python" scheme="https://zjgyb.github.io/categories/python/"/>
    
    
      <category term="python" scheme="https://zjgyb.github.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>stopPropagation和preventDefault的区别</title>
    <link href="https://zjgyb.github.io/stop.html"/>
    <id>https://zjgyb.github.io/stop.html</id>
    <published>2018-11-26T09:09:51.000Z</published>
    <updated>2018-11-26T09:11:56.676Z</updated>
    
    <content type="html"><![CDATA[<div class="note primary"><p>之前看过stopPropagation和preventDefault的区别，然而当我再次遇到的时候已经忘了两者的区别，因此我需要写一篇关于两者区别的文章，以便理解以及之后忘记时能够通过阅读这篇文章回忆起来。</p></div><a id="more"></a><h2 id="stopPropagation"><a href="#stopPropagation" class="headerlink" title="stopPropagation"></a>stopPropagation</h2><blockquote><p>阻止捕获和冒泡阶段中当前事件的进一步传播。</p></blockquote><h2 id="preventDefault"><a href="#preventDefault" class="headerlink" title="preventDefault"></a>preventDefault</h2><blockquote><p>阻止浏览器做出默认操作。</p></blockquote><h2 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h2><iframe id="cp_embed_eQKLXo" src="//codepen.io/zjgyb/embed/eQKLXo?height=500&amp;theme-id=33713&amp;slug-hash=eQKLXo&amp;default-tab=js,result&amp;embed-version=2" scrolling="no" frameborder="no" height="500" allowtransparency="true" allowfullscreen="" class="cp_embed_iframe" style="width:100%;overflow:hidden"></iframe><p>从上面例子可以看出<code>event.stopPropagation()</code>阻止了子元素的冒泡，而<code>event.preventDefault</code>则是阻止了checkbox的点击确认事件</p><h2 id="参考教程"><a href="#参考教程" class="headerlink" title="参考教程"></a>参考教程</h2><ul><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Event/stopPropagation" target="_blank" rel="noopener">stopPropagation-MDN</a></li><li><a href="https://stackoverflow.com/questions/5963669/whats-the-difference-between-event-stoppropagation-and-event-preventdefault" target="_blank" rel="noopener">Stackoverflow</a></li></ul><!-- rebuild by neat --><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;div class=&quot;note primary&quot;&gt;&lt;p&gt;之前看过stopPropagation和preventDefault的区别，然而当我再次遇到的时候已经忘了两者的区别，因此我需要写一篇关于两者区别的文章，以便理解以及之后忘记时能够通过阅读这篇文章回忆起来。&lt;/p&gt;&lt;/div&gt;
    
    </summary>
    
      <category term="JavaScript" scheme="https://zjgyb.github.io/categories/JavaScript/"/>
    
    
      <category term="js" scheme="https://zjgyb.github.io/tags/js/"/>
    
      <category term="stopPropagation" scheme="https://zjgyb.github.io/tags/stopPropagation/"/>
    
      <category term="preventDefault" scheme="https://zjgyb.github.io/tags/preventDefault/"/>
    
  </entry>
  
  <entry>
    <title>css变量</title>
    <link href="https://zjgyb.github.io/css%E5%8F%98%E9%87%8F.html"/>
    <id>https://zjgyb.github.io/css变量.html</id>
    <published>2018-11-24T13:06:19.000Z</published>
    <updated>2018-11-24T13:07:24.648Z</updated>
    
    <content type="html"><![CDATA[<div class="note primary"><p>学过 SASS(LESS)等 CSS 预编译工具我们知道它们可以使用变量，但是 CSS 中也可以使用变量，它有很强的实用性。</p></div><a id="more"></a><h2 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h2><p>声明变量时需要加在变量名前面加上<code>--</code>，在使用变量时使用<code>var(--name)</code>。</p><h2 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h2><p>局部</p><figure class="highlight css"><figcaption><span>css</span></figcaption><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">element</span> {</span><br><span class="line">  <span class="attribute">--main-color</span>: <span class="number">#000</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">element</span> {</span><br><span class="line">  <span class="attribute">color</span>: <span class="built_in">var</span>(--main-color);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>全局</p><figure class="highlight css"><figcaption><span>css</span></figcaption><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-pseudo">:root</span> {</span><br><span class="line">  <span class="attribute">--main-bg-color</span>: <span class="number">#fff</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.content</span> {</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="built_in">var</span>(--main-bg-color);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="结合-js-使用"><a href="#结合-js-使用" class="headerlink" title="结合 js 使用"></a>结合 js 使用</h2><p>当我们需要有各种主题时我们需要修改 CSS 变量来达到效果，而修改 CSS 变量需要结合 JS 来使用。</p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> root = <span class="built_in">document</span>.querySelector(<span class="string">":root"</span>);</span><br><span class="line">element.addEventListener(<span class="string">"click"</span>, event =&gt; {</span><br><span class="line">  root.style.setProperty(<span class="string">"--theme-color"</span>, event.target.style.background);</span><br><span class="line">});</span><br></pre></td></tr></tbody></table></figure><h2 id="参考教程"><a href="#参考教程" class="headerlink" title="参考教程"></a>参考教程</h2><ul><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/Using_CSS_variables" target="_blank" rel="noopener">MDN</a></li><li><a href="http://www.ruanyifeng.com/blog/2017/05/css-variables.html" target="_blank" rel="noopener">阮一峰</a></li><li><a href="https://www.zhangxinxu.com/wordpress/2016/11/css-css3-variables-var/" target="_blank" rel="noopener">张鑫旭</a></li></ul><!-- rebuild by neat --><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;div class=&quot;note primary&quot;&gt;&lt;p&gt;学过 SASS(LESS)等 CSS 预编译工具我们知道它们可以使用变量，但是 CSS 中也可以使用变量，它有很强的实用性。&lt;/p&gt;&lt;/div&gt;
    
    </summary>
    
      <category term="CSS" scheme="https://zjgyb.github.io/categories/CSS/"/>
    
    
      <category term="css变量" scheme="https://zjgyb.github.io/tags/css%E5%8F%98%E9%87%8F/"/>
    
  </entry>
  
  <entry>
    <title>socket.io初尝试</title>
    <link href="https://zjgyb.github.io/socket-io%E5%88%9D%E5%B0%9D%E8%AF%95.html"/>
    <id>https://zjgyb.github.io/socket-io初尝试.html</id>
    <published>2018-11-16T13:06:33.000Z</published>
    <updated>2019-05-28T09:32:24.734Z</updated>
    
    <content type="html"><![CDATA[<div class="note primary"><p>socket-io 能够实现实时、双向、基于事件通讯。它能够在平台、浏览器、设备中运行，并且关注于它的可靠性与速度。</p></div><a id="more"></a><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>说起 socket.io，我一下想起的是 QQ，虽然我没有去了解过 QQ 是怎么通讯的，然而看到这个框架，我就对它产生了兴趣，想去实现多人在线通讯。之前看到过有人用这个看法智能机器人，也就是你问问题后通过你的相关字来回答你的问题。我是通过<a href="https://socket.io/" target="_blank" rel="noopener">官网</a>和<a href="https://www.youtube.com/watch?v=vQjiN8Qgs3c&amp;list=PL4cUxeGkcC9i4V-_ZVwLmOusj8YAUhj_9&amp;index=1" target="_blank" rel="noopener">youtube</a>上的视频来学习这一框架。</p><h2 id="实现效果"><a href="#实现效果" class="headerlink" title="实现效果"></a>实现效果</h2><p><img src="/images/soket-io.gif" alt="soket-io"></p><h2 id="语法讲解"><a href="#语法讲解" class="headerlink" title="语法讲解"></a>语法讲解</h2><p>因为服务器和浏览器所对应有两套代码，因此，所用的代码会存在差异，后端采用的<code>express</code>。</p><h3 id="以下是-express-中的代码"><a href="#以下是-express-中的代码" class="headerlink" title="以下是 express 中的代码"></a>以下是 express 中的代码</h3><p><code>io.on('connection', fun)</code>是当设备访问时建立连接，通常的用法是：</p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">io.on(<span class="string">"connection"</span>, socket =&gt; {</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">});</span><br></pre></td></tr></tbody></table></figure><p><code>socket.on('name', fun)</code>是当浏览器需要传值的时候建立的连接，并且返回相应事件，通常的用法是：</p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 这个函数包含在上一函数之中，其中name自己取</span></span><br><span class="line">socket.on(<span class="string">"name"</span>, data =&gt; {</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">});</span><br></pre></td></tr></tbody></table></figure><p><code>io.emit('name', fun)</code>是在<code>socket.on()</code>之中需要从服务器返回信息给浏览器，浏览器根据传回的数据进行相应的修改，通常的用法是：</p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">io.emit(<span class="string">"chat message"</span>, data);</span><br></pre></td></tr></tbody></table></figure><p><code>io.broadcast.emit('name', fun)</code>跟<code>io.emit()</code>类似，不同的是它会向其他用户发送消息，这在当某一个人上线时提醒其他人的时候发挥作用</p><h3 id="以下是浏览器方面的代码"><a href="#以下是浏览器方面的代码" class="headerlink" title="以下是浏览器方面的代码"></a>以下是浏览器方面的代码</h3><p>最简单的用法:</p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 先引入包，然后实例化，这样其实就简单的应用起来了</span></span><br><span class="line">&amp;lt;script src=<span class="string">"https://cdnjs.cloudflare.com/ajax/libs/socket.io/2.1.1/socket.io.dev.js"</span> /&amp;gt;;</span><br><span class="line"><span class="keyword">let</span> socket = io();</span><br></pre></td></tr></tbody></table></figure><p><code>socket.emit()</code>发送数据，对应的是服务器端接收的函数是<code>socket.on()</code>，而服务器端发送的数据<code>io.emit()</code>，则浏览器接收的数据使用<code>socket.on()</code></p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 发送</span></span><br><span class="line">socket.emit(<span class="string">"name"</span>, message.value);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 接收</span></span><br><span class="line">socket.on(<span class="string">"name"</span>, data =&gt; {</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">});</span><br></pre></td></tr></tbody></table></figure><h2 id="实现的主要代码"><a href="#实现的主要代码" class="headerlink" title="实现的主要代码"></a>实现的主要代码</h2><h3 id="express"><a href="#express" class="headerlink" title="express"></a>express</h3><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> app = express();</span><br><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">"http"</span>).Server(app);</span><br><span class="line"><span class="keyword">const</span> io = <span class="built_in">require</span>(<span class="string">"socket.io"</span>)(http);</span><br><span class="line"></span><br><span class="line">io.on(<span class="string">"connection"</span>, socket =&gt; {</span><br><span class="line">  <span class="comment">// 当一个设备连接时会打印出console.log</span></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"a user connected"</span>);</span><br><span class="line">  <span class="comment">// 定义的datas其实是定义连接设备的用户名，当注册完成后能够存下来</span></span><br><span class="line">  <span class="keyword">let</span> datas;</span><br><span class="line">  socket.on(<span class="string">"chat message"</span>, data =&gt; {</span><br><span class="line">    io.emit(<span class="string">"chat message"</span>, {</span><br><span class="line">      data: data,</span><br><span class="line">      datas</span><br><span class="line">    });</span><br><span class="line">  });</span><br><span class="line"></span><br><span class="line">  socket.on(<span class="string">"typing"</span>, data =&gt; {</span><br><span class="line">    datas = data;</span><br><span class="line">    socket.broadcast.emit(<span class="string">"typing"</span>, data);</span><br><span class="line">  });</span><br><span class="line">});</span><br></pre></td></tr></tbody></table></figure><h3 id="browser"><a href="#browser" class="headerlink" title="browser"></a>browser</h3><figure class="highlight html"><figcaption><span>html</span></figcaption><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">id</span>=<span class="string">"messages"</span>&gt;</span><span class="tag">&lt;<span class="name">&amp;#47;ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">"m"</span> <span class="attr">type</span>=<span class="string">"text"</span> /&gt;</span> <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">id</span>=<span class="string">"btn"</span>&gt;</span>Send<span class="tag">&lt;<span class="name">&amp;#47;button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">&amp;#47;form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"name"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span></span></span><br><span class="line"><span class="tag">    <span class="attr">type</span>=<span class="string">"text"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">id</span>=<span class="string">"username"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">class</span>=<span class="string">"username"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">placeholder</span>=<span class="string">"请输入你的用户名"</span></span></span><br><span class="line"><span class="tag">  /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">&amp;#47;div</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> socket = io();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 点击butoon按钮把用户的信息发往服务器</span></span><br><span class="line">btn.addEventListener(<span class="string">"click"</span>, () =&gt; {</span><br><span class="line">  socket.emit(<span class="string">"chat message"</span>, message.value);</span><br><span class="line">  message.value = <span class="string">""</span>;</span><br><span class="line">});</span><br><span class="line"></span><br><span class="line"><span class="comment">// 一开始需要输入的用户名</span></span><br><span class="line">username.addEventListener(<span class="string">"keypress"</span>, event =&gt; {</span><br><span class="line">  <span class="keyword">if</span> (event.keyCode === <span class="number">13</span>) {</span><br><span class="line">    name = username.value;</span><br><span class="line">    socket.emit(<span class="string">"typing"</span>, username.value);</span><br><span class="line">    <span class="keyword">let</span> con = <span class="built_in">document</span>.querySelector(<span class="string">".name"</span>);</span><br><span class="line">    con.style.display = <span class="string">"none"</span>;</span><br><span class="line">  }</span><br><span class="line">});</span><br><span class="line"></span><br><span class="line"><span class="comment">// 按下Enter键把用户的信息发往服务器</span></span><br><span class="line">m.addEventListener(<span class="string">"keypress"</span>, event =&gt; {</span><br><span class="line">  <span class="keyword">if</span> (event.keyCode === <span class="number">13</span>) {</span><br><span class="line">    event.preventDefault();</span><br><span class="line">    socket.emit(<span class="string">"chat message"</span>, message.value);</span><br><span class="line">    message.value = <span class="string">""</span>;</span><br><span class="line">  }</span><br><span class="line">});</span><br><span class="line"></span><br><span class="line"><span class="comment">// 用户发言的内容展示出来</span></span><br><span class="line">socket.on(<span class="string">"chat message"</span>, data =&gt; {</span><br><span class="line">  <span class="keyword">let</span> messages = <span class="built_in">document</span>.getElementById(<span class="string">"messages"</span>);</span><br><span class="line">  messages.innerHTML += <span class="string">`&amp;lt;li&amp;gt;<span class="subst">${data.datas}</span>说：<span class="subst">${data.data}</span>&amp;lt;&amp;#47;li&amp;gt;`</span>;</span><br><span class="line">});</span><br><span class="line"></span><br><span class="line"><span class="comment">// 提示其他用户一个用户已上线</span></span><br><span class="line">socket.on(<span class="string">"typing"</span>, data =&gt; {</span><br><span class="line">  alert(data + <span class="string">"上线了"</span>);</span><br><span class="line">});</span><br></pre></td></tr></tbody></table></figure><h2 id="全部代码"><a href="#全部代码" class="headerlink" title="全部代码"></a>全部代码</h2><p><a href="https://github.com/zjgyb/js-study/tree/master/socket-io" target="_blank" rel="noopener">github</a></p><h2 id="参考来源"><a href="#参考来源" class="headerlink" title="参考来源"></a>参考来源</h2><ul><li><a href="https://socket.io/" target="_blank" rel="noopener">官网</a></li><li><a href="https://www.youtube.com/watch?v=vQjiN8Qgs3c&amp;list=PL4cUxeGkcC9i4V-_ZVwLmOusj8YAUhj_9&amp;index=1" target="_blank" rel="noopener">youtube</a></li></ul><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>每天学习一点，进步一点<span class="github-emoji" style="color: transparent;background:no-repeat url(https://github.githubassets.com/images/icons/emoji/unicode/1f604.png?v8) center/contain" data-src="https://github.githubassets.com/images/icons/emoji/unicode/1f604.png?v8">😄</span></p><!-- rebuild by neat --><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;div class=&quot;note primary&quot;&gt;&lt;p&gt;socket-io 能够实现实时、双向、基于事件通讯。它能够在平台、浏览器、设备中运行，并且关注于它的可靠性与速度。&lt;/p&gt;&lt;/div&gt;
    
    </summary>
    
      <category term="JavaScript" scheme="https://zjgyb.github.io/categories/JavaScript/"/>
    
    
      <category term="js" scheme="https://zjgyb.github.io/tags/js/"/>
    
      <category term="express" scheme="https://zjgyb.github.io/tags/express/"/>
    
      <category term="socket.io" scheme="https://zjgyb.github.io/tags/socket-io/"/>
    
      <category term="server" scheme="https://zjgyb.github.io/tags/server/"/>
    
      <category term="browser" scheme="https://zjgyb.github.io/tags/browser/"/>
    
  </entry>
  
  <entry>
    <title>vue学习笔记（三）</title>
    <link href="https://zjgyb.github.io/vue%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%89%EF%BC%89.html"/>
    <id>https://zjgyb.github.io/vue学习笔记（三）.html</id>
    <published>2018-11-13T12:26:42.000Z</published>
    <updated>2019-05-28T09:29:16.793Z</updated>
    
    <content type="html"><![CDATA[<div class="note info"><p>对于Vue的第三篇总结，主要介绍计算属性、filter、mixin</p></div><a id="more"></a><h2 id="计算属性-VS-方法"><a href="#计算属性-VS-方法" class="headerlink" title="计算属性 VS 方法"></a>计算属性 VS 方法</h2><p>计算属性的值是缓存的，因此计算属性在直接需要渲染时比方法更加合适，计算属性不会影响其他渲染函数。例如下面一例中，把注释部分替换掉就会发现每次点击按钮会同时打印出<code>a</code>和<code>b</code></p><figure class="highlight html"><figcaption><span>html</span></figcaption><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"root"</span>&gt;</span></span><br><span class="line">  &amp;lt;!--</span><br><span class="line">    &amp;lt;p&amp;gt;age ——{{ addToA() }}&amp;lt;/p&amp;gt;</span><br><span class="line">    &amp;lt;p&amp;gt;age —— {{ addToB() }}&amp;lt;/p&amp;gt;</span><br><span class="line">  --&amp;gt;</span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>age ——{{ addToA }}<span class="tag">&lt;<span class="name">&amp;#47;p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>age —— {{ addToB }}<span class="tag">&lt;<span class="name">&amp;#47;p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"addA"</span>&gt;</span>add age A<span class="tag">&lt;<span class="name">&amp;#47;button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"addB"</span>&gt;</span>add age B<span class="tag">&lt;<span class="name">&amp;#47;button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">&amp;#47;div</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> Vue({</span><br><span class="line">  el: <span class="string">"#root"</span>,</span><br><span class="line"></span><br><span class="line">  data: {</span><br><span class="line">    age: <span class="number">10</span>,</span><br><span class="line">    a: <span class="number">1</span>,</span><br><span class="line">    b: <span class="number">2</span></span><br><span class="line">  },</span><br><span class="line"></span><br><span class="line">  methods: {</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    addToA() {</span></span><br><span class="line"><span class="comment">      console.log("a");</span></span><br><span class="line"><span class="comment">      return this.age + this.a;</span></span><br><span class="line"><span class="comment">    },</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    addToB() {</span></span><br><span class="line"><span class="comment">      console.log("b");</span></span><br><span class="line"><span class="comment">      return this.age + this.b;</span></span><br><span class="line"><span class="comment">    },</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    addA() {</span><br><span class="line">      <span class="keyword">this</span>.a += <span class="number">1</span>;</span><br><span class="line">    },</span><br><span class="line"></span><br><span class="line">    addB() {</span><br><span class="line">      <span class="keyword">this</span>.b += <span class="number">1</span>;</span><br><span class="line">    }</span><br><span class="line">  },</span><br><span class="line"></span><br><span class="line">  computed: {</span><br><span class="line">    addToA() {</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">"a"</span>);</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">this</span>.age + <span class="keyword">this</span>.a;</span><br><span class="line">    },</span><br><span class="line"></span><br><span class="line">    addToB() {</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">"b"</span>);</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">this</span>.age + <span class="keyword">this</span>.b;</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">});</span><br></pre></td></tr></tbody></table></figure><iframe id="cp_embed_LXZYNN" src="//codepen.io/zjgyb/embed/LXZYNN?height=500&amp;theme-id=33713&amp;slug-hash=LXZYNN&amp;default-tab=js,result&amp;embed-version=2" scrolling="no" frameborder="no" height="500" allowtransparency="true" allowfullscreen="" class="cp_embed_iframe" style="width:100%;overflow:hidden"></iframe><h2 id="filter——过滤器"><a href="#filter——过滤器" class="headerlink" title="filter——过滤器"></a>filter——过滤器</h2><p>能够方便的对一些值进行修改过滤，下面一例就是使标题大写，内容截取 100 字符</p><figure class="highlight html"><figcaption><span>html</span></figcaption><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-for</span>=<span class="string">"text in texts"</span> <span class="attr">:key</span>=<span class="string">"text.id"</span> <span class="attr">class</span>=<span class="string">"text"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h3</span>&gt;</span>{{ text.title | upperCase }}<span class="tag">&lt;<span class="name">&amp;#47;h3</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">article</span>&gt;</span>{{ text.body | catwords }}<span class="tag">&lt;<span class="name">&amp;#47;article</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">&amp;#47;div</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> Vue({</span><br><span class="line">  filters: {</span><br><span class="line">    upperCase(value) {</span><br><span class="line">      <span class="keyword">return</span> value.toUpperCase();</span><br><span class="line">    },</span><br><span class="line"></span><br><span class="line">    catwords(value) {</span><br><span class="line">      <span class="keyword">return</span> value.slice(<span class="number">0</span>, <span class="number">100</span>) + <span class="string">"..."</span>;</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">});</span><br></pre></td></tr></tbody></table></figure><div class="note info"><p>其实还可以使用<code>Vue.filter({ /* some code */ })</code>来表示，这里就介绍一种</p></div><iframe id="cp_embed_QJdEjp" src="//codepen.io/zjgyb/embed/QJdEjp?height=500&amp;theme-id=33713&amp;slug-hash=QJdEjp&amp;default-tab=js,result&amp;embed-version=2" scrolling="no" frameborder="no" height="500" allowtransparency="true" allowfullscreen="" class="cp_embed_iframe" style="width:100%;overflow:hidden"></iframe><h2 id="mixin"><a href="#mixin" class="headerlink" title="mixin"></a>mixin</h2><p>混合模式——公用方法及变量，例如：</p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// src/minix/blogMixins.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> {</span><br><span class="line">    computed: {</span><br><span class="line">        searchBlogs() {</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>.blogs.filter(<span class="function">(<span class="params">blog</span>) =&gt;</span> {</span><br><span class="line">                <span class="keyword">return</span> blog.title.match(<span class="keyword">this</span>.search);</span><br><span class="line">            })</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// src/component/MixinBlog.js</span></span><br><span class="line"><span class="keyword">import</span> blogMixins <span class="keyword">from</span> <span class="string">'../mixins/blogMixins'</span>;</span><br><span class="line"><span class="keyword">new</span> Vue({</span><br><span class="line">  mixins: [ blogMixins ]</span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure><!-- rebuild by neat --><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;div class=&quot;note info&quot;&gt;&lt;p&gt;对于Vue的第三篇总结，主要介绍计算属性、filter、mixin&lt;/p&gt;&lt;/div&gt;
    
    </summary>
    
      <category term="Vue" scheme="https://zjgyb.github.io/categories/Vue/"/>
    
    
      <category term="js" scheme="https://zjgyb.github.io/tags/js/"/>
    
      <category term="Vue" scheme="https://zjgyb.github.io/tags/Vue/"/>
    
      <category term="前端" scheme="https://zjgyb.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="计算属性" scheme="https://zjgyb.github.io/tags/%E8%AE%A1%E7%AE%97%E5%B1%9E%E6%80%A7/"/>
    
      <category term="filter" scheme="https://zjgyb.github.io/tags/filter/"/>
    
      <category term="mixin" scheme="https://zjgyb.github.io/tags/mixin/"/>
    
  </entry>
  
</feed>
