<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>nicegong&#39;s blog</title>
  
  <subtitle>zjgyb</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://zjgyb.github.io/"/>
  <updated>2018-10-02T02:03:46.894Z</updated>
  <id>https://zjgyb.github.io/</id>
  
  <author>
    <name>nicegong</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>flutter学习第一天</title>
    <link href="https://zjgyb.github.io/flutter%E5%AD%A6%E4%B9%A0%E7%AC%AC%E4%B8%80%E5%A4%A9.html"/>
    <id>https://zjgyb.github.io/flutter学习第一天.html</id>
    <published>2018-10-02T02:02:22.000Z</published>
    <updated>2018-10-02T02:03:46.894Z</updated>
    
    <content type="html"><![CDATA[<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>flutter 是由 google 开发的一款跨平台的新框架，一套代码能够同时编译成安卓和 IOS。它使用的是 dart 语言，如果有 JS 或者 JAVA 编程语言，那么 dart 上手会变得相对简单。</p><h2 id="开发环境"><a href="#开发环境" class="headerlink" title="开发环境"></a>开发环境</h2><ul><li>系统: Win10</li><li>IDE：Andriod Studio</li><li>SDK: v0.8.2-beta</li></ul><h2 id="实现效果"><a href="#实现效果" class="headerlink" title="实现效果"></a>实现效果</h2><p><img src="images/flutter_oneday.gif" width="350"></p><h2 id="构建布局"><a href="#构建布局" class="headerlink" title="构建布局"></a>构建布局</h2><p>第一步</p><p>获取*<a href="https://github.com/flutter/udacity-course/tree/master/course/02_category_widget/task_02_category_widget" target="_blank" rel="noopener">原始代码</a></p><div class="note info"><p>*这个是优达学城中的项目，它给出了原始代码，我根据它的要求实现</p></div><p>第二步：绘制布局<br><img src="images/flutter_mind.png" alt="思路图"></p><p>第三步：编写代码</p><p>根据思路创建最基本的布局</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// category.dart</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">'package:flutter/material.dart'</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Category</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line">  <span class="comment">// <span class="doctag">TODO:</span> You'll need the name, color, and iconLocation from main.dart</span></span><br><span class="line">  <span class="keyword">const</span> Category();</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line"></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="comment">// <span class="doctag">TODO:</span> Build the custom widget here, referring to the Specs.</span></span><br><span class="line">    <span class="keyword">return</span> Container(</span><br><span class="line">      child: <span class="keyword">new</span> InkWell(</span><br><span class="line">        child: <span class="keyword">new</span> Row(</span><br><span class="line">          children: &lt;Widget&gt;[</span><br><span class="line">            <span class="keyword">new</span> Padding(</span><br><span class="line">              child:  <span class="keyword">new</span> Icon(</span><br><span class="line">              ),</span><br><span class="line">            ),</span><br><span class="line">            <span class="keyword">new</span> Text(</span><br><span class="line">            ),</span><br><span class="line">          ],</span><br><span class="line">        )</span><br><span class="line">      )</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>加上样式</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 第一处</span></span><br><span class="line"><span class="keyword">return</span> Container(</span><br><span class="line">    <span class="comment">// from here</span></span><br><span class="line">    height: <span class="number">100.0</span>, <span class="comment">// Widget height</span></span><br><span class="line">    <span class="comment">// padding: const EdgeInsets.all(8.0),</span></span><br><span class="line">    decoration: <span class="keyword">new</span> BoxDecoration(</span><br><span class="line">        borderRadius: <span class="keyword">new</span> BorderRadius.all(</span><br><span class="line">        <span class="keyword">const</span> Radius.circular(<span class="number">50.0</span>),</span><br><span class="line">        ),</span><br><span class="line">    ),</span><br><span class="line">    <span class="comment">// to here</span></span><br><span class="line">    child: <span class="keyword">new</span> InkWell(</span><br><span class="line"></span><br><span class="line"><span class="comment">// 第二处</span></span><br><span class="line"><span class="keyword">new</span> Padding(</span><br><span class="line">    padding: <span class="keyword">new</span> EdgeInsets.all(<span class="number">16.0</span>), <span class="comment">// padding around</span></span><br><span class="line">    child: <span class="keyword">new</span> Icon(</span><br><span class="line">        Icon.cakes,</span><br><span class="line">        size: <span class="number">60.0</span>, <span class="comment">// Icon size</span></span><br><span class="line">        ),</span><br><span class="line">    ),</span><br><span class="line"></span><br><span class="line">    <span class="keyword">new</span> Text(</span><br><span class="line">        <span class="string">"Cake"</span>,</span><br><span class="line">        style: <span class="keyword">new</span> TextStyle(</span><br><span class="line">        fontSize: <span class="number">24.0</span> <span class="comment">// Text size</span></span><br><span class="line">        ),</span><br><span class="line">    ),</span><br></pre></td></tr></table></figure><p>添加点击事件<br><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">child: <span class="keyword">new</span> InkWell(</span><br><span class="line">    splashColor: Colors.green,</span><br><span class="line">    highlightColor: Colors.green,</span><br><span class="line">    borderRadius: <span class="keyword">new</span> BorderRadius.all(</span><br><span class="line">        <span class="keyword">const</span> Radius.circular(<span class="number">50.0</span>),</span><br><span class="line">    ),</span><br><span class="line">    onTap: () &#123;</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"I was tapped!"</span>);</span><br><span class="line">    &#125;,</span><br></pre></td></tr></table></figure></p><p>传参及接收</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// main.dart</span></span><br><span class="line">body: Center(</span><br><span class="line">    <span class="comment">// <span class="doctag">TODO:</span> Determine what properties you'll need to pass into the widget</span></span><br><span class="line">    <span class="comment">// 这里是把定义好的参数传到category.dart中</span></span><br><span class="line">    child: Category(_categoryName, _categoryColor, _categoryIcon),</span><br><span class="line">    ),</span><br><span class="line"></span><br><span class="line"><span class="comment">// category.dart</span></span><br><span class="line"><span class="comment">// 接受参数</span></span><br><span class="line"><span class="keyword">final</span> <span class="built_in">String</span> name;</span><br><span class="line"><span class="keyword">final</span> color;</span><br><span class="line"><span class="keyword">final</span> iconLocation;</span><br><span class="line"><span class="keyword">const</span> Category(<span class="keyword">this</span>.name, <span class="keyword">this</span>.color, <span class="keyword">this</span>.iconLocation);</span><br></pre></td></tr></table></figure><p>替换定值<br><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// replace color</span></span><br><span class="line">child: <span class="keyword">new</span> InkWell(</span><br><span class="line">    <span class="comment">/* splashColor: green,</span></span><br><span class="line"><span class="comment">     * highlightColor: green,</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    splashColor: <span class="keyword">this</span>.color,</span><br><span class="line">    highlightColor: <span class="keyword">this</span>.color,</span><br><span class="line">    borderRadius: <span class="keyword">new</span> BorderRadius.all(</span><br><span class="line"></span><br><span class="line"><span class="comment">// replace icon</span></span><br><span class="line">child: <span class="keyword">new</span> Icon(</span><br><span class="line">    <span class="comment">// Icons.cake</span></span><br><span class="line">    <span class="keyword">this</span>.iconLocation,</span><br><span class="line">    size: <span class="number">60.0</span>, <span class="comment">// Icon size</span></span><br><span class="line">    ),</span><br><span class="line"></span><br><span class="line"><span class="comment">// replace text</span></span><br><span class="line"><span class="keyword">new</span> Text(</span><br><span class="line">    <span class="comment">// "Cake"</span></span><br><span class="line">    <span class="keyword">this</span>.name,</span><br><span class="line">    style: <span class="keyword">new</span> TextStyle(</span><br><span class="line">    fontSize: <span class="number">24.0</span> <span class="comment">// Text size</span></span><br><span class="line">    ),</span><br></pre></td></tr></table></figure></p><h2 id="全部代码"><a href="#全部代码" class="headerlink" title="全部代码"></a>全部代码</h2><p><a href="https://github.com/zjgyb/flutter_study" target="_blank" rel="noopener">传送门</a></p><h2 id="参考资源"><a href="#参考资源" class="headerlink" title="参考资源"></a>参考资源</h2><ul><li><a href="https://flutter.io" target="_blank" rel="noopener">flutter官网</a></li><li><a href="https://github.com/flutter/udacity-course/tree/master/course/02_category_widget/task_02_category_widget" target="_blank" rel="noopener">优达学城项目代码</a></li><li><a href="https://classroom.udacity.com/courses/ud905/lessons/92a39eec-0c04-4d98-b47f-c884b9cd5a3b/concepts/434cfc1b-b9d4-4ff9-a723-38b4e5cfaae4" target="_blank" rel="noopener">优达学城课程</a></li></ul><h2 id="结束语"><a href="#结束语" class="headerlink" title="结束语"></a>结束语</h2><p>flutter我也是才刚开始学习，如果有错误之处还希望读者斧正。感谢阅读！</p>]]></content>
    
    <summary type="html">
    
      &lt;img src=&quot;images/flutter_logo.png&quot; width=&quot;100%&quot;/&gt;
    
    </summary>
    
      <category term="flutter" scheme="https://zjgyb.github.io/categories/flutter/"/>
    
    
      <category term="flutter" scheme="https://zjgyb.github.io/tags/flutter/"/>
    
      <category term="dart" scheme="https://zjgyb.github.io/tags/dart/"/>
    
      <category term="material" scheme="https://zjgyb.github.io/tags/material/"/>
    
  </entry>
  
  <entry>
    <title>es6学习</title>
    <link href="https://zjgyb.github.io/es6%E5%AD%A6%E4%B9%A0.html"/>
    <id>https://zjgyb.github.io/es6学习.html</id>
    <published>2018-09-16T13:55:10.000Z</published>
    <updated>2018-09-19T03:04:20.254Z</updated>
    
    <content type="html"><![CDATA[<p>已经使用了一段时间 es6 了，感觉应该对其中的知识点进行总结，能够时常回顾，加深记忆。</p><h3 id="let-amp-const"><a href="#let-amp-const" class="headerlink" title="let&amp;const"></a>let&amp;const</h3><p><code>let</code>的主要作用是能够存在作用域，这一点是有别于<code>var</code>的，举个例子</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = [];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++) &#123;</span><br><span class="line">  a[i] = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> i;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">a[<span class="number">0</span>](); <span class="comment">// 3</span></span><br><span class="line">a[<span class="number">1</span>](); <span class="comment">// 3</span></span><br><span class="line">a[<span class="number">2</span>](); <span class="comment">// 3</span></span><br></pre></td></tr></table></figure><p>而 let 却没有这样的问题</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a = [];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++) &#123;</span><br><span class="line">  a[i] = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> i;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">a[<span class="number">0</span>](); <span class="comment">// 0</span></span><br><span class="line">a[<span class="number">1</span>](); <span class="comment">// 1</span></span><br><span class="line">a[<span class="number">2</span>](); <span class="comment">// 2</span></span><br></pre></td></tr></table></figure><p><code>const</code>一般情况下是不可变的，但这不是绝对的，例如数组，对象（我指的对象都是狭义上的对象）等</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line">arr[<span class="number">0</span>] = <span class="number">3</span>;</span><br><span class="line">arr[<span class="number">0</span>]; <span class="comment">// 3</span></span><br></pre></td></tr></table></figure><h3 id="箭头函数"><a href="#箭头函数" class="headerlink" title="箭头函数"></a>箭头函数</h3><p>在 es6 中我最偏爱的就是箭头函数了，它的简洁是我偏爱的最大原因，举个例子</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// es5</span></span><br><span class="line"><span class="keyword">var</span> a = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// es6</span></span><br><span class="line"><span class="keyword">const</span> a = <span class="function"><span class="params">()</span> =&gt;</span> <span class="number">1</span>;</span><br></pre></td></tr></table></figure><h3 id="解构赋值"><a href="#解构赋值" class="headerlink" title="解构赋值"></a>解构赋值</h3><p>1.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> str = <span class="string">"hello"</span>;</span><br><span class="line"><span class="keyword">const</span> &#123; <span class="attr">length</span>: len &#125; = str;</span><br><span class="line">len; <span class="comment">// 5</span></span><br></pre></td></tr></table></figure><p>2.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> source = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>];</span><br><span class="line"><span class="keyword">const</span> [, , arr] = source;</span><br><span class="line">arr; <span class="comment">// [3,4,5,6,7,8,9,10]</span></span><br></pre></td></tr></table></figure><h3 id="简洁函数声明"><a href="#简洁函数声明" class="headerlink" title="简洁函数声明"></a>简洁函数声明</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// es5</span></span><br><span class="line"><span class="keyword">const</span> person = &#123;</span><br><span class="line">  name: <span class="string">"Taylor"</span>,</span><br><span class="line">  sayHello: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">`Hello! My name is <span class="subst">$&#123;<span class="keyword">this</span>.name&#125;</span>.`</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// es6</span></span><br><span class="line"><span class="keyword">const</span> person = &#123;</span><br><span class="line">  name: <span class="string">"Taylor"</span>,</span><br><span class="line">  sayHello() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">`Hello! My name is <span class="subst">$&#123;<span class="keyword">this</span>.name&#125;</span>.`</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="函数参数结构"><a href="#函数参数结构" class="headerlink" title="函数参数结构"></a>函数参数结构</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> person = &#123;</span><br><span class="line">  name: <span class="string">"nicegong"</span>,</span><br><span class="line">  sex: <span class="string">"man"</span>,</span><br><span class="line">  age: <span class="number">100</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">logPerson</span>(<span class="params">&#123; name, sex, age &#125;</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">`my name is <span class="subst">$&#123;name&#125;</span>, I am <span class="subst">$&#123;age&#125;</span> years old...`</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">logPerson(person); <span class="comment">// my name is nicegong, I am 100 years old...</span></span><br></pre></td></tr></table></figure><h3 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// es5</span></span><br><span class="line"><span class="keyword">var</span> Person = <span class="function"><span class="keyword">function</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.name = name;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> one = <span class="keyword">new</span> Person(<span class="string">"nicegong"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// es6</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">  construct(name) &#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> one = <span class="keyword">new</span> Person(<span class="string">"nicegong"</span>);</span><br></pre></td></tr></table></figure><h3 id="export-amp-import"><a href="#export-amp-import" class="headerlink" title="export&amp;import"></a>export&amp;import</h3><p><code>export</code>是从文件中导出变量与函数，<code>import</code>是从文件中引用变量与函数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// add.js</span></span><br><span class="line"><span class="keyword">const</span> add = <span class="function">(<span class="params">a, b</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> &#123; add &#125;;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; add &#125; <span class="keyword">from</span> <span class="string">"add.js"</span>;</span><br><span class="line">add(<span class="number">2</span>, <span class="number">5</span>); <span class="comment">// 7</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      es6是JavaScript语言的下一代标准，它与es5在语法上相差很大。
    
    </summary>
    
      <category term="前端" scheme="https://zjgyb.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="js" scheme="https://zjgyb.github.io/tags/js/"/>
    
      <category term="es6" scheme="https://zjgyb.github.io/tags/es6/"/>
    
  </entry>
  
  <entry>
    <title>预加载</title>
    <link href="https://zjgyb.github.io/%E9%A2%84%E5%8A%A0%E8%BD%BD.html"/>
    <id>https://zjgyb.github.io/预加载.html</id>
    <published>2018-09-01T08:03:17.000Z</published>
    <updated>2018-09-01T08:04:16.393Z</updated>
    
    <content type="html"><![CDATA[<h2 id="什么是预加载"><a href="#什么是预加载" class="headerlink" title="什么是预加载"></a>什么是预加载</h2><div class="note info"><p>预加载简单来说就是将所有所需的资源提前请求加载到本地，这样后面在需要用到时就直接从缓存取资源。避免了后续加载时空白等待，使界面更加友好。</p></div><h2 id="实现方式——这里实现的是图片的预加载"><a href="#实现方式——这里实现的是图片的预加载" class="headerlink" title="实现方式——这里实现的是图片的预加载"></a>实现方式——这里实现的是图片的预加载</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">preloadImg</span>(<span class="params">imgs</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> progress = <span class="built_in">document</span>.querySelector(<span class="string">".progress"</span>);</span><br><span class="line">  <span class="keyword">let</span> len = imgs.length;</span><br><span class="line">  <span class="keyword">let</span> count = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">    <span class="keyword">let</span> img = <span class="keyword">new</span> Image();</span><br><span class="line">    img.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      count++;</span><br><span class="line">      <span class="keyword">if</span> (count === len - <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="comment">// 图片缓存结束后的事件</span></span><br><span class="line">        progress.innerHTML = <span class="string">"100%"</span>;</span><br><span class="line">        <span class="built_in">document</span>.querySelector(<span class="string">".loading"</span>).style.display = <span class="string">"none"</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    img.src = imgs[i];</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// imgs是一个数组，包含图片的路径</span></span><br><span class="line">preloadImg(imgs);</span><br></pre></td></tr></table></figure><h2 id="基本案例"><a href="#基本案例" class="headerlink" title="基本案例"></a>基本案例</h2><h3 id="无序的图片缓存"><a href="#无序的图片缓存" class="headerlink" title="无序的图片缓存"></a>无序的图片缓存</h3><ol><li>图片的切换——<a href="http://htmlpreview.github.io/?https://github.com/zjgyb/js-study/blob/master/study/preload.html" target="_blank" rel="noopener">传送门</a></li><li>表情的预加载——<a href="http://htmlpreview.github.io/?https://github.com/zjgyb/js-study/blob/master/study/preload_git.html" target="_blank" rel="noopener">传送门</a></li></ol><h3 id="有序的图片缓存"><a href="#有序的图片缓存" class="headerlink" title="有序的图片缓存"></a>有序的图片缓存</h3><ol><li>图片的切换——<a href="http://htmlpreview.github.io/?https://github.com/zjgyb/js-study/blob/master/study/preload_order.html" target="_blank" rel="noopener">传送门</a></li></ol><h3 id="源代码"><a href="#源代码" class="headerlink" title="源代码"></a>源代码</h3><ol><li><a href="https://github.com/zjgyb/js-study/blob/master/study/preload.html" title="github" target="_blank" rel="noopener">源代码——图片的切换无序</a></li><li><a href="https://github.com/zjgyb/js-study/blob/master/study/preload_git.html" title="github" target="_blank" rel="noopener">源代码——表情的预加载</a></li><li><a href="https://github.com/zjgyb/js-study/blob/master/study/preload_order.html" title="github" target="_blank" rel="noopener">源代码——图片的切换有序</a></li></ol><h2 id="参考资源"><a href="#参考资源" class="headerlink" title="参考资源"></a>参考资源</h2><ul><li><a href="https://www.imooc.com/learn/502" title="慕课网" target="_blank" rel="noopener">慕课网</a></li></ul>]]></content>
    
    <summary type="html">
    
      预加载简单来说就是将所有所需的资源提前请求加载到本地，这样后面在需要用到时就直接从缓存取资源...
    
    </summary>
    
      <category term="前端" scheme="https://zjgyb.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="js" scheme="https://zjgyb.github.io/tags/js/"/>
    
      <category term="预加载" scheme="https://zjgyb.github.io/tags/%E9%A2%84%E5%8A%A0%E8%BD%BD/"/>
    
  </entry>
  
  <entry>
    <title>canvas基础</title>
    <link href="https://zjgyb.github.io/canvas%E5%9F%BA%E7%A1%80.html"/>
    <id>https://zjgyb.github.io/canvas基础.html</id>
    <published>2018-08-27T02:28:49.000Z</published>
    <updated>2018-09-11T14:27:50.792Z</updated>
    
    <content type="html"><![CDATA[<h2 id="概述——什么是-Canvas"><a href="#概述——什么是-Canvas" class="headerlink" title="概述——什么是 Canvas"></a>概述——什么是 Canvas</h2><blockquote><p>canvas 这个元素负责在页面中设定一个区域，然后通过 JS 动态的在这个区域中绘制图形。</p></blockquote><h2 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h2><h3 id="基本介绍"><a href="#基本介绍" class="headerlink" title="基本介绍"></a>基本介绍</h3><p>一般前两个都是要画元素的开始坐标，后两个一般是要画元素本身的配置</p><h3 id="strokeRect"><a href="#strokeRect" class="headerlink" title="strokeRect()"></a>strokeRect()</h3><p>绘制一个无填充矩形</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ctx.strokeRect(<span class="number">20</span>, <span class="number">20</span>, <span class="number">150</span>, <span class="number">100</span>);</span><br><span class="line"><span class="comment">// 等同于</span></span><br><span class="line">ctx.rect(<span class="number">20</span>, <span class="number">20</span>, <span class="number">150</span>, <span class="number">100</span>);</span><br><span class="line">ctx.stroke();</span><br></pre></td></tr></table></figure><h3 id="fillRect"><a href="#fillRect" class="headerlink" title="fillRect()"></a>fillRect()</h3><p>绘制一个填充矩形</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ctx.fillRect(<span class="number">20</span>, <span class="number">20</span>, <span class="number">150</span>, <span class="number">100</span>);</span><br><span class="line"><span class="comment">// 等同于</span></span><br><span class="line">ctx.rect(<span class="number">20</span>, <span class="number">20</span>, <span class="number">150</span>, <span class="number">100</span>);</span><br><span class="line">ctx.fill();</span><br></pre></td></tr></table></figure><h3 id="beginPath"><a href="#beginPath" class="headerlink" title="beginPath()"></a>beginPath()</h3><p>起始一条路径或者重置当前路径</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ctx.beginPath();</span><br></pre></td></tr></table></figure><h3 id="translate"><a href="#translate" class="headerlink" title="translate();"></a>translate();</h3><p>改变画布的(0, 0)点也就是原点</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ctx.translate(<span class="number">20</span>, <span class="number">30</span>);</span><br></pre></td></tr></table></figure><h3 id="moveTo-和-lineTo"><a href="#moveTo-和-lineTo" class="headerlink" title="moveTo()和 lineTo()"></a>moveTo()和 lineTo()</h3><p>前一个是把路径移动到指定点，后一个是添加一个新点，两者往往一起使用</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ctx.moveTo(<span class="number">10</span>, <span class="number">10</span>);</span><br><span class="line">ctx.lineTo(<span class="number">50</span>, <span class="number">50</span>);</span><br></pre></td></tr></table></figure><h3 id="arc"><a href="#arc" class="headerlink" title="arc()"></a>arc()</h3><p>画圆的基本语法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 最后一个参数为可选参数，默认false为逆时针</span></span><br><span class="line">ctx.arc(<span class="number">100</span>, <span class="number">75</span>, <span class="number">50</span>, <span class="number">0</span>, <span class="number">2</span> * <span class="built_in">Math</span>.PI, <span class="literal">false</span>);</span><br></pre></td></tr></table></figure><h3 id="rotate"><a href="#rotate" class="headerlink" title="rotate()"></a>rotate()</h3><p>旋转的基本语法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ctx.rotate((<span class="number">20</span> * <span class="built_in">Math</span>.PI) / <span class="number">180</span>);</span><br></pre></td></tr></table></figure><h3 id="clearRect"><a href="#clearRect" class="headerlink" title="clearRect()"></a>clearRect()</h3><p>清除画布的基本语法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ctx.clearRect(<span class="number">20</span>, <span class="number">20</span>, <span class="number">100</span>, <span class="number">50</span>);</span><br></pre></td></tr></table></figure><h2 id="canvas-的使用"><a href="#canvas-的使用" class="headerlink" title="canvas 的使用"></a>canvas 的使用</h2><h3 id="在-html-页面插入-canvas"><a href="#在-html-页面插入-canvas" class="headerlink" title="在 html 页面插入 canvas"></a>在 html 页面插入 canvas</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">canvas</span> <span class="attr">id</span>=<span class="string">"content"</span> <span class="attr">width</span>=<span class="string">"200"</span> <span class="attr">height</span>=<span class="string">"200"</span>&gt;</span><span class="tag">&lt;/<span class="name">canvas</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="插入一张图片"><a href="#插入一张图片" class="headerlink" title="插入一张图片"></a>插入一张图片</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> content = <span class="built_in">document</span>.querySelector(<span class="string">"#content"</span>);</span><br><span class="line"><span class="keyword">let</span> ctx = content.getContext(<span class="string">"2d"</span>);</span><br><span class="line"><span class="keyword">let</span> image = <span class="keyword">new</span> Image();</span><br><span class="line">image.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  ctx.drawImage(image, <span class="number">0</span>, <span class="number">0</span>, content.width, content.height);</span><br><span class="line">  <span class="comment">// 加入文字渲染</span></span><br><span class="line">  ctx.font = <span class="string">"36pt Impact"</span>;</span><br><span class="line">  ctx.textAlign = <span class="string">"center"</span>;</span><br><span class="line">  ctx.fillStyle = <span class="string">"#fff"</span>;</span><br><span class="line">  ctx.fillText(<span class="string">"This is a pug"</span>, content.width / <span class="number">2</span>, <span class="number">50</span>);</span><br><span class="line">  ctx.strokeStyle = <span class="string">"#000"</span>;</span><br><span class="line">  ctx.lineWidth = <span class="number">3</span>;</span><br><span class="line">  ctx.strokeText(<span class="string">"This is a pug"</span>, content.width / <span class="number">2</span>, <span class="number">50</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">image.src =</span><br><span class="line">  <span class="string">"https://upload.wikimedia.org/wikipedia/commons/f/f3/Mops-duke-mopszucht-vom-maegdebrunnen.jpg"</span>;</span><br></pre></td></tr></table></figure><p>效果图</p><canvas id="con" width="250" height="250"></canvas><script>(function() {    const content = document.querySelector('#con');    let ctx = content.getContext('2d');    let image = new Image();    image.onload = function() {        ctx.drawImage(image, 0, 0, content.width, content.height);        // 加入文字渲染        ctx.font = '36pt Impact';        ctx.textAlign = 'center';        ctx.fillStyle = '#fff';        ctx.fillText('This is a pug', content.width / 2, 50);        ctx.strokeStyle = '#000';        ctx.lineWidth = 3;        ctx.strokeText('This is a pug', content.width / 2, 50);    }    image.src = 'https://upload.wikimedia.org/wikipedia/commons/f/f3/Mops-duke-mopszucht-vom-maegdebrunnen.jpg';})();</script><h3 id="绘制一个时钟"><a href="#绘制一个时钟" class="headerlink" title="绘制一个时钟"></a>绘制一个时钟</h3><p>效果图</p><canvas id="clock" width="200" height="200"></canvas><script>(function() {    let clock = document.querySelector('#clock');    let ctx = clock.getContext('2d');    let r = ctx.canvas.width / 2;    function drawclock() {        ctx.beginPath();        ctx.translate(r, r);        ctx.lineWidth = 10;        ctx.arc(0, 0, r - 5, 0, 2 * Math.PI);        ctx.stroke();        let font = [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 1, 2];        let rad = 2 * Math.PI / 12;        let fontR = r - 30;        ctx.font = "18px Arial"        ctx.textAlign = "center";        ctx.textBaseline = "middle";        font.forEach((num, i) => {            let x = fontR * Math.cos(i * rad);            let y = fontR * Math.sin(i * rad);            ctx.fillText(num, x, y);        });        // 画外围小圆        let radForSixty = 2 * Math.PI / 60;        let smallRad = r - 15;        for (let i = 0; i < 60; i++) {            ctx.beginPath();            let x = smallRad * Math.cos(i * radForSixty);            let y = smallRad * Math.sin(i * radForSixty);            if(i % 5 === 0) {                ctx.fillStyle = '#000';                ctx.arc(x, y, 2, 0, 2 * Math.PI);            } else {                ctx.fillStyle = '#eee';                ctx.arc(x, y, 2, 0, 2 * Math.PI);            }            ctx.fill();        }    };    // 画时针    function drawHour(hour, min) {        ctx.save();        let hourRad = hour * Math.PI / 6;        let minRad = min * Math.PI / 360;        ctx.rotate(hourRad + minRad);        let len = r / 2 - 20;        ctx.beginPath();        ctx.lineCap = "round";        ctx.moveTo(0, 10);        ctx.lineTo(0, -len);        ctx.stroke();        ctx.restore();    }    function drawMinute(min) {        ctx.save();        ctx.beginPath();        ctx.rotate(min * 2 * Math.PI / 60);        ctx.lineWidth = 5;        let len = r - 45;        ctx.beginPath();        ctx.lineCap = "round";        ctx.moveTo(0, 10);        ctx.lineTo(0, -len);        ctx.stroke();        ctx.restore();    }    function drawSecond(second) {        ctx.save();        ctx.beginPath();        ctx.rotate(second * 2 * Math.PI / 60);        ctx.fillStyle = 'red';        let len = r - 20;        ctx.lineCap = "round";        ctx.moveTo(-2, 10);        ctx.lineTo(-1, -len);        ctx.lineTo(1, -len);        ctx.lineTo(2, 10);        ctx.fill();        // 画中心小圆        ctx.beginPath();        ctx.fillStyle = '#fff';        ctx.arc(0, 0, 5, 0, 2 * Math.PI);        ctx.fill();        ctx.restore();    }    setInterval(() => {        ctx.save();        ctx.clearRect(0, 0, 2* r, 2 * r);        drawclock();        let date = new Date();        let hour = date.getHours();        if(hour - 12 > 0) {            hour -= 12;        }        let minute = date.getMinutes();        let seconds = date.getSeconds();        drawHour(hour, minute);        drawMinute(minute);        drawSecond(seconds);        ctx.restore();    }, 1000);})();</script><p><a href="https://github.com/zjgyb/js-study/blob/master/study/canvas_time.html" title="时钟源代码" target="_blank" rel="noopener">时钟源代码</a></p><h2 id="参考教程"><a href="#参考教程" class="headerlink" title="参考教程"></a>参考教程</h2><ul><li><a href="https://classroom.udacity.com/courses/ud292" title="优达学城" target="_blank" rel="noopener">优达学城</a></li><li><a href="https://www.imooc.com/learn/612" title="慕课网" target="_blank" rel="noopener">慕课网</a></li><li><a href="http://www.w3school.com.cn/tags/html_ref_canvas.asp" title="W3school" target="_blank" rel="noopener">W3school</a></li></ul>]]></content>
    
    <summary type="html">
    
      canvas这个元素负责在页面中设定一个区域，然后通过JS动态的在这个区域中绘制图形。
    
    </summary>
    
      <category term="前端" scheme="https://zjgyb.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="js" scheme="https://zjgyb.github.io/tags/js/"/>
    
      <category term="API" scheme="https://zjgyb.github.io/tags/API/"/>
    
      <category term="html5" scheme="https://zjgyb.github.io/tags/html5/"/>
    
      <category term="canvas" scheme="https://zjgyb.github.io/tags/canvas/"/>
    
  </entry>
  
  <entry>
    <title>Pug语法小结</title>
    <link href="https://zjgyb.github.io/Pug%E8%AF%AD%E6%B3%95%E5%B0%8F%E7%BB%93.html"/>
    <id>https://zjgyb.github.io/Pug语法小结.html</id>
    <published>2018-08-15T08:12:01.000Z</published>
    <updated>2018-08-24T02:41:35.725Z</updated>
    
    <content type="html"><![CDATA[<h2 id="pug简介"><a href="#pug简介" class="headerlink" title="pug简介"></a>pug简介</h2><p>pug其实就是一种模板引擎。最终它将渲染成html的格式，只不过它比html简洁，所以有时候会用pug来学html代码。近期希望自己总结一下语法，可以时常回顾，而不需要翻看各类介绍。</p><h2 id="pug用法预览"><a href="#pug用法预览" class="headerlink" title="pug用法预览"></a>pug用法预览</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- pug --&gt;</span><br><span class="line">doctype html</span><br><span class="line">html</span><br><span class="line">   head</span><br><span class="line">      title = &quot;Hello Pug&quot;</span><br><span class="line">   body</span><br><span class="line">      p.greetings#people Hello Views!</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- html --&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">   <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">title</span>&gt;</span>Hello Pug<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">   <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span> = <span class="string">"greetings"</span> <span class="attr">id</span> = <span class="string">"people"</span>&gt;</span>Hello Views!<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法</h2><h3 id="id-class"><a href="#id-class" class="headerlink" title="id,class"></a>id,class</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">div#content</span><br><span class="line">div.content</span><br><span class="line">// 只有div可以缩写以下形式</span><br><span class="line">#content</span><br><span class="line">.content</span><br></pre></td></tr></table></figure><h3 id="标签里含有其他属性（一行或多行都可以）"><a href="#标签里含有其他属性（一行或多行都可以）" class="headerlink" title="标签里含有其他属性（一行或多行都可以）"></a>标签里含有其他属性（一行或多行都可以）</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">input(</span><br><span class="line">  type=&apos;checkbox&apos;</span><br><span class="line">  name=&apos;agreement&apos;</span><br><span class="line">  id=&apos;content&apos;</span><br><span class="line">  class=&apos;content&apos;</span><br><span class="line">  checked</span><br><span class="line">)</span><br></pre></td></tr></table></figure><h3 id="变量（有多个class）"><a href="#变量（有多个class）" class="headerlink" title="变量（有多个class）"></a>变量（有多个class）</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">- var classes = [&quot;header-box&quot;, &quot;wraper&quot;]</span><br><span class="line">div(class=classes) somecode</span><br><span class="line">// 或者直接写入</span><br><span class="line">div(class=&quot;header-box wraper&quot;)</span><br></pre></td></tr></table></figure><h3 id="文件的引用"><a href="#文件的引用" class="headerlink" title="文件的引用"></a>文件的引用</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">script(src=&quot;/assets/jquery.min.js&quot;)</span><br></pre></td></tr></table></figure><h3 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">// 编译成&lt;!-- --&gt;（可以多行注释）</span><br><span class="line">&lt;!-- some words --&gt;</span><br><span class="line">//- 在pug中注释，但是不编译（可以多行注释）</span><br></pre></td></tr></table></figure><h2 id="代码的重用"><a href="#代码的重用" class="headerlink" title="代码的重用"></a>代码的重用</h2><h3 id="Mixin"><a href="#Mixin" class="headerlink" title="Mixin"></a>Mixin</h3><p>使用mixin定义一个语法块<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">mixin list</span><br><span class="line">   ul</span><br><span class="line">     li foo</span><br><span class="line">     li bar</span><br><span class="line">     li baz</span><br></pre></td></tr></table></figure></p><p>使用+命令，调用这个mixin命令<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">+list</span><br></pre></td></tr></table></figure></p><p>还可以指定参数<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">mixin pet(name)</span><br><span class="line">  li.pet= name</span><br><span class="line">ul</span><br><span class="line">  +pet(&apos;猫&apos;)</span><br><span class="line">  +pet(&apos;狗&apos;)</span><br><span class="line">  +pet(&apos;猪&apos;)</span><br></pre></td></tr></table></figure></p><h2 id="高级语法"><a href="#高级语法" class="headerlink" title="高级语法"></a>高级语法</h2><h3 id="pug的if-else语法"><a href="#pug的if-else语法" class="headerlink" title="pug的if,else语法"></a>pug的if,else语法</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">#user</span><br><span class="line">  if 1 + 1 === 2</span><br><span class="line">    p.con hello</span><br><span class="line">  else</span><br><span class="line">    p.con wrong</span><br></pre></td></tr></table></figure><h3 id="非"><a href="#非" class="headerlink" title="非"></a>非</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">unless 1+1 !== 2</span><br><span class="line">  p.con hello</span><br></pre></td></tr></table></figure><h3 id="each——for的别称"><a href="#each——for的别称" class="headerlink" title="each——for的别称"></a>each——for的别称</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ul</span><br><span class="line">  each val, index in [&apos;〇&apos;, &apos;一&apos;, &apos;二&apos;]</span><br><span class="line">    li= index + &apos;: &apos; + val</span><br></pre></td></tr></table></figure><h3 id="while语法"><a href="#while语法" class="headerlink" title="while语法"></a>while语法</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">- var n = 0;</span><br><span class="line">ul</span><br><span class="line">  while n &lt; 4</span><br><span class="line">    li= n++</span><br></pre></td></tr></table></figure><h3 id="不同文件的引用"><a href="#不同文件的引用" class="headerlink" title="不同文件的引用"></a>不同文件的引用</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">//- layout.pug</span><br><span class="line">doctype html</span><br><span class="line">html</span><br><span class="line">   head</span><br><span class="line">      title= title</span><br><span class="line">      meta(name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1&quot;)</span><br><span class="line">      block head</span><br><span class="line">   body</span><br><span class="line"></span><br><span class="line">   include header.pug</span><br><span class="line"></span><br><span class="line">   block body</span><br><span class="line"></span><br><span class="line">   include footer.pug</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">//- layout-home.pug</span><br><span class="line">extends ./layout.pug</span><br><span class="line"></span><br><span class="line">block head</span><br><span class="line">    link(rel=&quot;stylesheet&quot; href=&quot;/home/main.css&quot;)</span><br><span class="line">block body</span><br><span class="line">  div hello-world</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;pug简介&quot;&gt;&lt;a href=&quot;#pug简介&quot; class=&quot;headerlink&quot; title=&quot;pug简介&quot;&gt;&lt;/a&gt;pug简介&lt;/h2&gt;&lt;p&gt;pug其实就是一种模板引擎。最终它将渲染成html的格式，只不过它比html简洁，所以有时候会用pug来学html代
      
    
    </summary>
    
      <category term="前端" scheme="https://zjgyb.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="pug" scheme="https://zjgyb.github.io/tags/pug/"/>
    
  </entry>
  
  <entry>
    <title>FormData的使用</title>
    <link href="https://zjgyb.github.io/FormData%E7%9A%84%E4%BD%BF%E7%94%A8.html"/>
    <id>https://zjgyb.github.io/FormData的使用.html</id>
    <published>2018-08-14T06:00:57.100Z</published>
    <updated>2018-09-23T09:01:15.239Z</updated>
    
    <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>对于这个标签，之前一直没注意它的好处，直到在查阅express如何接受FormData传过来的数据的时候发现了它的方便之处。</p><h2 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h2><p><strong> 能够自动找到form标签下所有带name的表单 </strong><br>举例说明<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- html 部分 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"text"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">textarea</span> <span class="attr">rows</span>=<span class="string">"10"</span> <span class="attr">cols</span>=<span class="string">"30"</span> <span class="attr">name</span>=<span class="string">"textarea"</span>&gt;</span></span><br><span class="line">        文本框</span><br><span class="line">    <span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// js部分</span></span><br><span class="line"><span class="keyword">const</span> form = <span class="built_in">document</span>.querySelector(<span class="string">'form'</span>);</span><br><span class="line"><span class="keyword">const</span> btn = <span class="built_in">document</span>.querySelector(<span class="string">'button'</span>);</span><br><span class="line">btn.onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 没有写检验</span></span><br><span class="line">    <span class="keyword">let</span> data = <span class="keyword">new</span> FormData(form);</span><br><span class="line">    fetch(<span class="string">'./supply'</span>, &#123;</span><br><span class="line">            body: data,</span><br><span class="line">            cache: <span class="string">'no-cache'</span>,</span><br><span class="line">            credentials: <span class="string">'same-origin'</span>,</span><br><span class="line">            method: <span class="string">'POST'</span></span><br><span class="line">        &#125;)</span><br><span class="line">        .then(<span class="function"><span class="keyword">function</span> (<span class="params">response</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> response.json();</span><br><span class="line">        &#125;)</span><br><span class="line">        .then(<span class="function"><span class="keyword">function</span> (<span class="params">myJson</span>) </span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(myJson);</span><br><span class="line">        &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><div class="note info"><p>只需要获取form的节点，它就能自动获取含有name的表单</p></div><div class="note warning"><p>值得注意的是——在表单禁用的时候是不能获取到里面的值<br>例如<br><code>&lt;input type=&quot;text&quot; name=&quot;text&quot; disabled/&gt;</code></p></div><h2 id="express获取FormData传过来的值"><a href="#express获取FormData传过来的值" class="headerlink" title="express获取FormData传过来的值"></a>express获取FormData传过来的值</h2><p>其实下载一个模块就可以了，<code>connect-multiparty</code><br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用方法</span></span><br><span class="line"><span class="keyword">const</span> multipart = <span class="built_in">require</span>(<span class="string">'connect-multiparty'</span>);</span><br><span class="line"><span class="keyword">const</span> multipartMiddleware = multipart();</span><br><span class="line">router.post(<span class="string">'/'</span>, multipartMiddleware, (req, res, next) =&gt; &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(req.body); <span class="comment">// 查看req.body就可以看传过来的值了</span></span><br><span class="line">    res.send(req.body);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h2&gt;&lt;p&gt;对于这个标签，之前一直没注意它的好处，直到在查阅express如何接受FormData传过来的数据的时候发现了它的方便之处。&lt;/p&gt;
&lt;h2
      
    
    </summary>
    
      <category term="前端" scheme="https://zjgyb.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="js" scheme="https://zjgyb.github.io/tags/js/"/>
    
      <category term="API" scheme="https://zjgyb.github.io/tags/API/"/>
    
  </entry>
  
  <entry>
    <title>使用es5实现es6中部分API功能</title>
    <link href="https://zjgyb.github.io/%E4%BD%BF%E7%94%A8es5%E5%AE%9E%E7%8E%B0es6%E4%B8%AD%E9%83%A8%E5%88%86API%E5%8A%9F%E8%83%BD.html"/>
    <id>https://zjgyb.github.io/使用es5实现es6中部分API功能.html</id>
    <published>2018-08-13T09:08:53.952Z</published>
    <updated>2018-08-13T10:17:55.573Z</updated>
    
    <content type="html"><![CDATA[<ol><li><p>Array.prototype.find()</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">findFn</span>(<span class="params">arr, callback</span>) </span>&#123;</span><br><span class="line">   <span class="keyword">if</span>(<span class="keyword">typeof</span> callback !== <span class="string">'function'</span>) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">TypeError</span>(callback + <span class="string">' is not a function'</span>);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">       <span class="keyword">if</span>(callback(<span class="built_in">Number</span>(arr[i])) === <span class="literal">true</span>) &#123;</span><br><span class="line">           <span class="keyword">return</span> arr[i];</span><br><span class="line">       &#125;;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">return</span> <span class="literal">undefined</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> arr = [<span class="string">'string'</span> ,<span class="literal">true</span>, ‘’, <span class="literal">NaN</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="literal">undefined</span>, <span class="literal">null</span>];</span><br><span class="line"><span class="keyword">var</span> value = findFn(arr, <span class="function"><span class="keyword">function</span>(<span class="params">n</span>) </span>&#123;</span><br><span class="line">   <span class="keyword">return</span> n &gt; <span class="number">1</span>;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">console</span>.log(value);</span><br></pre></td></tr></table></figure></li><li><p>Array.prototype.findIndex()</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">findIndexFn</span>(<span class="params">arr, callback</span>) </span>&#123;</span><br><span class="line">   <span class="keyword">if</span> (<span class="keyword">typeof</span> callback !== <span class="string">'function'</span>) &#123;</span><br><span class="line">       <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">TypeError</span>(callback + <span class="string">'is not a function'</span>);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">       <span class="keyword">if</span> (callback(<span class="built_in">Number</span>(arr[i])) === <span class="literal">true</span>) &#123;</span><br><span class="line">           <span class="keyword">return</span> i;</span><br><span class="line">       &#125;;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">return</span> <span class="literal">undefined</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="string">'ddddd'</span>, <span class="literal">true</span>, <span class="string">''</span>, <span class="literal">NaN</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="literal">undefined</span>, <span class="literal">null</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> value = findIndexFn(arr, <span class="function"><span class="keyword">function</span>(<span class="params">n</span>) </span>&#123;</span><br><span class="line">   <span class="keyword">return</span> n &gt; <span class="number">2</span>;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(value);</span><br></pre></td></tr></table></figure></li><li><p>Array.prototype.fill()</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fillFn</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line">   <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">       <span class="keyword">if</span>(<span class="literal">false</span> === <span class="built_in">Boolean</span>(<span class="built_in">Number</span>(<span class="built_in">arguments</span>[<span class="number">2</span>])) &amp;&amp; <span class="literal">undefined</span> === <span class="built_in">arguments</span>[<span class="number">3</span>]) &#123;</span><br><span class="line">           arr[i] = <span class="built_in">arguments</span>[<span class="number">1</span>];</span><br><span class="line">       &#125; <span class="keyword">else</span> <span class="keyword">if</span>(<span class="literal">undefined</span> !== <span class="built_in">arguments</span>[<span class="number">2</span>] &amp;&amp; <span class="literal">undefined</span> === <span class="built_in">arguments</span>[<span class="number">3</span>]) &#123;</span><br><span class="line">           <span class="keyword">if</span>(i &gt;= <span class="built_in">arguments</span>[<span class="number">2</span>]) &#123;</span><br><span class="line">               arr[i] = <span class="built_in">arguments</span>[<span class="number">1</span>];</span><br><span class="line">           &#125;</span><br><span class="line">       &#125; <span class="keyword">else</span> <span class="keyword">if</span>(<span class="literal">undefined</span> !== <span class="built_in">arguments</span>[<span class="number">2</span>] &amp;&amp; <span class="literal">undefined</span> !== <span class="built_in">arguments</span>[<span class="number">3</span>]) &#123;</span><br><span class="line">           <span class="keyword">if</span>(i &gt;= <span class="built_in">arguments</span>[<span class="number">2</span>] &amp;&amp; i &lt; <span class="built_in">arguments</span>[<span class="number">3</span>]) &#123;</span><br><span class="line">               arr[i] = <span class="built_in">arguments</span>[<span class="number">1</span>];</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">return</span> arr;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="string">'ddddd'</span>, <span class="literal">true</span>, <span class="string">''</span>, <span class="literal">NaN</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="literal">undefined</span>, <span class="literal">null</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> value = fillFn(arr, <span class="number">7</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(value);</span><br></pre></td></tr></table></figure></li><li><p>Array.prototype.includes()</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">includesFn</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line">   <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">      <span class="keyword">if</span>(<span class="built_in">String</span>(<span class="built_in">arguments</span>[<span class="number">1</span>]) === <span class="string">'NaN'</span>) &#123;</span><br><span class="line">          <span class="built_in">String</span>(arr[i]) === <span class="string">'NaN'</span>;</span><br><span class="line">          <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span>(arr[i].indexOf(<span class="built_in">arguments</span>[<span class="number">1</span>])) &#123;</span><br><span class="line">          <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span>(<span class="built_in">Boolean</span>(<span class="built_in">Number</span>(<span class="built_in">arguments</span>[<span class="number">2</span>]))) &#123;</span><br><span class="line">          <span class="keyword">if</span>(i &gt;= <span class="built_in">Number</span>(<span class="built_in">arguments</span>[<span class="number">2</span>]) &#123;</span><br><span class="line">                <span class="keyword">if</span>(arr[i].indexOf(<span class="built_in">arguments</span>[<span class="number">1</span>])) &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="string">'ddddd'</span>, <span class="literal">true</span>, <span class="string">''</span>, <span class="literal">NaN</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="literal">undefined</span>, <span class="literal">null</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> value = includesFn(arr, <span class="literal">NaN</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(value);</span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ol&gt;
&lt;li&gt;&lt;p&gt;Array.prototype.find()&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span 
      
    
    </summary>
    
      <category term="前端" scheme="https://zjgyb.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="js" scheme="https://zjgyb.github.io/tags/js/"/>
    
      <category term="es6" scheme="https://zjgyb.github.io/tags/es6/"/>
    
      <category term="es5" scheme="https://zjgyb.github.io/tags/es5/"/>
    
  </entry>
  
  <entry>
    <title>前端学习资源</title>
    <link href="https://zjgyb.github.io/%E5%AD%A6%E4%B9%A0%E8%B5%84%E6%BA%90.html"/>
    <id>https://zjgyb.github.io/学习资源.html</id>
    <published>2018-08-13T08:47:55.227Z</published>
    <updated>2018-08-14T06:01:55.920Z</updated>
    
    <content type="html"><![CDATA[<h3 id="各种学习资源"><a href="#各种学习资源" class="headerlink" title="各种学习资源"></a>各种学习资源</h3><ul><li><a href="https://github.com/trekhleb/javascript-algorithms" target="_blank" rel="noopener">js算法与数据结构</a></li><li><a href="https://chenshenhai.github.io/koa2-note/" target="_blank" rel="noopener">koa学习</a></li><li><a href="http://xianbai.me/learn-md/index.html" target="_blank" rel="noopener">markdown学习</a></li><li><a href="https://blog.csdn.net/qingyuwp/article/details/78706904" target="_blank" rel="noopener">mysql的关于5.7.20安装以及配置</a></li><li><a href="https://growth.phodal.com/" target="_blank" rel="noopener">全栈工程师指南</a></li><li><a href="https://github.com/chyingp/nodejs-learning-guide/blob/master/README.md" target="_blank" rel="noopener">node学习笔记</a></li><li><a href="https://wangdoc.com/javascript/index.html" target="_blank" rel="noopener">javascript入门</a></li><li><a href="https://guide.aotu.io/index.html" target="_blank" rel="noopener">京东代码规范</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;各种学习资源&quot;&gt;&lt;a href=&quot;#各种学习资源&quot; class=&quot;headerlink&quot; title=&quot;各种学习资源&quot;&gt;&lt;/a&gt;各种学习资源&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/trekhleb/javascript-
      
    
    </summary>
    
      <category term="前端" scheme="https://zjgyb.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="js" scheme="https://zjgyb.github.io/tags/js/"/>
    
      <category term="resourse" scheme="https://zjgyb.github.io/tags/resourse/"/>
    
  </entry>
  
  <entry>
    <title>vscode常用快捷键</title>
    <link href="https://zjgyb.github.io/vscode%E5%91%BD%E4%BB%A4.html"/>
    <id>https://zjgyb.github.io/vscode命令.html</id>
    <published>2018-08-13T08:39:53.949Z</published>
    <updated>2018-08-23T10:03:59.351Z</updated>
    
    <content type="html"><![CDATA[<h3 id="常用快捷键-按Ctrl-Shift-P或者F1，输入shortcuts回车就可以看到快捷键文档"><a href="#常用快捷键-按Ctrl-Shift-P或者F1，输入shortcuts回车就可以看到快捷键文档" class="headerlink" title="常用快捷键 按Ctrl+Shift+P或者F1，输入shortcuts回车就可以看到快捷键文档"></a>常用快捷键 按<code>Ctrl+Shift+P</code>或者F1，输入<code>shortcuts</code>回车就可以看到快捷键文档</h3><ul><li><code>Shift+Alt+F</code> 代码格式化</li><li><code>Ctrl+A</code> 全选</li><li><code>Ctrl+N</code> 新建一个文件</li><li><code>Ctrl+P</code> 快速打开，选择相应文件打开</li><li><code>Ctrl+Shift+N</code> 打开一个新窗口</li><li><code>Ctrl+Shift+W</code> 关闭当前窗口</li><li><code>Ctrl+K Ctrl+S</code> 自定义命令</li><li><code>Ctrl + B</code> 折叠资源管理器</li></ul><h3 id="常用编辑快捷键"><a href="#常用编辑快捷键" class="headerlink" title="常用编辑快捷键"></a>常用编辑快捷键</h3><ul><li><code>Ctrl+↑/↓</code> 把该行代码与上行或下行代码互换</li><li><code>Ctrl+Shift+↑/↓</code> 选择多行</li><li><code>Ctrl+Shift+K</code> 删除该行(有时候会与输入法的快捷键相冲突)</li><li><code>Ctrl+Enter</code> 向下另起一行</li><li><code>Ctrl+Shift+Enter</code> 向上另起一行</li><li><code>Ctrl+Shift+\</code> 跳到括号的首或尾</li><li><code>Ctrl+]/[</code> 该行向前或向后总体移</li><li><code>Home/End</code> 跳到首或尾</li><li><code>Ctrl+Home</code> 跳到该文件的首</li><li><code>Ctrl+End</code> 跳到该文件的尾部</li><li><code>Ctrl+↑/↓</code> 上移或者下移</li><li><code>Ctrl+PgUp/PgDn</code> 跳到头部</li><li><code>Ctrl+Shift+[/]</code> 折叠或者展开</li></ul><h3 id="导航"><a href="#导航" class="headerlink" title="导航"></a>导航</h3><ul><li><code>Shift+F8</code> 去查看编辑器报错或者警告的地方</li><li><code>Alt+←/→</code> 向前/后一个块</li><li><code>Ctrl+Shift+Tab</code> 查看文件</li><li><code>Ctrl+F</code> 查找</li><li><code>Ctrl+H</code> 替换</li><li><code>Alt+Enter</code> 选中当前鼠标光标的词，然后匹配所有的相同内容的词组</li><li><code>Ctrl+D</code> 选中词组并匹配下一个相同的词组</li><li><code>Ctrl+Alt+↓</code> 倒置编辑器</li><li><code>Ctrl+U</code> 撤销上一个光标的动作</li><li><code>Shift+Alt+↑</code> 把该行上移</li><li><code>Ctrl+I</code> 选择光标的一行并且光标到下一行</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;常用快捷键-按Ctrl-Shift-P或者F1，输入shortcuts回车就可以看到快捷键文档&quot;&gt;&lt;a href=&quot;#常用快捷键-按Ctrl-Shift-P或者F1，输入shortcuts回车就可以看到快捷键文档&quot; class=&quot;headerlink&quot; title
      
    
    </summary>
    
      <category term="开发者手册" scheme="https://zjgyb.github.io/categories/%E5%BC%80%E5%8F%91%E8%80%85%E6%89%8B%E5%86%8C/"/>
    
    
      <category term="vscode" scheme="https://zjgyb.github.io/tags/vscode/"/>
    
      <category term="IDE" scheme="https://zjgyb.github.io/tags/IDE/"/>
    
  </entry>
  
  <entry>
    <title>jekyll介绍</title>
    <link href="https://zjgyb.github.io/jekyll.html"/>
    <id>https://zjgyb.github.io/jekyll.html</id>
    <published>2018-08-13T08:17:56.934Z</published>
    <updated>2018-08-13T08:51:56.244Z</updated>
    
    <content type="html"><![CDATA[<h3 id="如何开启本地服务"><a href="#如何开启本地服务" class="headerlink" title="如何开启本地服务"></a>如何开启本地服务</h3><ul><li><code>bundle exec jekyll serve</code></li><li>但是一般用以下命令，优点是及时刷新 <code>bundle exec jekyll serve --livereload</code></li></ul><h3 id="主要文件夹的介绍"><a href="#主要文件夹的介绍" class="headerlink" title="主要文件夹的介绍"></a>主要文件夹的介绍</h3><ul><li><code>_config.yml</code> 常量的存放地址，可以随意调用</li><li><code>_drafts</code> 存放草稿的位置，一般用于未发表前，查看效果的命令<code>bundle exec jekyll serve --drafts</code></li></ul><h3 id="主要命令的介绍"><a href="#主要命令的介绍" class="headerlink" title="主要命令的介绍"></a>主要命令的介绍</h3><ul><li>{ { page.title } } 主要是用于编写当前网站的相关信息</li><li>{ { site.title } } 描述本网站的title，在<code>_config.yml</code>中配置</li></ul><h3 id="需要注意的地方"><a href="#需要注意的地方" class="headerlink" title="需要注意的地方"></a>需要注意的地方</h3><ul><li>不能新建一个超过日期的文件</li></ul><h3 id="文件能够使用中文名"><a href="#文件能够使用中文名" class="headerlink" title="文件能够使用中文名"></a>文件能够使用中文名</h3><p><a href="http://blog.tanpeng.net/2017/03/07/jekyll-luanma/" title="jekyll文件使用中文名配置" target="_blank" rel="noopener">参考</a></p><h3 id="给文章添加分类"><a href="#给文章添加分类" class="headerlink" title="给文章添加分类"></a>给文章添加分类</h3><p>{ % for post in site.categories.categories_name % }<br>{ % endfor % }</p><h3 id="加入摘要功能"><a href="#加入摘要功能" class="headerlink" title="加入摘要功能"></a>加入摘要功能</h3><p>在<code>_config.yml</code>文件中加入下列命令<br>excerpt_separator: ‘&lt;!-- more --&gt;’</p><p>在文章中加入<code>&lt;!-- more --&gt;</code>，那么之前的内容就是摘要部分，或者在开头加入<code>excerpt: content</code>，其中<code>content</code>就是摘要内容</p><h3 id="添加css-语法"><a href="#添加css-语法" class="headerlink" title="添加css 语法"></a>添加css 语法</h3><p>{: .cssName}</p><h3 id="参考来源"><a href="#参考来源" class="headerlink" title="参考来源"></a>参考来源</h3><p><a href="https://jekyllrb.com/" title="jekyll官网" target="_blank" rel="noopener">jekyll官网</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;如何开启本地服务&quot;&gt;&lt;a href=&quot;#如何开启本地服务&quot; class=&quot;headerlink&quot; title=&quot;如何开启本地服务&quot;&gt;&lt;/a&gt;如何开启本地服务&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;bundle exec jekyll serve&lt;/code&gt;&lt;/l
      
    
    </summary>
    
      <category term="开发者手册" scheme="https://zjgyb.github.io/categories/%E5%BC%80%E5%8F%91%E8%80%85%E6%89%8B%E5%86%8C/"/>
    
    
      <category term="jekyll" scheme="https://zjgyb.github.io/tags/jekyll/"/>
    
  </entry>
  
  <entry>
    <title>git的使用</title>
    <link href="https://zjgyb.github.io/git.html"/>
    <id>https://zjgyb.github.io/git.html</id>
    <published>2018-08-10T03:59:20.714Z</published>
    <updated>2018-08-10T13:46:04.061Z</updated>
    
    <content type="html"><![CDATA[<h2 id="从master分支创建dev分支并切换到dev分支"><a href="#从master分支创建dev分支并切换到dev分支" class="headerlink" title="从master分支创建dev分支并切换到dev分支"></a>从master分支创建dev分支并切换到dev分支</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout -b dev</span><br></pre></td></tr></table></figure><p>相当于下面两条语句<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git branch dev</span><br><span class="line">git checkout dev</span><br></pre></td></tr></table></figure></p><h2 id="查看本地分支-表示当前分支"><a href="#查看本地分支-表示当前分支" class="headerlink" title="查看本地分支 *表示当前分支"></a>查看本地分支 *表示当前分支</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch</span><br></pre></td></tr></table></figure><h2 id="查看远程全部分支-白色本地存在，红色本地不存在"><a href="#查看远程全部分支-白色本地存在，红色本地不存在" class="headerlink" title="查看远程全部分支 白色本地存在，红色本地不存在"></a>查看远程全部分支 白色本地存在，红色本地不存在</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch -a</span><br></pre></td></tr></table></figure><h2 id="分支合并-将dev合并到master"><a href="#分支合并-将dev合并到master" class="headerlink" title="分支合并(将dev合并到master)"></a>分支合并(将dev合并到master)</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git checkout master</span><br><span class="line">git merge dev</span><br></pre></td></tr></table></figure><h2 id="合并完成后删除分支"><a href="#合并完成后删除分支" class="headerlink" title="合并完成后删除分支"></a>合并完成后删除分支</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch -d dev</span><br></pre></td></tr></table></figure><h2 id="本地同步远程的分支"><a href="#本地同步远程的分支" class="headerlink" title="本地同步远程的分支"></a>本地同步远程的分支</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git fetch origin -p</span><br></pre></td></tr></table></figure><h2 id="把本地的仓库推到空的github仓库上"><a href="#把本地的仓库推到空的github仓库上" class="headerlink" title="把本地的仓库推到空的github仓库上"></a>把本地的仓库推到空的github仓库上</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git remote add origin git@github.com:githubname/repositoriesname.git</span><br><span class="line"><span class="comment">// 第一次提交时需要加上`-u`</span></span><br><span class="line">git push -u origin master</span><br></pre></td></tr></table></figure><h2 id="提交代码的步骤"><a href="#提交代码的步骤" class="headerlink" title="提交代码的步骤"></a>提交代码的步骤</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git status <span class="comment">// 查看文件改动</span></span><br><span class="line">git add .  <span class="comment">// 把变化的所有文件放入缓冲区</span></span><br><span class="line">git commit -m <span class="string">"some messages"</span> <span class="comment">// -m后面输入的是本次提交的说明</span></span><br></pre></td></tr></table></figure><h2 id="回退"><a href="#回退" class="headerlink" title="回退"></a>回退</h2><ul><li>撤销<code>git status</code>命令使用<code>git reset HEAD filename</code></li><li>回退上一版本 <code>git reset --hard HEAD</code></li><li>回退指定版本 <code>git reset --hard 版本号</code></li></ul><h2 id="查看以往版本号-本地"><a href="#查看以往版本号-本地" class="headerlink" title="查看以往版本号(本地)"></a>查看以往版本号(本地)</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git reflog</span><br></pre></td></tr></table></figure><h2 id="查看各版本号及信息-个人和他人"><a href="#查看各版本号及信息-个人和他人" class="headerlink" title="查看各版本号及信息(个人和他人)"></a>查看各版本号及信息(个人和他人)</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git log</span><br></pre></td></tr></table></figure><ul><li><code>git log</code>命令显示从最近到最远的提交日志</li><li>如果看着太繁琐，可以使用<code>git log \-\-pretty=online</code></li></ul><h2 id="撤销修改"><a href="#撤销修改" class="headerlink" title="撤销修改"></a>撤销修改</h2><ul><li>在<code>git commit -m</code>前使用<code>git checkout -- filename</code>来撤销修改</li></ul><h2 id="对于已经push的版本回退"><a href="#对于已经push的版本回退" class="headerlink" title="对于已经push的版本回退"></a>对于已经push的版本回退</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git reset --hard 版本号</span><br><span class="line">git push -f origin dev</span><br></pre></td></tr></table></figure><h2 id="查看文件修改内容"><a href="#查看文件修改内容" class="headerlink" title="查看文件修改内容"></a>查看文件修改内容</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git diff filename</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;从master分支创建dev分支并切换到dev分支&quot;&gt;&lt;a href=&quot;#从master分支创建dev分支并切换到dev分支&quot; class=&quot;headerlink&quot; title=&quot;从master分支创建dev分支并切换到dev分支&quot;&gt;&lt;/a&gt;从master分支创建
      
    
    </summary>
    
      <category term="开发者手册" scheme="https://zjgyb.github.io/categories/%E5%BC%80%E5%8F%91%E8%80%85%E6%89%8B%E5%86%8C/"/>
    
    
      <category term="git" scheme="https://zjgyb.github.io/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>代码压缩</title>
    <link href="https://zjgyb.github.io/%E4%BB%A3%E7%A0%81%E5%8E%8B%E7%BC%A9.html"/>
    <id>https://zjgyb.github.io/代码压缩.html</id>
    <published>2018-08-10T03:54:45.126Z</published>
    <updated>2018-08-10T08:31:06.946Z</updated>
    
    <content type="html"><![CDATA[<h2 id="通过node实现代码压缩"><a href="#通过node实现代码压缩" class="headerlink" title="通过node实现代码压缩"></a>通过node实现代码压缩</h2><ol><li><a href="https://nodejs.org/en/" target="_blank" rel="noopener">安装nodejs</a></li><li>接下来使用<code>npm init -y</code>生成一个默认的package.json文件</li><li><code>npm install uglify-es</code>下载包</li><li>最后使用<code>npx uglifyjs -c -m -o finename.min.js -- filename.js</code></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;通过node实现代码压缩&quot;&gt;&lt;a href=&quot;#通过node实现代码压缩&quot; class=&quot;headerlink&quot; title=&quot;通过node实现代码压缩&quot;&gt;&lt;/a&gt;通过node实现代码压缩&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;https://nodejs.
      
    
    </summary>
    
      <category term="前端" scheme="https://zjgyb.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="js" scheme="https://zjgyb.github.io/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://zjgyb.github.io/hello-world.html"/>
    <id>https://zjgyb.github.io/hello-world.html</id>
    <published>2018-08-10T03:54:45.125Z</published>
    <updated>2018-08-10T13:45:51.679Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
      <category term="开发者手册" scheme="https://zjgyb.github.io/categories/%E5%BC%80%E5%8F%91%E8%80%85%E6%89%8B%E5%86%8C/"/>
    
    
      <category term="hexo" scheme="https://zjgyb.github.io/tags/hexo/"/>
    
  </entry>
  
</feed>
