<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>tony&#39;s blog</title>
  
  <subtitle>越努力越幸运</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://zjgyb.github.io/"/>
  <updated>2019-05-25T01:51:29.034Z</updated>
  <id>https://zjgyb.github.io/</id>
  
  <author>
    <name>tony</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>单例模式</title>
    <link href="https://zjgyb.github.io/%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F.html"/>
    <id>https://zjgyb.github.io/单例模式.html</id>
    <published>2019-05-25T01:40:53.000Z</published>
    <updated>2019-05-25T01:51:29.034Z</updated>
    
    <content type="html"><![CDATA[<h2 id="解释"><a href="#解释" class="headerlink" title="解释"></a>解释</h2><h3 id="什么是单例模式？"><a href="#什么是单例模式？" class="headerlink" title="什么是单例模式？"></a>什么是单例模式？</h3><p>单例就是保证一个类只有一个实例，实现的方法是判断实例是否存在与否，如果存在直接返回，如果不存在就创建了再返回，这就确保了一个类只有一个实例对象。</p><h3 id="模块作用"><a href="#模块作用" class="headerlink" title="模块作用"></a>模块作用</h3><ol><li>模块间通信</li><li>系统中某个类的对象只能存在一个</li><li>保护自己的属性和方法</li></ol><h2 id="简单的单例模式"><a href="#简单的单例模式" class="headerlink" title="简单的单例模式"></a>简单的单例模式</h2><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> home = {</span><br><span class="line">  style: <span class="string">"Chinese styles"</span>,</span><br><span class="line">  door() {</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  },</span><br><span class="line">  <span class="built_in">window</span>() {</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">  }</span><br><span class="line">};</span><br></pre></td></tr></tbody></table></figure><h2 id="以一个弹窗为例"><a href="#以一个弹窗为例" class="headerlink" title="以一个弹窗为例"></a>以一个弹窗为例</h2><p>以第一篇参考文章为例，使用 ES6 实现其效果</p><h3 id="前置代码"><a href="#前置代码" class="headerlink" title="前置代码"></a>前置代码</h3><p>html 部分，css 自行补充</p><figure class="highlight html"><figcaption><span>html</span></figcaption><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag"><<span class="name">div</span> <span class="attr">class</span>=<span class="string">"btn-group"</span>></span></span><br><span class="line">  <span class="tag"><<span class="name">button</span> <span class="attr">id</span>=<span class="string">"open"</span> <span class="attr">class</span>=<span class="string">"btn btn-primary"</span>></span></span><br><span class="line">    打开</span><br><span class="line">  <span class="tag"><<span class="name">&#47;button</span>></span></span><br><span class="line">  <span class="tag"><<span class="name">button</span> <span class="attr">id</span>=<span class="string">"delete"</span> <span class="attr">class</span>=<span class="string">"btn btn-default"</span>></span>关闭<span class="tag"><<span class="name">&#47;button</span>></span></span><br><span class="line"><span class="tag"><<span class="name">&#47;div</span>></span></span><br></pre></td></tr></tbody></table></figure><h3 id="创建主要代码"><a href="#创建主要代码" class="headerlink" title="创建主要代码"></a>创建主要代码</h3><p>先创建一个 Modal 类</p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Modal</span> </span>{</span><br><span class="line">  <span class="keyword">constructor</span>(id, html) {</span><br><span class="line">    <span class="keyword">this</span>.html = html;</span><br><span class="line">    <span class="keyword">this</span>.id = id;</span><br><span class="line">    <span class="keyword">this</span>.open = <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">this</span>.instance = <span class="literal">null</span>;</span><br><span class="line">  }</span><br><span class="line"></span><br><span class="line">  create() {</span><br><span class="line">    <span class="keyword">if</span> (!<span class="keyword">this</span>.open) {</span><br><span class="line">      <span class="keyword">const</span> modal = <span class="built_in">document</span>.createElement(<span class="string">"div"</span>);</span><br><span class="line">      modal.innerHTML = <span class="keyword">this</span>.html;</span><br><span class="line">      modal.id = <span class="keyword">this</span>.id;</span><br><span class="line">      <span class="built_in">document</span>.body.appendChild(modal);</span><br><span class="line">      setTimeout(<span class="function"><span class="params">()</span> =></span> {</span><br><span class="line">        modal.classList.add(<span class="string">"show"</span>);</span><br><span class="line">      }, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">      <span class="keyword">this</span>.open = <span class="literal">true</span>;</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line"></span><br><span class="line">  <span class="keyword">delete</span>() {</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.open) {</span><br><span class="line">      <span class="keyword">const</span> modal = $(<span class="keyword">this</span>.id);</span><br><span class="line">      modal.classList.add(<span class="string">"hide"</span>);</span><br><span class="line">      setTimeout(<span class="function"><span class="params">()</span> =></span> {</span><br><span class="line">        <span class="built_in">document</span>.body.removeChild(modal);</span><br><span class="line">      }, <span class="number">200</span>);</span><br><span class="line">      <span class="keyword">this</span>.open = <span class="literal">false</span>;</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line"></span><br><span class="line">  <span class="keyword">static</span> createIntance(id, html) {</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.instance || (<span class="keyword">this</span>.instance = <span class="keyword">new</span> Modal(id, html));</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><div class="note primary"><!-- build time:Sat May 25 2019 09:54:31 GMT+0800 (GMT+08:00) --><p>使用了惰性单例模式：在需要的时候创建单例，再次调用就使用第一次实例化后的实例对象</p><!-- rebuild by neat --></div><p>剩余部分</p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// class Modal ...</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> $ = <span class="function"><span class="params">id</span> =></span> {</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">typeof</span> id === <span class="string">"string"</span> ? <span class="built_in">document</span>.getElementById(id) : id;</span><br><span class="line">};</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> operate = {</span><br><span class="line">  setModal: <span class="literal">null</span>,</span><br><span class="line">  open() {</span><br><span class="line">    <span class="keyword">this</span>.setModal = Modal.createIntance(<span class="string">"modal"</span>, <span class="string">"这是一个弹窗"</span>);</span><br><span class="line">    <span class="keyword">this</span>.setModal.create();</span><br><span class="line">  },</span><br><span class="line">  <span class="keyword">delete</span>() {</span><br><span class="line">    <span class="keyword">this</span>.setModal && <span class="keyword">this</span>.setModal.delete();</span><br><span class="line">  }</span><br><span class="line">};</span><br><span class="line"></span><br><span class="line">$(<span class="string">"open"</span>).onclick = <span class="function"><span class="params">()</span> =></span> {</span><br><span class="line">  operate.open();</span><br><span class="line">};</span><br><span class="line"></span><br><span class="line">$(<span class="string">"delete"</span>).onclick = <span class="function"><span class="params">()</span> =></span> {</span><br><span class="line">  operate.delete();</span><br><span class="line">};</span><br></pre></td></tr></tbody></table></figure><div class="note "><!-- build time:Sat May 25 2019 09:54:31 GMT+0800 (GMT+08:00) --><p>其实<code>operate</code>就是一个普通的单例模式</p><!-- rebuild by neat --></div><h2 id="在Vue中的使用"><a href="#在Vue中的使用" class="headerlink" title="在Vue中的使用"></a>在Vue中的使用</h2><h3 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h3><p><img src="/单例模式/show.png" width="100%" alt="单例模式图片"></p><p>点击按钮能够新增条目，点击条目能够删除这一行</p><h3 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h3><figure class="highlight gherkin"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">|<span class="string">- src</span></span><br><span class="line">|<span class="string">   </span>|<span class="string">- components</span></span><br><span class="line">|<span class="string">       </span>|<span class="string">- dialog-container</span></span><br><span class="line">|<span class="string">           </span>|<span class="string">- dialog-container.vue</span></span><br><span class="line">|<span class="string">           </span>|<span class="string">- index.js</span></span><br><span class="line">|<span class="string">   </span>|<span class="string">- App.vue</span></span><br><span class="line">|<span class="string">   </span>|<span class="string">- main.js</span></span><br></pre></td></tr></tbody></table></figure><h3 id="具体实现"><a href="#具体实现" class="headerlink" title="具体实现"></a>具体实现</h3><figure class="highlight html"><figcaption><span>vue</span></figcaption><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"><!-- dialog-container.vue --></span></span><br><span class="line"><span class="tag"><<span class="name">template</span>></span></span><br><span class="line">  <span class="tag"><<span class="name">div</span>></span></span><br><span class="line">    <span class="tag"><<span class="name">ul</span>></span></span><br><span class="line">      <span class="tag"><<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">"list in lists"</span> <span class="attr">:key</span>=<span class="string">"list.id"</span> @<span class="attr">click</span>=<span class="string">"del(list.id)"</span>></span>{{ list.content }}<span class="tag"><<span class="name">&#47;li</span>></span></span><br><span class="line">    <span class="tag"><<span class="name">&#47;ul</span>></span></span><br><span class="line">  <span class="tag"><<span class="name">&#47;div</span>></span></span><br><span class="line"><span class="tag"><<span class="name">&#47;template</span>></span></span><br><span class="line"></span><br><span class="line"><span class="tag"><<span class="name">script</span>></span><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> {</span></span><br><span class="line"><span class="undefined">  methods: {</span></span><br><span class="line"><span class="undefined">    del(id) {</span></span><br><span class="line"><span class="javascript">      <span class="keyword">const</span> index = <span class="keyword">this</span>.lists.findIndex(<span class="function"><span class="params">ele</span> =></span> ele.id === id);</span></span><br><span class="line"><span class="actionscript">      <span class="keyword">if</span> (<span class="number">-1</span> !== index) {</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">this</span>.lists.splice(index, <span class="number">1</span>);</span></span><br><span class="line"><span class="undefined">      }</span></span><br><span class="line"><span class="undefined">    }</span></span><br><span class="line"><span class="undefined">  }</span></span><br><span class="line"><span class="undefined">};</span></span><br><span class="line"><span class="handlebars"><span class="xml"><span class="tag"><<span class="name">&#47;script</span>></span></span></span></span><br></pre></td></tr></tbody></table></figure><p>具体单例使用</p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">"vue"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> Container <span class="keyword">from</span> <span class="string">"./dialog-container.vue"</span>;</span><br><span class="line"></span><br><span class="line">Container.installSlot = <span class="function">(<span class="params">(</span>) =></span> {</span><br><span class="line">  <span class="keyword">let</span> [component, lists] = [<span class="literal">null</span>, <span class="literal">null</span>];</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="function">(<span class="params">id, list</span>) =></span> {</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> list === <span class="string">"object"</span> && <span class="keyword">typeof</span> id === <span class="string">"string"</span>) {</span><br><span class="line">      <span class="keyword">if</span> (!component) {</span><br><span class="line">        <span class="keyword">const</span> container = Vue.extend(Container);</span><br><span class="line">        lists = [list];</span><br><span class="line">        component = <span class="keyword">new</span> container({</span><br><span class="line">          data() {</span><br><span class="line">            <span class="keyword">return</span> {</span><br><span class="line">              lists</span><br><span class="line">            };</span><br><span class="line">          }</span><br><span class="line">        });</span><br><span class="line"></span><br><span class="line">        <span class="built_in">document</span>.getElementById(id).appendChild(component.$mount().$el);</span><br><span class="line">      } <span class="keyword">else</span> {</span><br><span class="line">        lists.push(list);</span><br><span class="line">      }</span><br><span class="line">    }</span><br><span class="line">  };</span><br><span class="line">})();</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> {</span><br><span class="line">  install: <span class="function"><span class="params">Vue</span> =></span> {</span><br><span class="line">    Vue.prototype.$dialog = Container.installSlot;</span><br><span class="line">  }</span><br><span class="line">};</span><br></pre></td></tr></tbody></table></figure><p>配置及使用</p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Dialog <span class="keyword">from</span> <span class="string">"./components/dialog-container"</span>;</span><br><span class="line">Vue.use(Dialog);</span><br></pre></td></tr></tbody></table></figure><figure class="highlight html"><figcaption><span>html</span></figcaption><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag"><<span class="name">template</span>></span></span><br><span class="line">  <span class="tag"><<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>></span></span><br><span class="line">    <span class="tag"><<span class="name">div</span> <span class="attr">id</span>=<span class="string">"content"</span>></span></span><br><span class="line">      <span class="tag"><<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"hi('content')"</span>></span>Hellos<span class="tag"><<span class="name">&#47;button</span>></span></span><br><span class="line">    <span class="tag"><<span class="name">&#47;div</span>></span></span><br><span class="line">  <span class="tag"><<span class="name">&#47;div</span>></span></span><br><span class="line"><span class="tag"><<span class="name">&#47;template</span>></span></span><br><span class="line"><span class="tag"><<span class="name">script</span>></span><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> {</span></span><br><span class="line"><span class="actionscript">  name: <span class="string">"App"</span>,</span></span><br><span class="line"><span class="undefined">  methods: {</span></span><br><span class="line"><span class="undefined">    hi(domId) {</span></span><br><span class="line"><span class="javascript">      <span class="keyword">const</span> id = <span class="built_in">Math</span>.random()</span></span><br><span class="line"><span class="undefined">        .toString()</span></span><br><span class="line"><span class="undefined">        .substr(2, 6);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="actionscript">      <span class="comment">// 使用</span></span></span><br><span class="line"><span class="actionscript">      <span class="keyword">this</span>.$dialog(domId, {</span></span><br><span class="line"><span class="undefined">        id,</span></span><br><span class="line"><span class="javascript">        content: <span class="string">`The id is <span class="subst">${id}</span>`</span></span></span><br><span class="line"><span class="undefined">      });</span></span><br><span class="line"><span class="undefined">    }</span></span><br><span class="line"><span class="undefined">  }</span></span><br><span class="line"><span class="undefined">};</span></span><br><span class="line"><span class="handlebars"><span class="xml"><span class="tag"><<span class="name">&#47;script</span>></span></span></span></span><br></pre></td></tr></tbody></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>单例模式其他具体场景不是很清楚，希望以后能够看到其他用法，对于设计模式我也才刚开始看，继续努力。</p><h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><ul><li><a href="http://www.codeceo.com/article/javascript-single-instance.html" target="_blank" rel="noopener">http://www.codeceo.com/article/javascript-single-instance.html</a></li><li><a href="https://solojiang.github.io/2018/04/30/%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F%E5%9C%A8Dialog%E7%B1%BB%E7%BB%84%E4%BB%B6%E4%B8%AD%E7%9A%84%E4%BD%BF%E7%94%A8/" target="_blank" rel="noopener">Solo Jiang’s blog</a></li><li><a href="https://zhuanlan.zhihu.com/p/34754447" target="_blank" rel="noopener">知乎-从 ES6 重新认识 JavaScript 设计模式(一): 单例模式</a></li><li><a href="https://www.youtube.com/watch?v=X7GJ485r20A&list=PL9nxfq1tlKKnsi68A6Gbsv-ip8kRNFK7-&index=2" target="_blank" rel="noopener">YouTube</a></li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      解释单例模式是什么以及单例模式使用的具体场景
    
    </summary>
    
      <category term="JavaScript" scheme="https://zjgyb.github.io/categories/JavaScript/"/>
    
    
      <category term="Vue" scheme="https://zjgyb.github.io/tags/Vue/"/>
    
      <category term="JavaScript" scheme="https://zjgyb.github.io/tags/JavaScript/"/>
    
      <category term="单例模式" scheme="https://zjgyb.github.io/tags/%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/"/>
    
      <category term="设计模式" scheme="https://zjgyb.github.io/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>nodejs实现简易登录注册</title>
    <link href="https://zjgyb.github.io/nodejs%E5%AE%9E%E7%8E%B0%E7%AE%80%E6%98%93%E7%99%BB%E5%BD%95%E6%B3%A8%E5%86%8C.html"/>
    <id>https://zjgyb.github.io/nodejs实现简易登录注册.html</id>
    <published>2019-05-22T14:33:49.000Z</published>
    <updated>2019-05-23T13:13:39.628Z</updated>
    
    <content type="html"><![CDATA[<p><strong>介绍Nodejs登录与注册并实现与MongoDB数据储存与查询</strong></p><a id="more"></a><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>之前一直都有学过Node，但是没怎么上心，然而现在有业务需求同时也希望自己多掌握点技能，因此下定决心学习Node。本文内容还是参考《了不起的Node.js》里面的案例，但只是参考了一部分。</p><p>项目例子采用MVC模式</p><p>项目结构<br></p><figure class="highlight md"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">|- view</span><br><span class="line">|   |- login.pug</span><br><span class="line">|   |- signup.pug</span><br><span class="line">|   |- layout.pug</span><br><span class="line">|- model</span><br><span class="line">|   |- server.js</span><br><span class="line">|- controller</span><br><span class="line">|   |-index.js</span><br><span class="line">|- index.js</span><br></pre></td></tr></tbody></table></figure><p></p><p>所需要的包，其中<code>express-session</code>验证用户信息的。<br></p><figure class="highlight js"><figcaption><span>json</span></figcaption><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">{</span><br><span class="line">  ...</span><br><span class="line">  <span class="string">"dependencies"</span>: {</span><br><span class="line">    <span class="string">"express"</span>: <span class="string">"^4.16.4"</span>,</span><br><span class="line">    <span class="string">"body-parser"</span>: <span class="string">"^1.19.0"</span>,</span><br><span class="line">    <span class="string">"express-session"</span>: <span class="string">"^1.16.1"</span></span><br><span class="line">  }</span><br><span class="line">  ...</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p></p><h2 id="注册"><a href="#注册" class="headerlink" title="注册"></a>注册</h2><h3 id="公共模板"><a href="#公共模板" class="headerlink" title="公共模板"></a>公共模板</h3><figure class="highlight plain"><figcaption><span>pug</span></figcaption><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">doctype 5</span><br><span class="line">html</span><br><span class="line">  head</span><br><span class="line">    title MongoDB example</span><br><span class="line">  body</span><br><span class="line">    h1 My first MongoDB app</span><br><span class="line">    hr</span><br><span class="line">    block body</span><br></pre></td></tr></tbody></table></figure><h3 id="注册界面"><a href="#注册界面" class="headerlink" title="注册界面"></a>注册界面</h3><figure class="highlight plain"><figcaption><span>pug</span></figcaption><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">//- signup.pug</span><br><span class="line">extends layout</span><br><span class="line">block body</span><br><span class="line">  form(action="/signup", method="POST")</span><br><span class="line">    fieldset</span><br><span class="line">      legend Sign up</span><br><span class="line">      p</span><br><span class="line">        label First</span><br><span class="line">        input(name="first", type="text")</span><br><span class="line">      p</span><br><span class="line">        label Last</span><br><span class="line">        input(name="last", type="text")</span><br><span class="line">      p</span><br><span class="line">        label Email</span><br><span class="line">        input(name="email", type="text")</span><br><span class="line">      p</span><br><span class="line">        label Password</span><br><span class="line">        input(name="password", type="text")</span><br><span class="line">      p</span><br><span class="line">        button Submit</span><br><span class="line">      p</span><br><span class="line">        a(href="/") Go back</span><br></pre></td></tr></tbody></table></figure><h3 id="后端代码"><a href="#后端代码" class="headerlink" title="后端代码"></a>后端代码</h3><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// index.js</span></span><br><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>);</span><br><span class="line"><span class="keyword">const</span> app = express();</span><br><span class="line"><span class="keyword">const</span> bodyParser = <span class="built_in">require</span>(<span class="string">'body-parser'</span>);</span><br><span class="line"><span class="keyword">const</span> controller = <span class="built_in">require</span>(<span class="string">'./controller'</span>);</span><br><span class="line"><span class="keyword">const</span> urlencodedParser = bodyParser.urlencoded({ <span class="attr">extended</span>: <span class="literal">false</span> });</span><br><span class="line"></span><br><span class="line">app.get(<span class="string">'/signup'</span>, (req, res) => {</span><br><span class="line">  res.render(<span class="string">'signup'</span>);</span><br><span class="line">});</span><br><span class="line"></span><br><span class="line">app.post(<span class="string">'/signup'</span>, urlencodedParser, controller.postSignUp);</span><br><span class="line"></span><br><span class="line">app.listen(<span class="number">3000</span>, () => {</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'start'</span>);</span><br><span class="line">});</span><br></pre></td></tr></tbody></table></figure><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// controller/index.js</span></span><br><span class="line"><span class="keyword">const</span> model = <span class="built_in">require</span>(<span class="string">'../model/server'</span>);</span><br><span class="line">exports.postSignUp = <span class="function">(<span class="params">req, res</span>) =></span> {</span><br><span class="line">  <span class="keyword">const</span> { first, last, email, password} = req.body;</span><br><span class="line">  <span class="comment">// 交由model来存储数据</span></span><br><span class="line">  model.insert({</span><br><span class="line">    first,</span><br><span class="line">    last,</span><br><span class="line">    email,</span><br><span class="line">    password</span><br><span class="line">  }, (num) => {</span><br><span class="line">    <span class="keyword">if</span> (num === <span class="number">-1</span>) {</span><br><span class="line">      res.redirect(<span class="string">'/error'</span>); <span class="comment">// 这里其实是跳转错误界面，这些细节就不介绍了</span></span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">if</span> (<span class="number">1</span> === num) {</span><br><span class="line">      res.redirect(<span class="string">`/login/<span class="subst">${email}</span>`</span>);</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    }</span><br><span class="line">  })</span><br><span class="line">};</span><br></pre></td></tr></tbody></table></figure><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// model/server.js</span></span><br><span class="line"><span class="keyword">const</span> MongoClient = <span class="built_in">require</span>(<span class="string">"mongodb"</span>).MongoClient;</span><br><span class="line"><span class="keyword">const</span> url = <span class="string">"mongodb://localhost:27017"</span>;</span><br><span class="line"><span class="keyword">const</span> dbName = <span class="string">"student"</span>;</span><br><span class="line"></span><br><span class="line">MongoClient.connect(url, <span class="function"><span class="keyword">function</span>(<span class="params">err, client</span>) </span>{</span><br><span class="line">  <span class="keyword">if</span> (err) <span class="keyword">throw</span> err;</span><br><span class="line">  <span class="keyword">const</span> col = client.db(dbName).collection(<span class="string">"classes"</span>);</span><br><span class="line">  <span class="comment">// 插入数据</span></span><br><span class="line">  exports.insert = <span class="function">(<span class="params">data, next</span>) =></span> {</span><br><span class="line">    col.insertOne(data,</span><br><span class="line">      err => {</span><br><span class="line">        <span class="keyword">if</span> (err) {</span><br><span class="line">          next(<span class="number">-1</span>);</span><br><span class="line">          <span class="keyword">return</span>;</span><br><span class="line">        }</span><br><span class="line">        next(<span class="number">1</span>);</span><br><span class="line">      }</span><br><span class="line">    );</span><br><span class="line">  };</span><br><span class="line">});</span><br></pre></td></tr></tbody></table></figure><h2 id="登录"><a href="#登录" class="headerlink" title="登录"></a>登录</h2><h3 id="登录界面"><a href="#登录界面" class="headerlink" title="登录界面"></a>登录界面</h3><figure class="highlight plain"><figcaption><span>pug</span></figcaption><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">extends layout</span><br><span class="line">block body</span><br><span class="line">  form(action="/login", method="POST")</span><br><span class="line">    fieldset</span><br><span class="line">      legend Log in</span><br><span class="line">      if (signupEmail)</span><br><span class="line">        p Congratulations on signing up! Please login below</span><br><span class="line">      p</span><br><span class="line">        label Email</span><br><span class="line">        input(name="email", type="text", value=signupEmail)</span><br><span class="line">      p</span><br><span class="line">        label Password</span><br><span class="line">        input(name="password", type="text")</span><br><span class="line">      p</span><br><span class="line">        button Submit</span><br><span class="line">      p</span><br><span class="line">        a(href="/") Go back</span><br></pre></td></tr></tbody></table></figure><h3 id="后端代码-1"><a href="#后端代码-1" class="headerlink" title="后端代码"></a>后端代码</h3><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// index.js</span></span><br><span class="line">...</span><br><span class="line">app.get(<span class="string">'/login'</span>, (req, res) => {</span><br><span class="line">  res.render(<span class="string">'login'</span>);</span><br><span class="line">});</span><br><span class="line"></span><br><span class="line">app.get(<span class="string">'/login/:signupEmail'</span>, (req, res) => {</span><br><span class="line">  res.render(<span class="string">"login"</span>, { <span class="attr">signupEmail</span>: req.params.signupEmail });</span><br><span class="line">});</span><br><span class="line"></span><br><span class="line">app.post(<span class="string">"/login"</span>, urlencodedParser, controller.postLogin);</span><br><span class="line">...</span><br></pre></td></tr></tbody></table></figure><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// controller/index.js</span></span><br><span class="line">...</span><br><span class="line">exports.postLogin = <span class="function">(<span class="params">req, res</span>) =></span> {</span><br><span class="line">  <span class="keyword">const</span> { email, password } = req.body;</span><br><span class="line">  model.find({ email, password }, (num, result) => {</span><br><span class="line">    <span class="keyword">if</span> (<span class="number">-1</span> === num) {</span><br><span class="line">      res.redirect(<span class="string">'/error'</span>);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="number">0</span> === num) {</span><br><span class="line">      res.send(<span class="string">'&lt;p&gt;Email or password is not correct. Go back and try again.&lt;/p&gt;'</span>);</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="number">1</span> === num) {</span><br><span class="line">      <span class="comment">// 存储用户信息</span></span><br><span class="line">      req.session.loggedIn = result._id.toString();</span><br><span class="line">      res.redirect(<span class="string">'/'</span>);</span><br><span class="line">    }</span><br><span class="line">  });</span><br><span class="line">}</span><br><span class="line">...</span><br></pre></td></tr></tbody></table></figure><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// model/server.js</span></span><br><span class="line">MongoClient.connect(url, <span class="function"><span class="keyword">function</span>(<span class="params">err, client</span>) </span>{</span><br><span class="line">  ...</span><br><span class="line">  exports.find = <span class="function">(<span class="params">data, next</span>) =></span> {</span><br><span class="line">    col.findOne(</span><br><span class="line">      data,</span><br><span class="line">      (err, result) => {</span><br><span class="line">        <span class="keyword">if</span> (err) {</span><br><span class="line">          next(<span class="number">-1</span>);</span><br><span class="line">          <span class="keyword">return</span>;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">if</span> (!result) {</span><br><span class="line">          next(<span class="number">0</span>);</span><br><span class="line">          <span class="keyword">return</span>;</span><br><span class="line">        }</span><br><span class="line">        next(<span class="number">1</span>, result);</span><br><span class="line">      }</span><br><span class="line">    );</span><br><span class="line">  }</span><br><span class="line">  ...</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h2><p>其实项目中还有logout功能，显示用户功能没有讲，但是这些相对简单，因此就不展开了。</p><p>在登录的时候有一句<code>req.session.loggedIn = result._id.toString();</code>，如果想通过id查询数据，则</p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> ObjectId = <span class="built_in">require</span>(<span class="string">"mongodb"</span>).ObjectId;</span><br><span class="line"><span class="keyword">const</span> ID= req.session.loggedIn;</span><br><span class="line">model.find({<span class="attr">_id</span>: ObjectId(ID)}, (num, result) => {</span><br><span class="line">  <span class="comment">//...</span></span><br><span class="line">});</span><br></pre></td></tr></tbody></table></figure><h2 id="跟新于19-05-23"><a href="#跟新于19-05-23" class="headerlink" title="跟新于19-05-23"></a>跟新于19-05-23</h2><p>使用<code>mongoose</code>替代<code>mongodb</code>保存数据, 具体文档参照<a href="https://mongoosejs.com/" target="_blank" rel="noopener">mongoose官网</a></p><p>主要改动在<code>model/server.js</code></p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// model/server.js</span></span><br><span class="line"><span class="keyword">const</span> mongoose = <span class="built_in">require</span>(<span class="string">"mongoose"</span>);</span><br><span class="line"><span class="keyword">const</span> Schema = mongoose.Schema;</span><br><span class="line">mongoose.connect(<span class="string">"mongodb://localhost/student"</span>, { <span class="attr">useNewUrlParser</span>: <span class="literal">true</span> });</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> personSchema = <span class="keyword">new</span> Schema(</span><br><span class="line">  {</span><br><span class="line">    first: <span class="built_in">String</span>,</span><br><span class="line">    last: <span class="built_in">String</span>,</span><br><span class="line">    email: {</span><br><span class="line">      type: <span class="built_in">String</span>,</span><br><span class="line">      unique: <span class="literal">true</span></span><br><span class="line">    },</span><br><span class="line">    password: {</span><br><span class="line">      type: <span class="built_in">String</span>,</span><br><span class="line">      unique: <span class="literal">true</span></span><br><span class="line">    }</span><br><span class="line">  },</span><br><span class="line">  { <span class="attr">autoIndex</span>: <span class="literal">false</span> }</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> Person = mongoose.model(<span class="string">'classes'</span>, personSchema);</span><br><span class="line"></span><br><span class="line">exports.insert = <span class="function">(<span class="params">data, next</span>) =></span> {</span><br><span class="line">  <span class="keyword">const</span> person = <span class="keyword">new</span> Person(data);</span><br><span class="line">  person.save(<span class="function"><span class="params">err</span> =></span> {</span><br><span class="line">    <span class="keyword">if</span> (err) {</span><br><span class="line">      next(<span class="number">-1</span>);</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    }</span><br><span class="line">    next(<span class="number">1</span>);</span><br><span class="line">  });</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">exports.find = <span class="function">(<span class="params">data, next</span>) =></span> {</span><br><span class="line">  Person.findOne(data, (err, result) => {</span><br><span class="line">    <span class="keyword">if</span> (err) {</span><br><span class="line">      next(<span class="number">-1</span>);</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">if</span> (!result) {</span><br><span class="line">      next(<span class="number">0</span>);</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    }</span><br><span class="line">    next(<span class="number">1</span>, result);</span><br><span class="line">  });</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="补充-1"><a href="#补充-1" class="headerlink" title="补充"></a>补充</h3><p>原来的Mongodb获取ObjectId转变成Mongoose方式</p><div class="note warning"><!-- build time:Sat May 25 2019 09:47:51 GMT+0800 (GMT+08:00) --><p><del>const ObjectId = require(“mongodb”).ObjectId;</del></p><!-- rebuild by neat --></div><div class="note success"><!-- build time:Sat May 25 2019 09:47:51 GMT+0800 (GMT+08:00) --><p>const ObjectId = require(“mongoose”).Types.ObjectId;</p><!-- rebuild by neat --></div><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>总的来说迈出了第一步<span class="github-emoji" style="color: transparent;background:no-repeat url(https://assets-cdn.github.com/images/icons/emoji/unicode/1f603.png?v8) center/contain" data-src="https://assets-cdn.github.com/images/icons/emoji/unicode/1f603.png?v8">😃</span> <span class="github-emoji" style="color: transparent;background:no-repeat url(https://assets-cdn.github.com/images/icons/emoji/unicode/1f603.png?v8) center/contain" data-src="https://assets-cdn.github.com/images/icons/emoji/unicode/1f603.png?v8">😃</span> <span class="github-emoji" style="color: transparent;background:no-repeat url(https://assets-cdn.github.com/images/icons/emoji/unicode/1f603.png?v8) center/contain" data-src="https://assets-cdn.github.com/images/icons/emoji/unicode/1f603.png?v8">😃</span></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      nodejs实现登录注册
    
    </summary>
    
      <category term="Node" scheme="https://zjgyb.github.io/categories/Node/"/>
    
    
      <category term="login" scheme="https://zjgyb.github.io/tags/login/"/>
    
      <category term="nodejs" scheme="https://zjgyb.github.io/tags/nodejs/"/>
    
      <category term="express" scheme="https://zjgyb.github.io/tags/express/"/>
    
      <category term="body-parser" scheme="https://zjgyb.github.io/tags/body-parser/"/>
    
      <category term="express-session" scheme="https://zjgyb.github.io/tags/express-session/"/>
    
      <category term="signp" scheme="https://zjgyb.github.io/tags/signp/"/>
    
  </entry>
  
  <entry>
    <title>websocket交互</title>
    <link href="https://zjgyb.github.io/websocket%E4%BA%A4%E4%BA%92.html"/>
    <id>https://zjgyb.github.io/websocket交互.html</id>
    <published>2019-05-19T08:23:13.000Z</published>
    <updated>2019-05-19T08:30:29.344Z</updated>
    
    <content type="html"><![CDATA[<p>介绍 websocket 的使用<br>后台(nodejs) ws 包与 websocket 的对接</p><a id="more"></a><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>之前其实已经写过相关的内容，<a href="https://zjgyb.github.io/socket-io%E5%88%9D%E5%B0%9D%E8%AF%95.html">socket.io</a>能够很好的实现服务器与客户端之间的双向连接，今天只是对原生的 websocket 进行简单的介绍，当你不需要实现太复杂的功能时可以考虑使用这种方式，当然这也是对最近学 nodejs 的记录。</p><p>本文参考《了不起的 node.js》，但是书中<code>websocket.io</code>的包在我的 node 版本<code>v10.13.0</code>中会报错，而且包很长时间没有跟新，因此我选择了<code>ws</code>作为我的代码实例。</p><h2 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h2><video width="100%" height="240" controls><br>  <source src="websocket交互/show.mp4" type="video/mp4"><br></video><p>其实是两个页面的转换，每个界面控制一个手势，但是能看到其他界面的手势</p><h2 id="初始化项目"><a href="#初始化项目" class="headerlink" title="初始化项目"></a>初始化项目</h2><p>后端使用了两个包，<a href="https://www.npmjs.com/package/express" target="_blank" rel="noopener">express</a>和<a href="https://www.npmjs.com/package/ws" target="_blank" rel="noopener">ws</a>，如果想要看具体用法请看他们的相关介绍</p><figure class="highlight shell"><figcaption><span>shell</span></figcaption><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">yarn init -y</span><br><span class="line">yarn add express</span><br><span class="line">yarn add ws</span><br></pre></td></tr></tbody></table></figure><h2 id="服务端代码"><a href="#服务端代码" class="headerlink" title="服务端代码"></a>服务端代码</h2><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">"express"</span>);</span><br><span class="line"><span class="keyword">const</span> app = express();</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> WebSocket = <span class="built_in">require</span>(<span class="string">"ws"</span>);</span><br><span class="line"><span class="comment">// 注意接听的端口和当前服务器启动的端口不能一致，否则会报错</span></span><br><span class="line"><span class="keyword">const</span> ws = <span class="keyword">new</span> WebSocket.Server({ <span class="attr">port</span>: <span class="number">3000</span> });</span><br><span class="line"></span><br><span class="line"><span class="comment">// 保存各个界面的手势位置</span></span><br><span class="line"><span class="keyword">const</span> positions = {};</span><br><span class="line"><span class="keyword">let</span> total = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">ws.on(<span class="string">"connection"</span>, socket => {</span><br><span class="line">  socket.id = ++total;</span><br><span class="line"></span><br><span class="line">  socket.on(<span class="string">"message"</span>, msg => {</span><br><span class="line">    <span class="keyword">let</span> pos = <span class="built_in">JSON</span>.parse(msg);</span><br><span class="line">    positions[socket.id] = pos;</span><br><span class="line">    broadcast(<span class="built_in">JSON</span>.stringify({ <span class="attr">type</span>: <span class="string">"position"</span>, pos, <span class="attr">id</span>: socket.id }));</span><br><span class="line">  });</span><br><span class="line"></span><br><span class="line">  socket.on(<span class="string">"close"</span>, () => {</span><br><span class="line">    <span class="keyword">delete</span> positions[socket.id];</span><br><span class="line">    broadcast(<span class="built_in">JSON</span>.stringify({ <span class="attr">type</span>: <span class="string">"disconnect"</span>, <span class="attr">id</span>: socket.id }));</span><br><span class="line">  });</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">broadcast</span>(<span class="params">msg</span>) </span>{</span><br><span class="line">    <span class="keyword">const</span> id = <span class="built_in">JSON</span>.parse(msg).id;</span><br><span class="line">    ws.clients.forEach(<span class="function">(<span class="params">client, index</span>) =></span> {</span><br><span class="line">      <span class="comment">// 广播功能，但是不广播当前连接的客户端</span></span><br><span class="line">      <span class="keyword">if</span> (client.readyState === WebSocket.OPEN && index !== id) {</span><br><span class="line">        client.send(msg);</span><br><span class="line">      }</span><br><span class="line">    });</span><br><span class="line">  }</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 一开始连接的时候把其他界面的手势位置发送到当前客户端</span></span><br><span class="line">  socket.send(<span class="built_in">JSON</span>.stringify(positions));</span><br><span class="line">});</span><br><span class="line"></span><br><span class="line">app.use(express.static(<span class="string">"public"</span>));</span><br><span class="line">app.listen(<span class="number">4000</span>, () => {</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"start"</span>);</span><br><span class="line">});</span><br></pre></td></tr></tbody></table></figure><h2 id="客户端主要代码"><a href="#客户端主要代码" class="headerlink" title="客户端主要代码"></a>客户端主要代码</h2><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.onload = <span class="function"><span class="params">()</span> =></span> {</span><br><span class="line">  <span class="keyword">const</span> ws = <span class="keyword">new</span> WebSocket(<span class="string">"ws://localhost:3000"</span>);</span><br><span class="line"></span><br><span class="line">  ws.onopen = <span class="function"><span class="params">ev</span> =></span> {</span><br><span class="line">    <span class="built_in">document</span>.addEventListener(<span class="string">"mousemove"</span>, fun);</span><br><span class="line">  };</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 为了一开始能够加载其他界面的手势图片</span></span><br><span class="line">  <span class="keyword">let</span> initialized;</span><br><span class="line"></span><br><span class="line">  ws.onmessage = <span class="function">(<span class="params">ev</span>) =></span> {</span><br><span class="line">    <span class="keyword">const</span> obj = <span class="built_in">JSON</span>.parse(ev.data);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!initialized) {</span><br><span class="line">      initialized = <span class="literal">true</span>;</span><br><span class="line">      <span class="comment">// 首次加载其他界面的图片</span></span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">let</span> id <span class="keyword">in</span> obj) {</span><br><span class="line">        move(id, obj[id]);</span><br><span class="line">      }</span><br><span class="line">    } <span class="keyword">else</span> {</span><br><span class="line">      <span class="keyword">if</span> (<span class="string">"disconnect"</span> === obj.type) {</span><br><span class="line">        remove(obj.id);</span><br><span class="line">      } <span class="keyword">else</span> {</span><br><span class="line">        move(obj.id, obj.pos);</span><br><span class="line">      }</span><br><span class="line">    }</span><br><span class="line">  };</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">fun</span>(<span class="params">ev</span>) </span>{</span><br><span class="line">    ws.send(<span class="built_in">JSON</span>.stringify({ <span class="attr">x</span>: ev.clientX, <span class="attr">y</span>: ev.clientY }));</span><br><span class="line">  }</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">move</span>(<span class="params">id, pos</span>) </span>{</span><br><span class="line">    <span class="keyword">let</span> cursor = <span class="built_in">document</span>.getElementById(<span class="string">"cursor-"</span> + id);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!cursor) {</span><br><span class="line">      cursor = <span class="built_in">document</span>.createElement(<span class="string">"img"</span>);</span><br><span class="line">      cursor.id = <span class="string">"cursor-"</span> + id;</span><br><span class="line">      cursor.src = <span class="string">"/cursor.png"</span>;</span><br><span class="line">      cursor.style.position = <span class="string">"absolute"</span>;</span><br><span class="line">      <span class="built_in">document</span>.body.appendChild(cursor);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    cursor.style.left = pos.x + <span class="string">"px"</span>;</span><br><span class="line">    cursor.style.top = pos.y + <span class="string">"px"</span>;</span><br><span class="line">  }</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">remove</span>(<span class="params">id</span>) </span>{</span><br><span class="line">    <span class="keyword">const</span> cursor = <span class="built_in">document</span>.getElementById(<span class="string">"cursor-"</span> + id);</span><br><span class="line">    cursor.parentNode.removeChild(cursor);</span><br><span class="line">  }</span><br><span class="line">};</span><br></pre></td></tr></tbody></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>在有需要的时候就可以轻松的使用它了。<span class="github-emoji" style="color: transparent;background:no-repeat url(https://assets-cdn.github.com/images/icons/emoji/unicode/1f603.png?v8) center/contain" data-src="https://assets-cdn.github.com/images/icons/emoji/unicode/1f603.png?v8">😃</span> <span class="github-emoji" style="color: transparent;background:no-repeat url(https://assets-cdn.github.com/images/icons/emoji/unicode/1f603.png?v8) center/contain" data-src="https://assets-cdn.github.com/images/icons/emoji/unicode/1f603.png?v8">😃</span> <span class="github-emoji" style="color: transparent;background:no-repeat url(https://assets-cdn.github.com/images/icons/emoji/unicode/1f603.png?v8) center/contain" data-src="https://assets-cdn.github.com/images/icons/emoji/unicode/1f603.png?v8">😃</span></p><p>完</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      关于websocket的简单教程
    
    </summary>
    
      <category term="Node" scheme="https://zjgyb.github.io/categories/Node/"/>
    
    
      <category term="nodejs" scheme="https://zjgyb.github.io/tags/nodejs/"/>
    
      <category term="express" scheme="https://zjgyb.github.io/tags/express/"/>
    
      <category term="websocket" scheme="https://zjgyb.github.io/tags/websocket/"/>
    
      <category term="ws" scheme="https://zjgyb.github.io/tags/ws/"/>
    
  </entry>
  
  <entry>
    <title>regular-expression.md</title>
    <link href="https://zjgyb.github.io/regular-express-1.html"/>
    <id>https://zjgyb.github.io/regular-express-1.html</id>
    <published>2019-03-24T07:17:02.000Z</published>
    <updated>2019-05-18T04:39:59.815Z</updated>
    
    <content type="html"><![CDATA[<div class="note success"><!-- build time:Sat May 25 2019 09:47:51 GMT+0800 (GMT+08:00) --><p>介绍正则表达式的语法<br>列举一些用过的正则表达式</p><!-- rebuild by neat --></div><a id="more"></a><h2 id="正则表达式语法"><a href="#正则表达式语法" class="headerlink" title="正则表达式语法"></a>正则表达式语法</h2><h3 id="search"><a href="#search" class="headerlink" title="search"></a>search</h3><p>用于检索字符串中指定的子字符串，或检索与正则表达式相匹配的子字符串，并返回子串的起始位置。</p><h3 id="replace"><a href="#replace" class="headerlink" title="replace"></a>replace</h3><p>用于在字符串中用一些字符替换另一些字符，或替换一个与正则表达式匹配的子串。</p><h3 id="test"><a href="#test" class="headerlink" title="test"></a>test</h3><p>如果字符串中含有匹配的文本，则返回 true，否则返回 false。</p><h3 id="exec"><a href="#exec" class="headerlink" title="exec"></a>exec</h3><p>返回一个数组，如果没有时返回null。有lastIndex等方法，可以检查下一个字符出现的位置。</p><h3 id="split"><a href="#split" class="headerlink" title="split"></a>split</h3><p>分割正则匹配的字符</p><h3 id="元字符"><a href="#元字符" class="headerlink" title="元字符"></a>元字符</h3><blockquote><p><code>.</code>代表查找单个字符，除了换行和行结束符<br><code>\b</code>匹配单词边界 border boundary<br><code>\B</code>匹配非单词边界<br><code>\d</code>查找数字 digital<br><code>\D</code>查找非数字<br><code>\s</code> 查找空白符spacing<br><code>\S</code><br><code>\w</code>查找单词字符 word 数字+字母+下划线+汉字<br><code>\W</code></p></blockquote><h3 id="量词"><a href="#量词" class="headerlink" title="量词"></a>量词</h3><blockquote><p><code>n?</code>匹配0个或1个字符串<br><code>n*</code>匹配0个或者多个n的字符串<br><code>n+</code>匹配1个或者多个n的字符串<br><code>n{X}</code>匹配包含X个n的序列的字符串<br><code>n{X,}</code>匹配包含X个或更多个n的序列的字符串<br><code>n{X,Y}</code>匹配至少出现X至多出现Y个你的字符串<br><code>n$</code>匹配任何n结尾的字符<br><code>^n</code>匹配任何n开头的字符</p></blockquote><h2 id="使用过的正则表达式"><a href="#使用过的正则表达式" class="headerlink" title="使用过的正则表达式"></a>使用过的正则表达式</h2><h3 id="email"><a href="#email" class="headerlink" title="email"></a>email</h3><figure class="highlight javascript"><figcaption><span>js</span></figcaption><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/\b[A-Z0<span class="number">-9.</span>_%+-]+@[A-Z0<span class="number">-9.</span>-]+\.[A-Z]{<span class="number">2</span>,}\b/i</span><br></pre></td></tr></tbody></table></figure><h3 id="正整数和零"><a href="#正整数和零" class="headerlink" title="正整数和零"></a>正整数和零</h3><figure class="highlight javascript"><figcaption><span>js</span></figcaption><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/^[<span class="number">1</span><span class="number">-9</span>]\d*$|^<span class="number">0</span>{<span class="number">1</span>}$/i</span><br></pre></td></tr></tbody></table></figure><h3 id="小数"><a href="#小数" class="headerlink" title="小数"></a>小数</h3><figure class="highlight javascript"><figcaption><span>js</span></figcaption><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/^[<span class="number">1</span><span class="number">-9</span>]\d*\.\d+$/i</span><br></pre></td></tr></tbody></table></figure><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;div class=&quot;note success&quot;&gt;&lt;!-- build time:Sat May 25 2019 09:47:51 GMT+0800 (GMT+08:00) --&gt;&lt;p&gt;介绍正则表达式的语法&lt;br&gt;列举一些用过的正则表达式&lt;/p&gt;&lt;!-- rebuild by neat --&gt;&lt;/div&gt;
    
    </summary>
    
      <category term="JavaScript" scheme="https://zjgyb.github.io/categories/JavaScript/"/>
    
    
      <category term="regular-expression" scheme="https://zjgyb.github.io/tags/regular-expression/"/>
    
      <category term="Js" scheme="https://zjgyb.github.io/tags/Js/"/>
    
  </entry>
  
  <entry>
    <title>vue-cli3使用mock</title>
    <link href="https://zjgyb.github.io/vue-cli3%E4%BD%BF%E7%94%A8mock.html"/>
    <id>https://zjgyb.github.io/vue-cli3使用mock.html</id>
    <published>2019-01-28T13:56:22.000Z</published>
    <updated>2019-01-28T13:57:37.027Z</updated>
    
    <content type="html"><![CDATA[<div class="note primary"><!-- build time:Sat May 25 2019 09:47:51 GMT+0800 (GMT+08:00) --><p>本文介绍了关于Vue CLI 3如何配置mock数据</p><!-- rebuild by neat --></div><a id="more"></a><ol><li><p>在根目录新建<code>vue.config.js</code>文件和<code>mock</code>文件夹</p></li><li><p>在mock文件夹中存放数据，例如<code>index.json</code></p></li><li><p><code>vue.config.js</code>进行配置</p></li></ol><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> mockIndex = <span class="built_in">require</span>(<span class="string">'./mock/index.json'</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = {</span><br><span class="line">  devServer: {</span><br><span class="line">    port: <span class="number">8080</span>,</span><br><span class="line">    before(app) {</span><br><span class="line">      app.get(<span class="string">'/api/index'</span>, (req, res) => {</span><br><span class="line">        res.json(mockIndex);</span><br><span class="line">      });</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">};</span><br></pre></td></tr></tbody></table></figure><ol start="4"><li>如何调用</li></ol><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">'axios'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> {</span><br><span class="line">  name: <span class="string">'home'</span>,</span><br><span class="line">  data() {</span><br><span class="line">    <span class="keyword">return</span> {</span><br><span class="line">      info: <span class="literal">null</span></span><br><span class="line">    }</span><br><span class="line">  },</span><br><span class="line">  mounted() {</span><br><span class="line">    axios</span><br><span class="line">      .get(<span class="string">'/api/index'</span>)</span><br><span class="line">      .then(<span class="function"><span class="params">res</span> =></span> { <span class="keyword">this</span>.info = res })</span><br><span class="line">  },</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;div class=&quot;note primary&quot;&gt;&lt;!-- build time:Sat May 25 2019 09:47:51 GMT+0800 (GMT+08:00) --&gt;&lt;p&gt;本文介绍了关于Vue CLI 3如何配置mock数据&lt;/p&gt;&lt;!-- rebuild by neat --&gt;&lt;/div&gt;
    
    </summary>
    
      <category term="Vue" scheme="https://zjgyb.github.io/categories/Vue/"/>
    
    
      <category term="Vue" scheme="https://zjgyb.github.io/tags/Vue/"/>
    
      <category term="Vue CLI 3" scheme="https://zjgyb.github.io/tags/Vue-CLI-3/"/>
    
      <category term="mock" scheme="https://zjgyb.github.io/tags/mock/"/>
    
  </entry>
  
  <entry>
    <title>python学习笔记（一）</title>
    <link href="https://zjgyb.github.io/python%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%80%EF%BC%89.html"/>
    <id>https://zjgyb.github.io/python学习笔记（一）.html</id>
    <published>2018-12-15T02:03:02.000Z</published>
    <updated>2018-12-15T02:04:13.146Z</updated>
    
    <content type="html"><![CDATA[<p>python与js比少了声明，少了大括号，少了分号，多了必要层级。<br><a id="more"></a></p><h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><p>只需要直接赋值就可以，前面不需要任何声明，可以用<code>print(variable)</code>查看变量。例如：</p><figure class="highlight python"><figcaption><span>python</span></figcaption><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="number">1</span></span><br><span class="line">b = <span class="string">'string'</span></span><br><span class="line">print(a, b) <span class="comment"># 1 string</span></span><br></pre></td></tr></tbody></table></figure><h2 id="If-Else"><a href="#If-Else" class="headerlink" title="If-Else"></a>If-Else</h2><figure class="highlight python"><figcaption><span>python</span></figcaption><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mark = <span class="number">65</span></span><br><span class="line"><span class="keyword">if</span> mark < <span class="number">60</span>:</span><br><span class="line">    print(<span class="string">'你挂了！'</span>)</span><br><span class="line"><span class="keyword">elif</span> mark < <span class="number">90</span>:</span><br><span class="line">    print(<span class="string">'你通过了！'</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">'你很优秀！'</span>)</span><br></pre></td></tr></tbody></table></figure><h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><h3 id="最简单的形式："><a href="#最简单的形式：" class="headerlink" title="最简单的形式："></a>最简单的形式：</h3><figure class="highlight python"><figcaption><span>python</span></figcaption><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">function1</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">'a'</span>)</span><br><span class="line">function1() <span class="comment"># a</span></span><br></pre></td></tr></tbody></table></figure><h3 id="参数形式"><a href="#参数形式" class="headerlink" title="参数形式"></a>参数形式</h3><figure class="highlight python"><figcaption><span>python</span></figcaption><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">function2</span><span class="params">(num)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> num ** <span class="number">2</span></span><br><span class="line">function2(<span class="number">5</span>) <span class="comment"># 25</span></span><br></pre></td></tr></tbody></table></figure><h2 id="List"><a href="#List" class="headerlink" title="List"></a>List</h2><p>等同于其他语言的数组,比如js</p><figure class="highlight python"><figcaption><span>python</span></figcaption><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a = [<span class="number">1</span>, <span class="string">'a'</span>, <span class="literal">True</span>]</span><br></pre></td></tr></tbody></table></figure><h3 id="append——把一项数据添加到数组最后面"><a href="#append——把一项数据添加到数组最后面" class="headerlink" title="append——把一项数据添加到数组最后面"></a>append——把一项数据添加到数组最后面</h3><p>类似于js的push</p><figure class="highlight python"><figcaption><span>python</span></figcaption><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a = [<span class="number">1</span>]</span><br><span class="line">a.append(<span class="string">'a'</span>)</span><br><span class="line">print(a) <span class="comment"># [1, 'a']</span></span><br></pre></td></tr></tbody></table></figure><h3 id="pop——删除数组最后一项"><a href="#pop——删除数组最后一项" class="headerlink" title="pop——删除数组最后一项"></a>pop——删除数组最后一项</h3><figure class="highlight python"><figcaption><span>python</span></figcaption><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a = [<span class="number">1</span>, <span class="string">'a'</span>]</span><br><span class="line">a.pop()</span><br><span class="line">print(a) <span class="comment"># [1]</span></span><br></pre></td></tr></tbody></table></figure><h2 id="for循环"><a href="#for循环" class="headerlink" title="for循环"></a>for循环</h2><figure class="highlight python"><figcaption><span>python</span></figcaption><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">b = [<span class="number">20</span>, <span class="number">10</span>, <span class="number">5</span>]</span><br><span class="line">total = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> e <span class="keyword">in</span> b:</span><br><span class="line">    total += e</span><br><span class="line">print(total)</span><br></pre></td></tr></tbody></table></figure><h2 id="while循环"><a href="#while循环" class="headerlink" title="while循环"></a>while循环</h2><figure class="highlight python"><figcaption><span>python</span></figcaption><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">##############</span></span><br><span class="line"><span class="comment"># total = 0</span></span><br><span class="line"><span class="comment"># for i in range(1, 5):</span></span><br><span class="line"><span class="comment">#     total += i</span></span><br><span class="line"><span class="comment"># print(total)</span></span><br><span class="line"><span class="comment">##############</span></span><br><span class="line">total2 = <span class="number">0</span></span><br><span class="line">j = <span class="number">1</span></span><br><span class="line"><span class="keyword">while</span> j < <span class="number">5</span>:</span><br><span class="line">    total2 += j</span><br><span class="line">    j += <span class="number">1</span></span><br><span class="line">print(total2)</span><br></pre></td></tr></tbody></table></figure><h2 id="dictionary"><a href="#dictionary" class="headerlink" title="dictionary"></a>dictionary</h2><p>等同于其它例如js的json</p><figure class="highlight python"><figcaption><span>python</span></figcaption><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">d = { <span class="string">"George"</span>: <span class="number">24</span>, <span class="string">"Tom"</span>: <span class="number">32</span> }</span><br><span class="line">d[<span class="string">"George"</span>] = <span class="number">25</span></span><br><span class="line"><span class="keyword">for</span> key, value <span class="keyword">in</span> d.items():</span><br><span class="line">    print(<span class="string">"key:"</span>, key)</span><br><span class="line">    print(<span class="string">"value:"</span>, value)</span><br></pre></td></tr></tbody></table></figure><h2 id="class和object"><a href="#class和object" class="headerlink" title="class和object"></a>class和object</h2><figure class="highlight python"><figcaption><span>python</span></figcaption><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Robot</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name, color, weight)</span>:</span></span><br><span class="line">        self.name = name</span><br><span class="line">        self.color = color</span><br><span class="line">        self.weight = weight</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">introduce_self</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">"My name is "</span> + self.name)</span><br><span class="line"></span><br><span class="line">r1 = Robot(<span class="string">"Tom"</span>, <span class="string">"red"</span>, <span class="number">70</span>)</span><br><span class="line">r1.introduce_self()</span><br></pre></td></tr></tbody></table></figure><h2 id="Boolean"><a href="#Boolean" class="headerlink" title="Boolean"></a>Boolean</h2><figure class="highlight python"><figcaption><span>python</span></figcaption><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">type(<span class="literal">True</span>)</span><br><span class="line">type(<span class="literal">False</span>)</span><br></pre></td></tr></tbody></table></figure><h2 id="list-comprehension"><a href="#list-comprehension" class="headerlink" title="list comprehension"></a>list comprehension</h2><figure class="highlight python"><figcaption><span>python</span></figcaption><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a = [x ** <span class="number">2</span> <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">6</span>, <span class="number">0</span>, <span class="number">-1</span>)]</span><br></pre></td></tr></tbody></table></figure><h2 id="set"><a href="#set" class="headerlink" title="set"></a>set</h2><figure class="highlight python"><figcaption><span>python</span></figcaption><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">a = set()</span><br><span class="line">a.add(<span class="number">1</span>)</span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> a:</span><br><span class="line">    print(x)</span><br></pre></td></tr></tbody></table></figure><h2 id="参考视频"><a href="#参考视频" class="headerlink" title="参考视频"></a>参考视频</h2><p><a href="https://www.youtube.com/watch?v=Z1Yd7upQsXY&index=1&list=PLBZBJbE_rGRWeh5mIBhD-hhDwSEDxogDg" target="_blank" rel="noopener">Youtube</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;python与js比少了声明，少了大括号，少了分号，多了必要层级。&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="python" scheme="https://zjgyb.github.io/categories/python/"/>
    
    
      <category term="python" scheme="https://zjgyb.github.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>stopPropagation和preventDefault的区别</title>
    <link href="https://zjgyb.github.io/stop.html"/>
    <id>https://zjgyb.github.io/stop.html</id>
    <published>2018-11-26T09:09:51.000Z</published>
    <updated>2018-11-26T09:11:56.676Z</updated>
    
    <content type="html"><![CDATA[<div class="note primary"><!-- build time:Sat May 25 2019 09:47:51 GMT+0800 (GMT+08:00) --><p>之前看过stopPropagation和preventDefault的区别，然而当我再次遇到的时候已经忘了两者的区别，因此我需要写一篇关于两者区别的文章，以便理解以及之后忘记时能够通过阅读这篇文章回忆起来。</p><!-- rebuild by neat --></div><a id="more"></a><h2 id="stopPropagation"><a href="#stopPropagation" class="headerlink" title="stopPropagation"></a>stopPropagation</h2><blockquote><p>阻止捕获和冒泡阶段中当前事件的进一步传播。</p></blockquote><h2 id="preventDefault"><a href="#preventDefault" class="headerlink" title="preventDefault"></a>preventDefault</h2><blockquote><p>阻止浏览器做出默认操作。</p></blockquote><h2 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h2><iframe id="cp_embed_eQKLXo" src="//codepen.io/zjgyb/embed/eQKLXo?height=500&theme-id=33713&slug-hash=eQKLXo&default-tab=js,result&embed-version=2" scrolling="no" frameborder="no" height="500" allowtransparency="true" allowfullscreen="true" class="cp_embed_iframe" style="width: 100%; overflow: hidden;"></iframe><p>从上面例子可以看出<code>event.stopPropagation()</code>阻止了子元素的冒泡，而<code>event.preventDefault</code>则是阻止了checkbox的点击确认事件</p><h2 id="参考教程"><a href="#参考教程" class="headerlink" title="参考教程"></a>参考教程</h2><ul><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Event/stopPropagation" target="_blank" rel="noopener">stopPropagation-MDN</a></li><li><a href="https://stackoverflow.com/questions/5963669/whats-the-difference-between-event-stoppropagation-and-event-preventdefault" target="_blank" rel="noopener">Stackoverflow</a></li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;div class=&quot;note primary&quot;&gt;&lt;!-- build time:Sat May 25 2019 09:47:51 GMT+0800 (GMT+08:00) --&gt;&lt;p&gt;之前看过stopPropagation和preventDefault的区别，然而当我再次遇到的时候已经忘了两者的区别，因此我需要写一篇关于两者区别的文章，以便理解以及之后忘记时能够通过阅读这篇文章回忆起来。&lt;/p&gt;&lt;!-- rebuild by neat --&gt;&lt;/div&gt;
    
    </summary>
    
      <category term="JavaScript" scheme="https://zjgyb.github.io/categories/JavaScript/"/>
    
    
      <category term="js" scheme="https://zjgyb.github.io/tags/js/"/>
    
      <category term="stopPropagation" scheme="https://zjgyb.github.io/tags/stopPropagation/"/>
    
      <category term="preventDefault" scheme="https://zjgyb.github.io/tags/preventDefault/"/>
    
  </entry>
  
  <entry>
    <title>css变量</title>
    <link href="https://zjgyb.github.io/css%E5%8F%98%E9%87%8F.html"/>
    <id>https://zjgyb.github.io/css变量.html</id>
    <published>2018-11-24T13:06:19.000Z</published>
    <updated>2018-11-24T13:07:24.648Z</updated>
    
    <content type="html"><![CDATA[<div class="note primary"><!-- build time:Sat May 25 2019 09:47:51 GMT+0800 (GMT+08:00) --><p>学过 SASS(LESS)等 CSS 预编译工具我们知道它们可以使用变量，但是 CSS 中也可以使用变量，它有很强的实用性。</p><!-- rebuild by neat --></div><a id="more"></a><h2 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h2><p>声明变量时需要加在变量名前面加上<code>--</code>，在使用变量时使用<code>var(--name)</code>。</p><h2 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h2><p>局部</p><figure class="highlight css"><figcaption><span>css</span></figcaption><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">element</span> {</span><br><span class="line">  <span class="attribute">--main-color</span>: <span class="number">#000</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">element</span> {</span><br><span class="line">  <span class="attribute">color</span>: <span class="built_in">var</span>(--main-color);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>全局</p><figure class="highlight css"><figcaption><span>css</span></figcaption><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-pseudo">:root</span> {</span><br><span class="line">  <span class="attribute">--main-bg-color</span>: <span class="number">#fff</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.content</span> {</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="built_in">var</span>(--main-bg-color);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="结合-js-使用"><a href="#结合-js-使用" class="headerlink" title="结合 js 使用"></a>结合 js 使用</h2><p>当我们需要有各种主题时我们需要修改 CSS 变量来达到效果，而修改 CSS 变量需要结合 JS 来使用。</p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> root = <span class="built_in">document</span>.querySelector(<span class="string">":root"</span>);</span><br><span class="line">element.addEventListener(<span class="string">"click"</span>, event => {</span><br><span class="line">  root.style.setProperty(<span class="string">"--theme-color"</span>, event.target.style.background);</span><br><span class="line">});</span><br></pre></td></tr></tbody></table></figure><h2 id="参考教程"><a href="#参考教程" class="headerlink" title="参考教程"></a>参考教程</h2><ul><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/Using_CSS_variables" target="_blank" rel="noopener">MDN</a></li><li><a href="http://www.ruanyifeng.com/blog/2017/05/css-variables.html" target="_blank" rel="noopener">阮一峰</a></li><li><a href="https://www.zhangxinxu.com/wordpress/2016/11/css-css3-variables-var/" target="_blank" rel="noopener">张鑫旭</a></li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;div class=&quot;note primary&quot;&gt;&lt;!-- build time:Sat May 25 2019 09:47:51 GMT+0800 (GMT+08:00) --&gt;&lt;p&gt;学过 SASS(LESS)等 CSS 预编译工具我们知道它们可以使用变量，但是 CSS 中也可以使用变量，它有很强的实用性。&lt;/p&gt;&lt;!-- rebuild by neat --&gt;&lt;/div&gt;
    
    </summary>
    
      <category term="CSS" scheme="https://zjgyb.github.io/categories/CSS/"/>
    
    
      <category term="css变量" scheme="https://zjgyb.github.io/tags/css%E5%8F%98%E9%87%8F/"/>
    
  </entry>
  
  <entry>
    <title>socket.io初尝试</title>
    <link href="https://zjgyb.github.io/socket-io%E5%88%9D%E5%B0%9D%E8%AF%95.html"/>
    <id>https://zjgyb.github.io/socket-io初尝试.html</id>
    <published>2018-11-16T13:06:33.000Z</published>
    <updated>2018-11-16T13:10:57.745Z</updated>
    
    <content type="html"><![CDATA[<div class="note primary"><!-- build time:Sat May 25 2019 09:47:51 GMT+0800 (GMT+08:00) --><p>socket-io 能够实现实时、双向、基于事件通讯。它能够在平台、浏览器、设备中运行，并且关注于它的可靠性与速度。</p><!-- rebuild by neat --></div><a id="more"></a><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>说起 socket.io，我一下想起的是 QQ，虽然我没有去了解过 QQ 是怎么通讯的，然而看到这个框架，我就对它产生了兴趣，想去实现多人在线通讯。之前看到过有人用这个看法智能机器人，也就是你问问题后通过你的相关字来回答你的问题。我是通过<a href="https://socket.io/" target="_blank" rel="noopener">官网</a>和<a href="https://www.youtube.com/watch?v=vQjiN8Qgs3c&list=PL4cUxeGkcC9i4V-_ZVwLmOusj8YAUhj_9&index=1" target="_blank" rel="noopener">youtube</a>上的视频来学习这一框架。</p><h2 id="实现效果"><a href="#实现效果" class="headerlink" title="实现效果"></a>实现效果</h2><p><img src="/images/soket-io.gif" alt="soket-io"></p><h2 id="语法讲解"><a href="#语法讲解" class="headerlink" title="语法讲解"></a>语法讲解</h2><p>因为服务器和浏览器所对应有两套代码，因此，所用的代码会存在差异，后端采用的<code>express</code>。</p><h3 id="以下是-express-中的代码"><a href="#以下是-express-中的代码" class="headerlink" title="以下是 express 中的代码"></a>以下是 express 中的代码</h3><p><code>io.on('connection', fun)</code>是当设备访问时建立连接，通常的用法是：</p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">io.on(<span class="string">"connection"</span>, socket => {</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">});</span><br></pre></td></tr></tbody></table></figure><p><code>socket.on('name', fun)</code>是当浏览器需要传值的时候建立的连接，并且返回相应事件，通常的用法是：</p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 这个函数包含在上一函数之中，其中name自己取</span></span><br><span class="line">socket.on(<span class="string">"name"</span>, data => {</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">});</span><br></pre></td></tr></tbody></table></figure><p><code>io.emit('name', fun)</code>是在<code>socket.on()</code>之中需要从服务器返回信息给浏览器，浏览器根据传回的数据进行相应的修改，通常的用法是：</p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">io.emit(<span class="string">"chat message"</span>, data);</span><br></pre></td></tr></tbody></table></figure><p><code>io.broadcast.emit('name', fun)</code>跟<code>io.emit()</code>类似，不同的是它会向其他用户发送消息，这在当某一个人上线时提醒其他人的时候发挥作用</p><h3 id="以下是浏览器方面的代码"><a href="#以下是浏览器方面的代码" class="headerlink" title="以下是浏览器方面的代码"></a>以下是浏览器方面的代码</h3><p>最简单的用法:</p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 先引入包，然后实例化，这样其实就简单的应用起来了</span></span><br><span class="line"><script src=<span class="string">"https://cdnjs.cloudflare.com/ajax/libs/socket.io/2.1.1/socket.io.dev.js"</span> />;</span><br><span class="line"><span class="keyword">let</span> socket = io();</span><br></pre></td></tr></tbody></table></figure><p><code>socket.emit()</code>发送数据，对应的是服务器端接收的函数是<code>socket.on()</code>，而服务器端发送的数据<code>io.emit()</code>，则浏览器接收的数据使用<code>socket.on()</code></p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 发送</span></span><br><span class="line">socket.emit(<span class="string">"name"</span>, message.value);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 接收</span></span><br><span class="line">socket.on(<span class="string">"name"</span>, data => {</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">});</span><br></pre></td></tr></tbody></table></figure><h2 id="实现的主要代码"><a href="#实现的主要代码" class="headerlink" title="实现的主要代码"></a>实现的主要代码</h2><h3 id="express"><a href="#express" class="headerlink" title="express"></a>express</h3><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> app = express();</span><br><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">"http"</span>).Server(app);</span><br><span class="line"><span class="keyword">const</span> io = <span class="built_in">require</span>(<span class="string">"socket.io"</span>)(http);</span><br><span class="line"></span><br><span class="line">io.on(<span class="string">"connection"</span>, socket => {</span><br><span class="line">  <span class="comment">// 当一个设备连接时会打印出console.log</span></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"a user connected"</span>);</span><br><span class="line">  <span class="comment">// 定义的datas其实是定义连接设备的用户名，当注册完成后能够存下来</span></span><br><span class="line">  <span class="keyword">let</span> datas;</span><br><span class="line">  socket.on(<span class="string">"chat message"</span>, data => {</span><br><span class="line">    io.emit(<span class="string">"chat message"</span>, {</span><br><span class="line">      data: data,</span><br><span class="line">      datas</span><br><span class="line">    });</span><br><span class="line">  });</span><br><span class="line"></span><br><span class="line">  socket.on(<span class="string">"typing"</span>, data => {</span><br><span class="line">    datas = data;</span><br><span class="line">    socket.broadcast.emit(<span class="string">"typing"</span>, data);</span><br><span class="line">  });</span><br><span class="line">});</span><br></pre></td></tr></tbody></table></figure><h3 id="browser"><a href="#browser" class="headerlink" title="browser"></a>browser</h3><figure class="highlight html"><figcaption><span>html</span></figcaption><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag"><<span class="name">ul</span> <span class="attr">id</span>=<span class="string">"messages"</span>></span><span class="tag"></<span class="name">ul</span>></span></span><br><span class="line"><span class="tag"><<span class="name">form</span>></span></span><br><span class="line">  <span class="tag"><<span class="name">input</span> <span class="attr">id</span>=<span class="string">"m"</span> <span class="attr">type</span>=<span class="string">"text"</span> /></span> <span class="tag"><<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">id</span>=<span class="string">"btn"</span>></span>Send<span class="tag"></<span class="name">button</span>></span></span><br><span class="line"><span class="tag"></<span class="name">form</span>></span></span><br><span class="line"><span class="tag"><<span class="name">div</span> <span class="attr">class</span>=<span class="string">"name"</span>></span></span><br><span class="line">  <span class="tag"><<span class="name">input</span></span></span><br><span class="line"><span class="tag">    <span class="attr">type</span>=<span class="string">"text"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">id</span>=<span class="string">"username"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">class</span>=<span class="string">"username"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">placeholder</span>=<span class="string">"请输入你的用户名"</span></span></span><br><span class="line"><span class="tag">  /></span></span><br><span class="line"><span class="tag"></<span class="name">div</span>></span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> socket = io();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 点击butoon按钮把用户的信息发往服务器</span></span><br><span class="line">btn.addEventListener(<span class="string">"click"</span>, () => {</span><br><span class="line">  socket.emit(<span class="string">"chat message"</span>, message.value);</span><br><span class="line">  message.value = <span class="string">""</span>;</span><br><span class="line">});</span><br><span class="line"></span><br><span class="line"><span class="comment">// 一开始需要输入的用户名</span></span><br><span class="line">username.addEventListener(<span class="string">"keypress"</span>, event => {</span><br><span class="line">  <span class="keyword">if</span> (event.keyCode === <span class="number">13</span>) {</span><br><span class="line">    name = username.value;</span><br><span class="line">    socket.emit(<span class="string">"typing"</span>, username.value);</span><br><span class="line">    <span class="keyword">let</span> con = <span class="built_in">document</span>.querySelector(<span class="string">".name"</span>);</span><br><span class="line">    con.style.display = <span class="string">"none"</span>;</span><br><span class="line">  }</span><br><span class="line">});</span><br><span class="line"></span><br><span class="line"><span class="comment">// 按下Enter键把用户的信息发往服务器</span></span><br><span class="line">m.addEventListener(<span class="string">"keypress"</span>, event => {</span><br><span class="line">  <span class="keyword">if</span> (event.keyCode === <span class="number">13</span>) {</span><br><span class="line">    event.preventDefault();</span><br><span class="line">    socket.emit(<span class="string">"chat message"</span>, message.value);</span><br><span class="line">    message.value = <span class="string">""</span>;</span><br><span class="line">  }</span><br><span class="line">});</span><br><span class="line"></span><br><span class="line"><span class="comment">// 用户发言的内容展示出来</span></span><br><span class="line">socket.on(<span class="string">"chat message"</span>, data => {</span><br><span class="line">  <span class="keyword">let</span> messages = <span class="built_in">document</span>.getElementById(<span class="string">"messages"</span>);</span><br><span class="line">  messages.innerHTML += <span class="string">`<li><span class="subst">${data.datas}</span>说：<span class="subst">${data.data}</span></li>`</span>;</span><br><span class="line">});</span><br><span class="line"></span><br><span class="line"><span class="comment">// 提示其他用户一个用户已上线</span></span><br><span class="line">socket.on(<span class="string">"typing"</span>, data => {</span><br><span class="line">  alert(data + <span class="string">"上线了"</span>);</span><br><span class="line">});</span><br></pre></td></tr></tbody></table></figure><h2 id="全部代码"><a href="#全部代码" class="headerlink" title="全部代码"></a>全部代码</h2><p><a href="https://github.com/zjgyb/js-study/tree/master/socket-io" target="_blank" rel="noopener">github</a></p><h2 id="参考来源"><a href="#参考来源" class="headerlink" title="参考来源"></a>参考来源</h2><ul><li><a href="https://socket.io/" target="_blank" rel="noopener">官网</a></li><li><a href="https://www.youtube.com/watch?v=vQjiN8Qgs3c&list=PL4cUxeGkcC9i4V-_ZVwLmOusj8YAUhj_9&index=1" target="_blank" rel="noopener">youtube</a></li></ul><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>每天学习一点，进步一点<span class="github-emoji" style="color: transparent;background:no-repeat url(https://assets-cdn.github.com/images/icons/emoji/unicode/1f604.png?v8) center/contain" data-src="https://assets-cdn.github.com/images/icons/emoji/unicode/1f604.png?v8">😄</span></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;div class=&quot;note primary&quot;&gt;&lt;!-- build time:Sat May 25 2019 09:47:51 GMT+0800 (GMT+08:00) --&gt;&lt;p&gt;socket-io 能够实现实时、双向、基于事件通讯。它能够在平台、浏览器、设备中运行，并且关注于它的可靠性与速度。&lt;/p&gt;&lt;!-- rebuild by neat --&gt;&lt;/div&gt;
    
    </summary>
    
      <category term="JavaScript" scheme="https://zjgyb.github.io/categories/JavaScript/"/>
    
    
      <category term="js" scheme="https://zjgyb.github.io/tags/js/"/>
    
      <category term="express" scheme="https://zjgyb.github.io/tags/express/"/>
    
      <category term="socket.io" scheme="https://zjgyb.github.io/tags/socket-io/"/>
    
      <category term="server" scheme="https://zjgyb.github.io/tags/server/"/>
    
      <category term="browser" scheme="https://zjgyb.github.io/tags/browser/"/>
    
  </entry>
  
  <entry>
    <title>vue学习笔记（三）</title>
    <link href="https://zjgyb.github.io/vue%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%89%EF%BC%89.html"/>
    <id>https://zjgyb.github.io/vue学习笔记（三）.html</id>
    <published>2018-11-13T12:26:42.000Z</published>
    <updated>2018-11-13T12:28:24.722Z</updated>
    
    <content type="html"><![CDATA[<div class="note info"><!-- build time:Sat May 25 2019 09:47:51 GMT+0800 (GMT+08:00) --><p>对于Vue的第三篇总结，主要介绍计算属性、filter、mixin</p><!-- rebuild by neat --></div><a id="more"></a><h2 id="计算属性-VS-方法"><a href="#计算属性-VS-方法" class="headerlink" title="计算属性 VS 方法"></a>计算属性 VS 方法</h2><p>计算属性的值是缓存的，因此计算属性在直接需要渲染时比方法更加合适，计算属性不会影响其他渲染函数。例如下面一例中，把注释部分替换掉就会发现每次点击按钮会同时打印出<code>a</code>和<code>b</code></p><figure class="highlight html"><figcaption><span>html</span></figcaption><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag"><<span class="name">div</span> <span class="attr">id</span>=<span class="string">"root"</span>></span></span><br><span class="line">  <span class="comment"><!--</span></span><br><span class="line"><span class="comment">    <p>age ——{{ addToA() }}</p></span></span><br><span class="line"><span class="comment">    <p>age —— {{ addToB() }}</p></span></span><br><span class="line"><span class="comment">  --></span></span><br><span class="line">  <span class="tag"><<span class="name">p</span>></span>age ——{{ addToA }}<span class="tag"></<span class="name">p</span>></span></span><br><span class="line">  <span class="tag"><<span class="name">p</span>></span>age —— {{ addToB }}<span class="tag"></<span class="name">p</span>></span></span><br><span class="line">  <span class="tag"><<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"addA"</span>></span>add age A<span class="tag"></<span class="name">button</span>></span></span><br><span class="line">  <span class="tag"><<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"addB"</span>></span>add age B<span class="tag"></<span class="name">button</span>></span></span><br><span class="line"><span class="tag"></<span class="name">div</span>></span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> Vue({</span><br><span class="line">  el: <span class="string">"#root"</span>,</span><br><span class="line"></span><br><span class="line">  data: {</span><br><span class="line">    age: <span class="number">10</span>,</span><br><span class="line">    a: <span class="number">1</span>,</span><br><span class="line">    b: <span class="number">2</span></span><br><span class="line">  },</span><br><span class="line"></span><br><span class="line">  methods: {</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    addToA() {</span></span><br><span class="line"><span class="comment">      console.log("a");</span></span><br><span class="line"><span class="comment">      return this.age + this.a;</span></span><br><span class="line"><span class="comment">    },</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    addToB() {</span></span><br><span class="line"><span class="comment">      console.log("b");</span></span><br><span class="line"><span class="comment">      return this.age + this.b;</span></span><br><span class="line"><span class="comment">    },</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    addA() {</span><br><span class="line">      <span class="keyword">this</span>.a += <span class="number">1</span>;</span><br><span class="line">    },</span><br><span class="line"></span><br><span class="line">    addB() {</span><br><span class="line">      <span class="keyword">this</span>.b += <span class="number">1</span>;</span><br><span class="line">    }</span><br><span class="line">  },</span><br><span class="line"></span><br><span class="line">  computed: {</span><br><span class="line">    addToA() {</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">"a"</span>);</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">this</span>.age + <span class="keyword">this</span>.a;</span><br><span class="line">    },</span><br><span class="line"></span><br><span class="line">    addToB() {</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">"b"</span>);</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">this</span>.age + <span class="keyword">this</span>.b;</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">});</span><br></pre></td></tr></tbody></table></figure><iframe id="cp_embed_LXZYNN" src="//codepen.io/zjgyb/embed/LXZYNN?height=500&theme-id=33713&slug-hash=LXZYNN&default-tab=js,result&embed-version=2" scrolling="no" frameborder="no" height="500" allowtransparency="true" allowfullscreen="true" class="cp_embed_iframe" style="width: 100%; overflow: hidden;"></iframe><h2 id="filter——过滤器"><a href="#filter——过滤器" class="headerlink" title="filter——过滤器"></a>filter——过滤器</h2><p>能够方便的对一些值进行修改过滤，下面一例就是使标题大写，内容截取 100 字符</p><figure class="highlight html"><figcaption><span>html</span></figcaption><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag"><<span class="name">div</span> <span class="attr">v-for</span>=<span class="string">"text in texts"</span> <span class="attr">:key</span>=<span class="string">"text.id"</span> <span class="attr">class</span>=<span class="string">"text"</span>></span></span><br><span class="line">  <span class="tag"><<span class="name">h3</span>></span>{{ text.title | upperCase }}<span class="tag"></<span class="name">h3</span>></span></span><br><span class="line">  <span class="tag"><<span class="name">article</span>></span>{{ text.body | catwords }}<span class="tag"></<span class="name">article</span>></span></span><br><span class="line"><span class="tag"></<span class="name">div</span>></span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> Vue({</span><br><span class="line">  filters: {</span><br><span class="line">    upperCase(value) {</span><br><span class="line">      <span class="keyword">return</span> value.toUpperCase();</span><br><span class="line">    },</span><br><span class="line"></span><br><span class="line">    catwords(value) {</span><br><span class="line">      <span class="keyword">return</span> value.slice(<span class="number">0</span>, <span class="number">100</span>) + <span class="string">"..."</span>;</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">});</span><br></pre></td></tr></tbody></table></figure><div class="note info"><!-- build time:Sat May 25 2019 09:47:51 GMT+0800 (GMT+08:00) --><p>其实还可以使用<code>Vue.filter({ /* some code */ })</code>来表示，这里就介绍一种</p><!-- rebuild by neat --></div><iframe id="cp_embed_QJdEjp" src="//codepen.io/zjgyb/embed/QJdEjp?height=500&theme-id=33713&slug-hash=QJdEjp&default-tab=js,result&embed-version=2" scrolling="no" frameborder="no" height="500" allowtransparency="true" allowfullscreen="true" class="cp_embed_iframe" style="width: 100%; overflow: hidden;"></iframe><h2 id="mixin"><a href="#mixin" class="headerlink" title="mixin"></a>mixin</h2><p>混合模式——公用方法及变量，例如：</p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// src/minix/blogMixins.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> {</span><br><span class="line">    computed: {</span><br><span class="line">        searchBlogs() {</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>.blogs.filter(<span class="function">(<span class="params">blog</span>) =></span> {</span><br><span class="line">                <span class="keyword">return</span> blog.title.match(<span class="keyword">this</span>.search);</span><br><span class="line">            })</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// src/component/MixinBlog.js</span></span><br><span class="line"><span class="keyword">import</span> blogMixins <span class="keyword">from</span> <span class="string">'../mixins/blogMixins'</span>;</span><br><span class="line"><span class="keyword">new</span> Vue({</span><br><span class="line">  mixins: [ blogMixins ]</span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;div class=&quot;note info&quot;&gt;&lt;!-- build time:Sat May 25 2019 09:47:51 GMT+0800 (GMT+08:00) --&gt;&lt;p&gt;对于Vue的第三篇总结，主要介绍计算属性、filter、mixin&lt;/p&gt;&lt;!-- rebuild by neat --&gt;&lt;/div&gt;
    
    </summary>
    
      <category term="Vue" scheme="https://zjgyb.github.io/categories/Vue/"/>
    
    
      <category term="js" scheme="https://zjgyb.github.io/tags/js/"/>
    
      <category term="Vue" scheme="https://zjgyb.github.io/tags/Vue/"/>
    
      <category term="前端" scheme="https://zjgyb.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="计算属性" scheme="https://zjgyb.github.io/tags/%E8%AE%A1%E7%AE%97%E5%B1%9E%E6%80%A7/"/>
    
      <category term="filter" scheme="https://zjgyb.github.io/tags/filter/"/>
    
      <category term="mixin" scheme="https://zjgyb.github.io/tags/mixin/"/>
    
  </entry>
  
  <entry>
    <title>vue风格指南</title>
    <link href="https://zjgyb.github.io/vue%E9%A3%8E%E6%A0%BC%E6%8C%87%E5%8D%97.html"/>
    <id>https://zjgyb.github.io/vue风格指南.html</id>
    <published>2018-11-08T12:18:56.000Z</published>
    <updated>2018-11-08T12:19:28.073Z</updated>
    
    <content type="html"><![CDATA[<div class="note primary"><!-- build time:Sat May 25 2019 09:47:51 GMT+0800 (GMT+08:00) --><p>好的代码风格能够使开发以及维护更加的轻松</p><!-- rebuild by neat --></div><a id="more"></a><h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><p>本文是依据<a href="https://cn.vuejs.org/v2/style-guide/index.html" target="_blank" rel="noopener">官网</a>里的教程来写的，目的是为了加深记忆，并且以后开发的时候对于不理解的进行阐述。以下注释掉的为不可取风格。</p><h2 id="等级A——必要的"><a href="#等级A——必要的" class="headerlink" title="等级A——必要的"></a>等级A——必要的</h2><h3 id="组件名需要多个单词，例如"><a href="#组件名需要多个单词，例如" class="headerlink" title="组件名需要多个单词，例如"></a>组件名需要多个单词，例如</h3><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> {</span><br><span class="line">    <span class="comment">// name: 'todo'</span></span><br><span class="line">    name: <span class="string">'todo-item'</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="data需要返回对象-除了new-vue-中"><a href="#data需要返回对象-除了new-vue-中" class="headerlink" title="data需要返回对象(除了new vue({})中)"></a>data需要返回对象(除了<code>new vue({})</code>中)</h3><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> data: {</span></span><br><span class="line"><span class="comment">     foo: 'bar'</span></span><br><span class="line"><span class="comment"> }</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line">data() {</span><br><span class="line">    <span class="keyword">return</span> {</span><br><span class="line">        foo: <span class="string">'bar'</span></span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="props尽可能详细"><a href="#props尽可能详细" class="headerlink" title="props尽可能详细"></a>props尽可能详细</h3><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    props: ['status']</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line">props: {</span><br><span class="line">    status: {</span><br><span class="line">        type: <span class="built_in">String</span>,</span><br><span class="line">        required: <span class="literal">true</span>,</span><br><span class="line">        validator(value) {</span><br><span class="line">            <span class="keyword">return</span> [</span><br><span class="line">                <span class="string">'syncing'</span>,</span><br><span class="line">                <span class="string">'synced'</span>,</span><br><span class="line">                <span class="string">'version-conflict'</span>,</span><br><span class="line">                <span class="string">'error'</span>,</span><br><span class="line">            ].indexOf(value) !== <span class="number">-1</span></span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="v-for需要配合key"><a href="#v-for需要配合key" class="headerlink" title="v-for需要配合key"></a>v-for需要配合key</h3><figure class="highlight html"><figcaption><span>html</span></figcaption><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag"><<span class="name">li</span></span></span><br><span class="line"><span class="tag">  <span class="attr">v-for</span>=<span class="string">"todo in todos"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">:key</span>=<span class="string">"todo.id"</span></span></span><br><span class="line"><span class="tag">></span></span><br><span class="line">    {{ todo.text }}</span><br><span class="line"><span class="tag"></<span class="name">li</span>></span></span><br></pre></td></tr></tbody></table></figure><h3 id="避免v-if和v-for用在一起"><a href="#避免v-if和v-for用在一起" class="headerlink" title="避免v-if和v-for用在一起"></a>避免v-if和v-for用在一起</h3><h3 id="为组件样式设置作用域"><a href="#为组件样式设置作用域" class="headerlink" title="为组件样式设置作用域"></a>为组件样式设置作用域</h3><figure class="highlight"><figcaption><span>css</span></figcaption><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><<span class="selector-tag">style</span> <span class="selector-tag">scoped</span>></span><br><span class="line"></span><br><span class="line"></style></span><br><span class="line"></span><br><span class="line"><<span class="selector-tag">style</span> <span class="selector-tag">module</span>></span><br><span class="line"></span><br><span class="line"></style></span><br></pre></td></tr></tbody></table></figure><h3 id="私有属性名"><a href="#私有属性名" class="headerlink" title="私有属性名"></a>私有属性名</h3><h2 id="等级B——强烈推荐"><a href="#等级B——强烈推荐" class="headerlink" title="等级B——强烈推荐"></a>等级B——强烈推荐</h2><h3 id="把每个文件拆分成组件"><a href="#把每个文件拆分成组件" class="headerlink" title="把每个文件拆分成组件"></a>把每个文件拆分成组件</h3><h3 id="文件的命名，要么是大写开头，要么是横线连接"><a href="#文件的命名，要么是大写开头，要么是横线连接" class="headerlink" title="文件的命名，要么是大写开头，要么是横线连接"></a>文件的命名，要么是大写开头，要么是横线连接</h3><figure class="highlight css"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">MyComponent</span><span class="selector-class">.vue</span></span><br><span class="line"><span class="selector-tag">my-component</span><span class="selector-class">.vue</span></span><br></pre></td></tr></tbody></table></figure><h3 id="组件基础名（展示类、无逻辑或无状态的组件），以特定前缀开头"><a href="#组件基础名（展示类、无逻辑或无状态的组件），以特定前缀开头" class="headerlink" title="组件基础名（展示类、无逻辑或无状态的组件），以特定前缀开头"></a>组件基础名（展示类、无逻辑或无状态的组件），以特定前缀开头</h3><figure class="highlight stylus"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">BaseButton.vue</span><br><span class="line">BaseTable.vue</span><br><span class="line">BaseIcon.vue</span><br></pre></td></tr></tbody></table></figure><h3 id="单例组件名——没有props，只用于一个页面"><a href="#单例组件名——没有props，只用于一个页面" class="headerlink" title="单例组件名——没有props，只用于一个页面"></a>单例组件名——没有props，只用于一个页面</h3><h3 id="和父组件紧密耦合的子组件应该以父组件名作为前缀命名"><a href="#和父组件紧密耦合的子组件应该以父组件名作为前缀命名" class="headerlink" title="和父组件紧密耦合的子组件应该以父组件名作为前缀命名"></a>和父组件紧密耦合的子组件应该以父组件名作为前缀命名</h3><figure class="highlight css"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">TodoList</span><span class="selector-class">.vue</span></span><br><span class="line"><span class="selector-tag">TodoListItem</span><span class="selector-class">.vue</span></span><br></pre></td></tr></tbody></table></figure><h3 id="自闭合组件"><a href="#自闭合组件" class="headerlink" title="自闭合组件"></a>自闭合组件</h3><figure class="highlight html"><figcaption><span>html</span></figcaption><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"><!-- 在单文件组件、字符串模板和 JSX 中 --></span></span><br><span class="line"><span class="comment"><!-- <MyComponent></MyComponent> --></span></span><br><span class="line"><span class="tag"><<span class="name">MyComponent</span> /></span></span><br><span class="line"></span><br><span class="line"><span class="comment"><!-- 在 DOM 模板中 --></span></span><br><span class="line"><span class="comment"><!-- <my-component/> --></span></span><br><span class="line"><span class="tag"><<span class="name">my-component</span>></span><span class="tag"></<span class="name">my-component</span>></span></span><br></pre></td></tr></tbody></table></figure><h3 id="JS-JSX中的组件名大小写-暂时不用"><a href="#JS-JSX中的组件名大小写-暂时不用" class="headerlink" title="JS/JSX中的组件名大小写(暂时不用)"></a>JS/JSX中的组件名大小写(暂时不用)</h3><h3 id="完整单词的组件名"><a href="#完整单词的组件名" class="headerlink" title="完整单词的组件名"></a>完整单词的组件名</h3><h3 id="prop名大小写，html用-连接符，js里用驼峰式"><a href="#prop名大小写，html用-连接符，js里用驼峰式" class="headerlink" title="prop名大小写，html用-连接符，js里用驼峰式"></a>prop名大小写，html用-连接符，js里用驼峰式</h3><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> props: {</span></span><br><span class="line"><span class="comment">     'greeting-text': String</span></span><br><span class="line"><span class="comment"> }</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line">props: {</span><br><span class="line">    greetingText: <span class="built_in">String</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><figure class="highlight html"><figcaption><span>html</span></figcaption><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"><!-- <WelcomeMessage greetingText="hi" /> --></span></span><br><span class="line"><span class="tag"><<span class="name">WelcomeMessage</span> <span class="attr">greeting-text</span>=<span class="string">"hi"</span> /></span></span><br></pre></td></tr></tbody></table></figure><h3 id="多个特性的元素——多行书写"><a href="#多个特性的元素——多行书写" class="headerlink" title="多个特性的元素——多行书写"></a>多个特性的元素——多行书写</h3><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag"><<span class="name">img</span></span></span><br><span class="line"><span class="tag">    <span class="attr">src</span>=<span class="string">"#"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">alt</span>=<span class="string">"image"</span></span></span><br><span class="line"><span class="tag">></span></span><br></pre></td></tr></tbody></table></figure><h3 id="模板中表达式"><a href="#模板中表达式" class="headerlink" title="模板中表达式"></a>模板中表达式</h3><p>尽可能简单，若复杂则在js里面书写</p><h3 id="简单的计算属性"><a href="#简单的计算属性" class="headerlink" title="简单的计算属性"></a>简单的计算属性</h3><p>把复杂属性分割成尽可能多的更简单的属性</p><h3 id="指令缩写"><a href="#指令缩写" class="headerlink" title="指令缩写"></a>指令缩写</h3><p><code>:</code>替代<code>v-bind</code>和<code>@</code>替代<code>v-on</code></p><h2 id="等级C——推荐"><a href="#等级C——推荐" class="headerlink" title="等级C——推荐"></a>等级C——推荐</h2><h3 id="单文件的顶级元素的shunxu"><a href="#单文件的顶级元素的shunxu" class="headerlink" title="单文件的顶级元素的shunxu"></a>单文件的顶级元素的shunxu</h3><figure class="highlight html"><figcaption><span>html</span></figcaption><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag"><<span class="name">template</span>></span> <span class="tag"></<span class="name">template</span>></span></span><br><span class="line"><span class="tag"><<span class="name">script</span>></span><span class="undefined"> </span><span class="tag"></<span class="name">script</span>></span></span><br><span class="line"><span class="tag"><<span class="name">style</span>></span><span class="undefined"> </span><span class="tag"></<span class="name">style</span>></span></span><br></pre></td></tr></tbody></table></figure><h2 id="等级D——谨慎使用"><a href="#等级D——谨慎使用" class="headerlink" title="等级D——谨慎使用"></a>等级D——谨慎使用</h2><h3 id="元素选择器尽量避免使用"><a href="#元素选择器尽量避免使用" class="headerlink" title="元素选择器尽量避免使用"></a>元素选择器尽量避免使用</h3><figure class="highlight html"><figcaption><span>html</span></figcaption><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag"><<span class="name">template</span>></span></span><br><span class="line">    <span class="comment"><!-- <button>确定</button> --></span></span><br><span class="line">    <span class="tag"><<span class="name">button</span> <span class="attr">class</span>=<span class="string">"btn"</span>></span>确定<span class="tag"></<span class="name">button</span>></span></span><br><span class="line"><span class="tag"></<span class="name">template</span>></span></span><br><span class="line"><span class="tag"><<span class="name">style</span> <span class="attr">scoped</span>></span><span class="undefined"></span></span><br><span class="line"><span class="undefined">/*</span></span><br><span class="line"><span class="undefined"> button {</span></span><br><span class="line"><span class="undefined">     fontSize: 20px;</span></span><br><span class="line"><span class="undefined"> }</span></span><br><span class="line"><span class="undefined"> */</span></span><br><span class="line"><span class="css"><span class="selector-class">.btn</span> {</span></span><br><span class="line"><span class="undefined">    fontSize: 20px;</span></span><br><span class="line"><span class="undefined">}</span></span><br><span class="line"><span class="undefined"></span><span class="tag"></<span class="name">style</span>></span></span><br></pre></td></tr></tbody></table></figure><h2 id="参考来源"><a href="#参考来源" class="headerlink" title="参考来源"></a>参考来源</h2><p><a href="https://cn.vuejs.org/v2/style-guide/index.html" target="_blank" rel="noopener">Vue风格指南</a></p><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p><span class="github-emoji" style="color: transparent;background:no-repeat url(https://assets-cdn.github.com/images/icons/emoji/unicode/1f604.png?v8) center/contain" data-src="https://assets-cdn.github.com/images/icons/emoji/unicode/1f604.png?v8">😄</span></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;div class=&quot;note primary&quot;&gt;&lt;!-- build time:Sat May 25 2019 09:47:51 GMT+0800 (GMT+08:00) --&gt;&lt;p&gt;好的代码风格能够使开发以及维护更加的轻松&lt;/p&gt;&lt;!-- rebuild by neat --&gt;&lt;/div&gt;
    
    </summary>
    
      <category term="Vue" scheme="https://zjgyb.github.io/categories/Vue/"/>
    
    
      <category term="js" scheme="https://zjgyb.github.io/tags/js/"/>
    
      <category term="Vue" scheme="https://zjgyb.github.io/tags/Vue/"/>
    
      <category term="前端" scheme="https://zjgyb.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>VeeValidate简单应用</title>
    <link href="https://zjgyb.github.io/VeeValidate%E7%AE%80%E5%8D%95%E5%BA%94%E7%94%A8.html"/>
    <id>https://zjgyb.github.io/VeeValidate简单应用.html</id>
    <published>2018-11-02T01:48:50.000Z</published>
    <updated>2018-11-02T01:50:41.421Z</updated>
    
    <content type="html"><![CDATA[<div class="note info"><!-- build time:Sat May 25 2019 09:47:51 GMT+0800 (GMT+08:00) --><p>VeeValidate使你表单操作更加的轻松快捷。</p><!-- rebuild by neat --></div><a id="more"></a><h2 id="导读"><a href="#导读" class="headerlink" title="导读"></a>导读</h2><p>在<a href="https://zjgyb.github.io/vue学习笔记（二）.html">vue学习笔记（二）</a>中已经介绍了VeeValidate相关知识，这篇文章将进一步介绍。</p><h2 id="简单使用"><a href="#简单使用" class="headerlink" title="简单使用"></a>简单使用</h2><figure class="highlight html"><figcaption><span>html</span></figcaption><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag"><<span class="name">input</span> <span class="attr">v-validate</span>=<span class="string">"'required'"</span> <span class="attr">name</span>=<span class="string">"myinput"</span> <span class="attr">type</span>=<span class="string">"text"</span>></span></span><br><span class="line"><span class="tag"><<span class="name">span</span>></span>{{ errors.first('myinput') }}<span class="tag"></<span class="name">span</span>></span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Vue.use(VeeValidate);</span><br></pre></td></tr></tbody></table></figure><h2 id="部分语法含义"><a href="#部分语法含义" class="headerlink" title="部分语法含义"></a>部分语法含义</h2><ul><li>alpha_dash(包含字符、数字、破折号或下划线)</li><li>alpha_num(包含字符、数字)</li><li>alpha_spaces(包含字符、空格)</li><li>before(验证日期前后)</li><li>between(数字最大最小之间，包含最大、最小值)</li><li>data_between(规定的两个日期之间)</li><li>data_format(输入日期的规则)</li><li>decimal(规定最大小数位数)</li><li>digits(规定数字的位数)</li><li>ext(规定上传文件的类型)</li><li>image(规定上传的文件是图片)</li><li>ip(ipv4地址是否正确)</li><li>mines(一类文件类型)</li><li>min&&max(最小最大长度)</li><li>numeric(全部是数字)</li><li>regex(正则)</li><li>size(文件大小)</li><li>url(浏览器地址</li></ul><h2 id="关于提交或者校验"><a href="#关于提交或者校验" class="headerlink" title="关于提交或者校验"></a>关于提交或者校验</h2><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> {</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    methods: {</span><br><span class="line">        onSubmit () {</span><br><span class="line">        <span class="keyword">this</span>.$validator.validate().then(<span class="function"><span class="params">result</span> =></span> {</span><br><span class="line">            <span class="keyword">if</span> (!result) {</span><br><span class="line">                <span class="comment">// do stuff if not valid.</span></span><br><span class="line">            }</span><br><span class="line">        });</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="关于语言的修改"><a href="#关于语言的修改" class="headerlink" title="关于语言的修改"></a>关于语言的修改</h2><p>在入口文件中配置，例如中文</p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> VeeValidate, { Validator } <span class="keyword">from</span> <span class="string">"vee-validate"</span>;</span><br><span class="line"><span class="keyword">import</span> zh <span class="keyword">from</span> <span class="string">"vee-validate/dist/locale/zh_CN"</span>;</span><br><span class="line">Validator.localize(<span class="string">'zh_CN'</span>, zh);</span><br><span class="line">Vue.use(VeeValidate);</span><br></pre></td></tr></tbody></table></figure><h2 id="关于提示信息"><a href="#关于提示信息" class="headerlink" title="关于提示信息"></a>关于提示信息</h2><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> dict = {</span><br><span class="line">    custom: {</span><br><span class="line">        <span class="comment">// input里面的name</span></span><br><span class="line">        email: {</span><br><span class="line">            required: <span class="string">'邮箱不为空？'</span>,</span><br><span class="line">            email: <span class="string">'兄弟你错了'</span></span><br><span class="line">        },</span><br><span class="line">    }</span><br><span class="line">};</span><br><span class="line"></span><br><span class="line"><span class="keyword">this</span>.$validator.localize(<span class="string">'zh_CN'</span>, dict);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 或者(看Validator是否引入)</span></span><br><span class="line">Validator.localize(<span class="string">'zh_CN'</span>, dict);</span><br></pre></td></tr></tbody></table></figure><h2 id="关于自定义规则"><a href="#关于自定义规则" class="headerlink" title="关于自定义规则"></a>关于自定义规则</h2><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span>.$validator.extend(<span class="string">'password'</span>, {</span><br><span class="line">    getMessage: <span class="function"><span class="params">field</span> =></span> field + <span class="string">'最少6位，包括至少1字母、特殊字符、数字'</span>,</span><br><span class="line">    validate: <span class="function"><span class="params">value</span> =></span> {</span><br><span class="line">        <span class="keyword">return</span>  <span class="regexp">/^.*(?=.{6,})(?=.*\d)(?=.*[A-Za-z])(?=.*[!@#$%^&*? ]).*$/</span>.test(value)</span><br><span class="line">    }</span><br><span class="line">});</span><br><span class="line"></span><br><span class="line"><span class="comment">// 或者</span></span><br><span class="line">Validator.extend(...);</span><br></pre></td></tr></tbody></table></figure><h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><ul><li><a href="https://baianat.github.io/vee-validate/" target="_blank" rel="noopener">官网</a></li><li><a href="https://www.jianshu.com/p/4dfaf42ce006" target="_blank" rel="noopener">简书</a></li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;div class=&quot;note info&quot;&gt;&lt;!-- build time:Sat May 25 2019 09:47:51 GMT+0800 (GMT+08:00) --&gt;&lt;p&gt;VeeValidate使你表单操作更加的轻松快捷。&lt;/p&gt;&lt;!-- rebuild by neat --&gt;&lt;/div&gt;
    
    </summary>
    
      <category term="Vue" scheme="https://zjgyb.github.io/categories/Vue/"/>
    
    
      <category term="js" scheme="https://zjgyb.github.io/tags/js/"/>
    
      <category term="VeeValidate" scheme="https://zjgyb.github.io/tags/VeeValidate/"/>
    
      <category term="Vue" scheme="https://zjgyb.github.io/tags/Vue/"/>
    
      <category term="前端" scheme="https://zjgyb.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>vue学习笔记（二）</title>
    <link href="https://zjgyb.github.io/vue%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%BA%8C%EF%BC%89.html"/>
    <id>https://zjgyb.github.io/vue学习笔记（二）.html</id>
    <published>2018-10-31T12:30:32.000Z</published>
    <updated>2018-10-31T12:34:46.000Z</updated>
    
    <content type="html"><![CDATA[<div class="note "><!-- build time:Sat May 25 2019 09:47:51 GMT+0800 (GMT+08:00) --><p>继续学习之vue笔记（二）</p><!-- rebuild by neat --></div><a id="more"></a><h2 id="动画"><a href="#动画" class="headerlink" title="动画"></a>动画</h2><h3 id="规则"><a href="#规则" class="headerlink" title="规则"></a>规则</h3><p>在vue中可以自定义动画，也可以引入第三方库。如果自定义动画，那么动画的规则由<a href="https://cn.vuejs.org/v2/guide/transitions.html" target="_blank" rel="noopener">官网</a>的一张图片能够清楚的解释动画进入与离开的规则。</p><p><img src="/images/transition.png" alt="动画规则"></p><h3 id="简单使用"><a href="#简单使用" class="headerlink" title="简单使用"></a>简单使用</h3><p>实现效果：点击确定按钮判断一个是否input表单是否为空，若为空则跳出提示信息，如不为空，则新增列表</p><p>主要代码</p><figure class="highlight html"><figcaption><span>html</span></figcaption><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag"><<span class="name">input</span></span></span><br><span class="line"><span class="tag">    <span class="attr">type</span>=<span class="string">"text"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">placeholder</span>=<span class="string">"输入你的技能"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">class</span>=<span class="string">"input"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">v-model</span>=<span class="string">"skill"</span></span></span><br><span class="line"><span class="tag">    @<span class="attr">focus</span>=<span class="string">"input"</span></span></span><br><span class="line"><span class="tag">/></span></span><br><span class="line"><span class="tag"><<span class="name">transition</span> <span class="attr">name</span>=<span class="string">"fade"</span>></span></span><br><span class="line"><span class="tag"><<span class="name">p</span> <span class="attr">class</span>=<span class="string">"text"</span> <span class="attr">v-if</span>=<span class="string">"message"</span>></span></span><br><span class="line">    需要输入字符</span><br><span class="line"><span class="tag"></<span class="name">p</span>></span></span><br><span class="line"><span class="tag"></<span class="name">transition</span>></span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight css"><figcaption><span>css</span></figcaption><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.text</span> {</span><br><span class="line">  <span class="attribute">background-color</span>: orange;</span><br><span class="line">  <span class="attribute">shadow</span>: <span class="number">1px</span> <span class="number">1px</span> <span class="number">2px</span> <span class="number">#eee</span>;</span><br><span class="line">  <span class="attribute">display</span>: inline-block;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.fade-enter-active</span> {</span><br><span class="line">  <span class="attribute">animation</span>: message .<span class="number">5s</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.fade-leave-active</span> {</span><br><span class="line">  <span class="attribute">animation</span>: message .<span class="number">5s</span> reverse;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">@<span class="keyword">keyframes</span> message {</span><br><span class="line">  0% {</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">scale</span>(0);</span><br><span class="line">  }</span><br><span class="line"></span><br><span class="line">  50% {</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">scale</span>(150%);</span><br><span class="line">  }</span><br><span class="line"></span><br><span class="line">  100% {</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">scale</span>(100%);</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> Vue({</span><br><span class="line">  methods: {</span><br><span class="line">    input() {</span><br><span class="line">      <span class="keyword">this</span>.message = <span class="literal">false</span>;</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure><iframe scrolling="no" width="100%" height="300" src="//jsfiddle.net/8wkg7reb/3/embedded/result,html,css,js/light" frameborder="0" allowfullscreen></iframe><h3 id="使用插件——animate-css"><a href="#使用插件——animate-css" class="headerlink" title="使用插件——animate.css"></a>使用插件——<a href="https://daneden.github.io/animate.css/" target="_blank" rel="noopener">animate.css</a></h3><p>删除进入与离开的css动画，直接在html上加。</p><figure class="highlight html"><figcaption><span>html</span></figcaption><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag"><<span class="name">input</span></span></span><br><span class="line"><span class="tag">    <span class="attr">type</span>=<span class="string">"text"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">placeholder</span>=<span class="string">"输入你的技能"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">class</span>=<span class="string">"input"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">v-model</span>=<span class="string">"skill"</span></span></span><br><span class="line"><span class="tag">    @<span class="attr">focus</span>=<span class="string">"input"</span></span></span><br><span class="line"><span class="tag">/></span></span><br><span class="line"><span class="tag"><<span class="name">transition</span></span></span><br><span class="line"><span class="tag">    <span class="attr">name</span>=<span class="string">"fade"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">enter-active-class</span>=<span class="string">"animated zoomIn"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">leave-active-class</span>=<span class="string">"animated zoomOut"</span></span></span><br><span class="line"><span class="tag">></span></span><br><span class="line"><span class="tag"><<span class="name">p</span> <span class="attr">class</span>=<span class="string">"text"</span> <span class="attr">v-if</span>=<span class="string">"message"</span>></span></span><br><span class="line">    需要输入字符</span><br><span class="line"><span class="tag"></<span class="name">p</span>></span></span><br><span class="line"><span class="tag"></<span class="name">transition</span>></span></span><br></pre></td></tr></tbody></table></figure><iframe scrolling="no" width="100%" height="300" src="//jsfiddle.net/eywraw8t/441809/embedded/result,html,css,js/light" frameborder="0" allowfullscreen></iframe><h2 id="VeeValidate"><a href="#VeeValidate" class="headerlink" title="VeeValidate"></a>VeeValidate</h2><p>这对于表单的验证十分有效。更多功能参照<a href="https://baianat.github.io/vee-validate/" target="_blank" rel="noopener">官网</a></p><h3 id="简单使用-1"><a href="#简单使用-1" class="headerlink" title="简单使用"></a>简单使用</h3><iframe scrolling="no" width="100%" height="300" src="//jsfiddle.net/rn1t5e8L/2/embedded/result,html,css,js/light" frameborder="0" allowfullscreen></iframe><h2 id="参考教程"><a href="#参考教程" class="headerlink" title="参考教程"></a>参考教程</h2><ul><li><a href="https://www.youtube.com/watch?v=78tNYZUS-ps" target="_blank" rel="noopener">Youtube</a></li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;div class=&quot;note &quot;&gt;&lt;!-- build time:Sat May 25 2019 09:47:51 GMT+0800 (GMT+08:00) --&gt;&lt;p&gt;继续学习之vue笔记（二）&lt;/p&gt;&lt;!-- rebuild by neat --&gt;&lt;/div&gt;
    
    </summary>
    
      <category term="Vue" scheme="https://zjgyb.github.io/categories/Vue/"/>
    
    
      <category term="js" scheme="https://zjgyb.github.io/tags/js/"/>
    
      <category term="Vue" scheme="https://zjgyb.github.io/tags/Vue/"/>
    
      <category term="前端" scheme="https://zjgyb.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>vue­学习笔记</title>
    <link href="https://zjgyb.github.io/vue%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0.html"/>
    <id>https://zjgyb.github.io/vue学习笔记.html</id>
    <published>2018-10-28T11:44:01.000Z</published>
    <updated>2018-10-28T11:45:32.541Z</updated>
    
    <content type="html"><![CDATA[<div class="note "><!-- build time:Sat May 25 2019 09:47:51 GMT+0800 (GMT+08:00) --><p>Vue——渐进式 JavaScript 框架</p><!-- rebuild by neat --></div><a id="more"></a><h2 id="Hello-World"><a href="#Hello-World" class="headerlink" title="Hello World"></a>Hello World</h2><figure class="highlight html"><figcaption><span>html</span></figcaption><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag"><<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>></span></span><br><span class="line">  {{ message }}</span><br><span class="line"><span class="tag"></<span class="name">div</span>></span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> app = <span class="keyword">new</span> Vue({</span><br><span class="line">  el: <span class="string">'#app'</span>,</span><br><span class="line">  data: {</span><br><span class="line">    message: <span class="string">'Hello World!'</span></span><br><span class="line">  }</span><br><span class="line">})；</span><br></pre></td></tr></tbody></table></figure><h2 id="监听自定义事件-emit"><a href="#监听自定义事件-emit" class="headerlink" title="监听自定义事件$emit"></a>监听自定义事件<code>$emit</code></h2><figure class="highlight html"><figcaption><span>html</span></figcaption><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag"><<span class="name">div</span> <span class="attr">id</span>=<span class="string">"root"</span>></span></span><br><span class="line">  <span class="tag"><<span class="name">cupon</span> @<span class="attr">applied</span>=<span class="string">"onCuponValue"</span> <span class="attr">v-model</span>=<span class="string">"message"</span>></span><span class="tag"></<span class="name">cupon</span>></span></span><br><span class="line">  <span class="tag"><<span class="name">p</span> <span class="attr">v-if</span>=<span class="string">"isShow"</span>></span>{{ message }}<span class="tag"></<span class="name">p</span>></span></span><br><span class="line"><span class="tag"></<span class="name">div</span>></span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">Vue.component(<span class="string">'cupon'</span>, {</span><br><span class="line">  template: <span class="string">'<input type="text" @blur="onCuponValue">'</span>,</span><br><span class="line">  methods: {</span><br><span class="line">    onCuponValue() {</span><br><span class="line">      <span class="keyword">this</span>.$emit(<span class="string">'applied'</span>, <span class="keyword">this</span>.$el.value);</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">})</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> app = <span class="keyword">new</span> Vue({</span><br><span class="line">  el: <span class="string">'#root'</span>,</span><br><span class="line"></span><br><span class="line">  data: {</span><br><span class="line">    isShow: <span class="literal">false</span>,</span><br><span class="line">    message: <span class="string">''</span></span><br><span class="line">  },</span><br><span class="line"></span><br><span class="line">  methods: {</span><br><span class="line">    onCuponValue(val) {</span><br><span class="line">      <span class="keyword">if</span> (!val.length) {</span><br><span class="line">        <span class="keyword">this</span>.isShow = <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">this</span>.message = <span class="string">'值不能为空！'</span>;</span><br><span class="line">      } <span class="keyword">else</span> {</span><br><span class="line">        <span class="keyword">this</span>.isShow = <span class="literal">false</span>;</span><br><span class="line">      }</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure><iframe scrolling="no" width="100%" height="300" src="//jsfiddle.net/eywraw8t/436697/embedded/result,js,html/light" frameborder="0" allowfullscreen></iframe><h2 id="slot——能够指定默认代码"><a href="#slot——能够指定默认代码" class="headerlink" title="slot——能够指定默认代码"></a>slot——能够指定默认代码</h2><figure class="highlight html"><figcaption><span>html</span></figcaption><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag"><<span class="name">div</span> <span class="attr">id</span>=<span class="string">"root"</span>></span></span><br><span class="line">  <span class="tag"><<span class="name">con</span> <span class="attr">slot</span>=<span class="string">"header"</span>></span></span><br><span class="line">    <span class="tag"><<span class="name">h2</span> <span class="attr">slot</span>=<span class="string">"title"</span>></span>Hello World!<span class="tag"></<span class="name">h2</span>></span></span><br><span class="line">  <span class="tag"></<span class="name">con</span>></span></span><br><span class="line"><span class="tag"></<span class="name">div</span>></span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">Vue.component(<span class="string">'con'</span>, {</span><br><span class="line">  template: <span class="string">`</span></span><br><span class="line"><span class="string">    <div></span></span><br><span class="line"><span class="string">      <slot name="title"></slot></span></span><br><span class="line"><span class="string">      <slot></span></span><br><span class="line"><span class="string">        Hello Vue!</span></span><br><span class="line"><span class="string">      </slot></span></span><br><span class="line"><span class="string">    </div></span></span><br><span class="line"><span class="string">  `</span></span><br><span class="line">});</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> Vue({</span><br><span class="line">  el: <span class="string">'#root'</span></span><br><span class="line">});</span><br></pre></td></tr></tbody></table></figure><iframe scrolling="no" width="100%" height="300" src="//jsfiddle.net/eywraw8t/436698/embedded/result,js,html/light" frameborder="0" allowfullscreen></iframe><h2 id="template——虚拟标签-amp-amp-inline-template"><a href="#template——虚拟标签-amp-amp-inline-template" class="headerlink" title="template——虚拟标签 && inline-template"></a>template——虚拟标签 && inline-template</h2><figure class="highlight html"><figcaption><span>html</span></figcaption><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag"><<span class="name">div</span> <span class="attr">id</span>=<span class="string">"root"</span>></span></span><br><span class="line">  <span class="tag"><<span class="name">con</span> <span class="attr">slot</span>=<span class="string">"header"</span>></span></span><br><span class="line">    <span class="tag"><<span class="name">template</span> <span class="attr">slot</span>=<span class="string">"title"</span>></span>Hello World!<span class="tag"></<span class="name">template</span>></span></span><br><span class="line">  <span class="tag"></<span class="name">con</span>></span></span><br><span class="line"><span class="tag"></<span class="name">div</span>></span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">Vue.component(<span class="string">'con'</span>, {</span><br><span class="line">  template: <span class="string">`</span></span><br><span class="line"><span class="string">    <div></span></span><br><span class="line"><span class="string">      <slot name="title"></slot></span></span><br><span class="line"><span class="string">      <slot></span></span><br><span class="line"><span class="string">        Hello Vue!</span></span><br><span class="line"><span class="string">      </slot></span></span><br><span class="line"><span class="string">    </div></span></span><br><span class="line"><span class="string">  `</span></span><br><span class="line">});</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> Vue({</span><br><span class="line">  el: <span class="string">'#root'</span></span><br><span class="line">});</span><br></pre></td></tr></tbody></table></figure><iframe scrolling="no" width="100%" height="300" src="//jsfiddle.net/eywraw8t/436705/embedded/result,js,html/light" frameborder="0" allowfullscreen></iframe><h2 id="参考教程"><a href="#参考教程" class="headerlink" title="参考教程"></a>参考教程</h2><ul><li><a href="https://cn.vuejs.org/" target="_blank" rel="noopener">Vue 官网</a></li><li><a href="https://www.youtube.com/playlist?list=PL3VM-unCzF8iRyPotjFsgy7EfuCITvr_3" target="_blank" rel="noopener">Youtube</a></li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;div class=&quot;note &quot;&gt;&lt;!-- build time:Sat May 25 2019 09:47:51 GMT+0800 (GMT+08:00) --&gt;&lt;p&gt;Vue——渐进式 JavaScript 框架&lt;/p&gt;&lt;!-- rebuild by neat --&gt;&lt;/div&gt;
    
    </summary>
    
      <category term="Vue" scheme="https://zjgyb.github.io/categories/Vue/"/>
    
    
      <category term="js" scheme="https://zjgyb.github.io/tags/js/"/>
    
      <category term="Vue" scheme="https://zjgyb.github.io/tags/Vue/"/>
    
      <category term="前端" scheme="https://zjgyb.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>函数式编程</title>
    <link href="https://zjgyb.github.io/%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B.html"/>
    <id>https://zjgyb.github.io/函数式编程.html</id>
    <published>2018-10-20T07:02:34.000Z</published>
    <updated>2018-10-20T07:03:09.179Z</updated>
    
    <content type="html"><![CDATA[<div class="note "><!-- build time:Sat May 25 2019 09:47:51 GMT+0800 (GMT+08:00) --><p>函数式编程有着简洁明了、不易出错、复用率高等特点成为了开发者编程时经常选用的方式。而函数式编程离不开一些方法，我将介绍的就是这些方法，以便我更方便的编写代码。</p><!-- rebuild by neat --></div><a id="more"></a><h2 id="filter——过滤对象返回新数组"><a href="#filter——过滤对象返回新数组" class="headerlink" title="filter——过滤对象返回新数组"></a>filter——过滤对象返回新数组</h2><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> person = [</span><br><span class="line">    { <span class="attr">name</span>: <span class="string">'xiaoming'</span>, <span class="attr">age</span>: <span class="number">18</span> },</span><br><span class="line">    { <span class="attr">name</span>: <span class="string">'xiaohong'</span>, <span class="attr">age</span>: <span class="number">20</span> },</span><br><span class="line">    { <span class="attr">name</span>: <span class="string">'xiaogang'</span>, <span class="attr">age</span>: <span class="number">19</span> },</span><br><span class="line">    { <span class="attr">name</span>: <span class="string">'xiaoli'</span>, <span class="attr">age</span>: <span class="number">18</span> },</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> sameAge = person.filter(<span class="function"><span class="params">obj</span> =></span> <span class="number">18</span> === obj.age);</span><br><span class="line"><span class="built_in">console</span>.log(sameAge); <span class="comment">// [{ name: 'xiaoming', age: 18}, { name: 'xiaogang', age: 18}]</span></span><br></pre></td></tr></tbody></table></figure><h2 id="map——返回属性值"><a href="#map——返回属性值" class="headerlink" title="map——返回属性值"></a>map——返回属性值</h2><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> person = [</span><br><span class="line">    { <span class="attr">name</span>: <span class="string">'xiaoming'</span>, <span class="attr">age</span>: <span class="number">18</span> },</span><br><span class="line">    { <span class="attr">name</span>: <span class="string">'xiaohong'</span>, <span class="attr">age</span>: <span class="number">20</span> },</span><br><span class="line">    { <span class="attr">name</span>: <span class="string">'xiaogang'</span>, <span class="attr">age</span>: <span class="number">19</span> },</span><br><span class="line">    { <span class="attr">name</span>: <span class="string">'xiaoli'</span>, <span class="attr">age</span>: <span class="number">18</span> },</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> getAge = person.map(<span class="function"><span class="params">obj</span> =></span> obj.age);</span><br><span class="line"><span class="built_in">console</span>.log(getAge); <span class="comment">// [18, 20, 19, 18]</span></span><br></pre></td></tr></tbody></table></figure><h2 id="reduce——对所有对象值重处理或总结"><a href="#reduce——对所有对象值重处理或总结" class="headerlink" title="reduce——对所有对象值重处理或总结"></a>reduce——对所有对象值重处理或总结</h2><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [</span><br><span class="line">    { <span class="attr">num</span>: <span class="number">1</span> },</span><br><span class="line">    { <span class="attr">num</span>: <span class="number">5</span> },</span><br><span class="line">    { <span class="attr">num</span>: <span class="number">48</span> },</span><br><span class="line">    { <span class="attr">num</span>: <span class="number">25</span> },</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> numAll = arr.reduce(<span class="function">(<span class="params">all, value</span>) =></span> all + value.num, <span class="number">0</span>);</span><br><span class="line"><span class="built_in">console</span>.log(numAll); <span class="comment">// 79</span></span><br></pre></td></tr></tbody></table></figure><h2 id="结合使用"><a href="#结合使用" class="headerlink" title="结合使用"></a>结合使用</h2><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> categories = [</span><br><span class="line">    { <span class="attr">id</span>: <span class="string">'animals'</span>, <span class="string">'parent'</span>: <span class="literal">null</span> },</span><br><span class="line">    { <span class="attr">id</span>: <span class="string">'mammals'</span>, <span class="string">'parent'</span>: <span class="string">'animals'</span> },</span><br><span class="line">    { <span class="attr">id</span>: <span class="string">'cats'</span>, <span class="string">'parent'</span>: <span class="string">'mammals'</span> },</span><br><span class="line">    { <span class="attr">id</span>: <span class="string">'dogs'</span>, <span class="string">'parent'</span>: <span class="string">'mammals'</span> },</span><br><span class="line">    { <span class="attr">id</span>: <span class="string">'chihuahua'</span>, <span class="string">'parent'</span>: <span class="string">'dogs'</span> },</span><br><span class="line">    { <span class="attr">id</span>: <span class="string">'labrador'</span>, <span class="string">'parent'</span>: <span class="string">'dogs'</span> },</span><br><span class="line">    { <span class="attr">id</span>: <span class="string">'persian'</span>, <span class="string">'parent'</span>: <span class="string">'cats'</span> },</span><br><span class="line">    { <span class="attr">id</span>: <span class="string">'siamese'</span>, <span class="string">'parent'</span>: <span class="string">'cats'</span> },</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> makeTree = <span class="function">(<span class="params">categories, parent</span>) =></span> {</span><br><span class="line">    <span class="keyword">let</span> node = {}</span><br><span class="line">    categories</span><br><span class="line">        .filter(<span class="function"><span class="params">x</span> =></span> parent === x.parent)</span><br><span class="line">        .forEach(<span class="function"><span class="params">x</span> =></span> node[x.id] = makeTree(categories, x.id))</span><br><span class="line">    <span class="keyword">return</span> node</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(</span><br><span class="line">    <span class="built_in">JSON</span>.stringify(</span><br><span class="line">        makeTree(categories, <span class="literal">null</span>),</span><br><span class="line">        <span class="literal">null</span>,</span><br><span class="line">        <span class="number">4</span></span><br><span class="line">    )</span><br><span class="line">)</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">"{</span></span><br><span class="line"><span class="comment">    "animals": {</span></span><br><span class="line"><span class="comment">        "mammals": {</span></span><br><span class="line"><span class="comment">            "cats": {</span></span><br><span class="line"><span class="comment">                "persian": {},</span></span><br><span class="line"><span class="comment">                "siamese": {}</span></span><br><span class="line"><span class="comment">            },</span></span><br><span class="line"><span class="comment">            "dogs": {</span></span><br><span class="line"><span class="comment">                "chihuahua": {},</span></span><br><span class="line"><span class="comment">                "labrador": {}</span></span><br><span class="line"><span class="comment">            }</span></span><br><span class="line"><span class="comment">        }</span></span><br><span class="line"><span class="comment">    }</span></span><br><span class="line"><span class="comment">}"</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></tbody></table></figure><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;div class=&quot;note &quot;&gt;&lt;!-- build time:Sat May 25 2019 09:47:51 GMT+0800 (GMT+08:00) --&gt;&lt;p&gt;函数式编程有着简洁明了、不易出错、复用率高等特点成为了开发者编程时经常选用的方式。而函数式编程离不开一些方法，我将介绍的就是这些方法，以便我更方便的编写代码。&lt;/p&gt;&lt;!-- rebuild by neat --&gt;&lt;/div&gt;
    
    </summary>
    
    
      <category term="js" scheme="https://zjgyb.github.io/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>flutter学习中遇到的问题总结</title>
    <link href="https://zjgyb.github.io/flutter%E5%AD%A6%E4%B9%A0%E4%B8%AD%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98%E6%80%BB%E7%BB%93.html"/>
    <id>https://zjgyb.github.io/flutter学习中遇到的问题总结.html</id>
    <published>2018-10-15T09:30:43.000Z</published>
    <updated>2018-10-15T09:31:09.821Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>在flutter学习中遇到的问题以及解决办法</p></blockquote><a id="more"></a><h2 id="问题一-Android-license-status-unknown"><a href="#问题一-Android-license-status-unknown" class="headerlink" title="问题一 Android license status unknown"></a>问题一 Android license status unknown</h2><p><strong>解决措施</strong></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flutter upgrade</span><br></pre></td></tr></tbody></table></figure><h2 id="问题二-Windows生成SHA-1问题"><a href="#问题二-Windows生成SHA-1问题" class="headerlink" title="问题二 Windows生成SHA-1问题"></a>问题二 Windows生成SHA-1问题</h2><p>在<a href="https://developers.google.com/android/guides/client-auth?hl=zh-cn" target="_blank" rel="noopener">官网</a>上Windows生成SHA-1通过<code>keytool -exportcert -list -v \-alias androiddebugkey -keystore %USERPROFILE%\.android\debug.keystore</code>命令的方式生成SHA-1，但是我在电脑上使用这一命令会出现<code>keytool 错误：java.lang.Exception：只允许一个命令：同时指定了 -exportcent 和 -list</code>的错误提示</p><p><strong>解决措施</strong></p><p>使用<code>keytool -list -v -alias androiddebugkey -keystore .android/debug.keystore</code>命令</p><p>在<a href="https://stackoverflow.com/questions/49699765/keytool-error-java-lang-exception-only-one-command-is-allowed-both-exportcer" target="_blank" rel="noopener">stackoverflow</a>同样的解决措施</p><h2 id="问题三-Firebase的连接问题"><a href="#问题三-Firebase的连接问题" class="headerlink" title="问题三 Firebase的连接问题"></a>问题三 Firebase的连接问题</h2><p>点击创建账号总是出现<code>[FirebaseAuth: ] getGoogleApiForMethod() returned Gms: com.google.firebase.auth.api.internal.zzal@b1d4e3e</code>问题</p><p><strong>未解决</strong></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;在flutter学习中遇到的问题以及解决办法&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="flutter" scheme="https://zjgyb.github.io/tags/flutter/"/>
    
  </entry>
  
  <entry>
    <title>不蒜子busuanzi失效</title>
    <link href="https://zjgyb.github.io/%E4%B8%8D%E8%92%9C%E5%AD%90busuanzi%E5%A4%B1%E6%95%88.html"/>
    <id>https://zjgyb.github.io/不蒜子busuanzi失效.html</id>
    <published>2018-10-13T12:37:50.000Z</published>
    <updated>2018-10-13T13:29:53.172Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>不蒜子统计人数失效</p></blockquote><a id="more"></a><p>最近发现博客最下面的统计人数居然失效了，不知道出了什么问题，谷歌了一下才发现原来是不蒜子域名更改了，因此需要换一下引用资源。</p><p>在<code>themes/next/layout/_third-party/analytics/busuanzi-counter.swig</code>中<br>把以下代码</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><script src=<span class="string">"https://dn-lbstatics.qbox.me/busuanzi/2.3/busuanzi.pure.mini.js"</span>/></span><br></pre></td></tr></tbody></table></figure><p>改成</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><script src=<span class="string">"https://busuanzi.ibruce.info/busuanzi/2.3/busuanzi.pure.mini.js"</span>/></span><br></pre></td></tr></tbody></table></figure><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;不蒜子统计人数失效&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="hexo" scheme="https://zjgyb.github.io/tags/hexo/"/>
    
      <category term="不蒜子" scheme="https://zjgyb.github.io/tags/%E4%B8%8D%E8%92%9C%E5%AD%90/"/>
    
      <category term="统计人数" scheme="https://zjgyb.github.io/tags/%E7%BB%9F%E8%AE%A1%E4%BA%BA%E6%95%B0/"/>
    
  </entry>
  
  <entry>
    <title>flutter学习第三天</title>
    <link href="https://zjgyb.github.io/flutter%E5%AD%A6%E4%B9%A0%E7%AC%AC%E4%B8%89%E5%A4%A9.html"/>
    <id>https://zjgyb.github.io/flutter学习第三天.html</id>
    <published>2018-10-08T08:10:56.000Z</published>
    <updated>2018-10-28T12:17:49.540Z</updated>
    
    <content type="html"><![CDATA[<h2 id="导读"><a href="#导读" class="headerlink" title="导读"></a>导读</h2><p>今天是学习的第三天，如果你还没有阅读过前两天，可以点击<a href="https://zjgyb.github.io/flutter%E5%AD%A6%E4%B9%A0%E7%AC%AC%E4%B8%80%E5%A4%A9.html">flutter 学习第一天</a>和<a href="https://zjgyb.github.io/flutter%E5%AD%A6%E4%B9%A0%E7%AC%AC%E4%BA%8C%E5%A4%A9.html">flutter 学习第二天</a>。本文实现的效果和之前没有太多关联，本文的例子来自于官网推荐的<a href="https://codelabs.flutter-io.cn/codelabs/mdc-101-flutter/index.html#0" target="_blank" rel="noopener">例子</a>，你可以点击查看，本文的目的是为了更好的理解所要实现的效果。</p><h2 id="实现效果"><a href="#实现效果" class="headerlink" title="实现效果"></a>实现效果</h2><p><img src="https://github.com/zjgyb/flutter_study/blob/master/flutter_threeday/assets/flutter_threeday_show.png?raw=true" width="350"></p><h2 id="预备知识"><a href="#预备知识" class="headerlink" title="预备知识"></a>预备知识</h2><ol><li><p>SizeBox 介绍，看图<br><img src="https://github.com/zjgyb/flutter_study/blob/master/flutter_threeday/assets/sizebox.png?raw=true" alt="SizeBox"></p><div class="note primary"><!-- build time:Sat May 25 2019 09:47:51 GMT+0800 (GMT+08:00) --><p>相当于一个盒子，可以定义宽(width)，高(height)，里面还可以包含子元素(child)，还有其他。本文中 SizeBox 用于隔开其他元素。</p><!-- rebuild by neat --></div></li><li><p>TextField 介绍，看图<br><img src="https://github.com/zjgyb/flutter_study/blob/master/flutter_threeday/assets/textfiled.png?raw=true" alt="TextField"></p><div class="note primary"><!-- build time:Sat May 25 2019 09:47:51 GMT+0800 (GMT+08:00) --><p>相当于一个 input 框，用于表单的构建。</p><!-- rebuild by neat --></div></li></ol><h2 id="构建布局"><a href="#构建布局" class="headerlink" title="构建布局"></a>构建布局</h2><h3 id="第一步"><a href="#第一步" class="headerlink" title="第一步"></a>第一步</h3><p>获取<a href="https://github.com/material-components/material-components-flutter-codelabs/archive/101-starter.zip" target="_blank" rel="noopener">原始代码</a></p><h3 id="第二步：绘制布局"><a href="#第二步：绘制布局" class="headerlink" title="第二步：绘制布局"></a>第二步：绘制布局</h3><p>UI 的 widget 树示意图：</p><p><img src="https://github.com/zjgyb/flutter_study/blob/master/flutter_threeday/assets/login_show.png?raw=true" alt="login_show"></p><p>具体构造图位置显示：</p><p><img src="https://github.com/zjgyb/flutter_study/blob/master/flutter_threeday/assets/flutter_threeday_layout.png?raw=true" alt="login_show"></p><h3 id="第三步：编写-Login-内代码"><a href="#第三步：编写-Login-内代码" class="headerlink" title="第三步：编写 Login 内代码"></a>第三步：编写 Login 内代码</h3><p>主要代码</p><p>定义两个控件，控制两个 TextField 的行为</p><figure class="highlight dart"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">_LoginPageState</span> <span class="keyword">extends</span> <span class="title">State</span><<span class="title">LoginPage</span>> </span>{</span><br><span class="line">  <span class="comment">// <span class="doctag">TODO:</span> Add text editing controllers (101)</span></span><br><span class="line">  <span class="keyword">final</span> _usernameController = TextEditingController();</span><br><span class="line">  <span class="keyword">final</span> _passwordController = TextEditingController();</span><br></pre></td></tr></tbody></table></figure><p>两个 TextFiled 以及按钮组 ButtonBar 的编写</p><figure class="highlight dart"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// <span class="doctag">TODO:</span> Add TextField widgets (101)</span></span><br><span class="line">TextField(</span><br><span class="line">    decoration: InputDecoration(</span><br><span class="line">    filled: <span class="keyword">true</span>,</span><br><span class="line">    labelText: <span class="string">'Username'</span>,</span><br><span class="line">    ),</span><br><span class="line">    controller: _usernameController,</span><br><span class="line">    autofocus: <span class="keyword">true</span>,</span><br><span class="line">),</span><br><span class="line"></span><br><span class="line">SizedBox(</span><br><span class="line">    height: <span class="number">12.0</span>,</span><br><span class="line">),</span><br><span class="line"></span><br><span class="line">TextField(</span><br><span class="line">    decoration: InputDecoration(</span><br><span class="line">    filled: <span class="keyword">true</span>,</span><br><span class="line">    labelText: <span class="string">'Password'</span>,</span><br><span class="line">    ),</span><br><span class="line">    obscureText: <span class="keyword">true</span>,</span><br><span class="line">    controller: _passwordController,</span><br><span class="line">),</span><br><span class="line"><span class="comment">// <span class="doctag">TODO:</span> Add button bar (101)</span></span><br><span class="line">ButtonBar(</span><br><span class="line">    children: <Widget>[</span><br><span class="line">    FlatButton(</span><br><span class="line">        child: Text(<span class="string">'CANCEL'</span>),</span><br><span class="line">        onPressed: () {</span><br><span class="line">            _usernameController.clear();</span><br><span class="line">        _passwordController.clear();</span><br><span class="line">        },</span><br><span class="line">    ),</span><br><span class="line">    RaisedButton(</span><br><span class="line">        child: Text(<span class="string">'NEXT'</span>),</span><br><span class="line">        onPressed: () {</span><br><span class="line">        Navigator.pop(context);</span><br><span class="line">        },</span><br><span class="line">    ),</span><br><span class="line">    ],</span><br><span class="line">),</span><br></pre></td></tr></tbody></table></figure><h2 id="全部代码"><a href="#全部代码" class="headerlink" title="全部代码"></a>全部代码</h2><p><a href="https://github.com/zjgyb/flutter_study/tree/master/flutter_threeday" target="_blank" rel="noopener">传送门</a></p><h2 id="参考教程"><a href="#参考教程" class="headerlink" title="参考教程"></a>参考教程</h2><ul><li><a href="https://flutter.io" target="_blank" rel="noopener">flutter官网</a></li><li><a href="https://codelabs.flutter-io.cn/codelabs/mdc-101-flutter/index.html#0" target="_blank" rel="noopener">flutter推荐例子</a></li></ul><h2 id="结束语"><a href="#结束语" class="headerlink" title="结束语"></a>结束语</h2><p>刚开始学习flutter，如果有错误之处还希望读者斧正。感谢阅读！</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;导读&quot;&gt;&lt;a href=&quot;#导读&quot; class=&quot;headerlink&quot; title=&quot;导读&quot;&gt;&lt;/a&gt;导读&lt;/h2&gt;&lt;p&gt;今天是学习的第三天，如果你还没有阅读过前两天，可以点击&lt;a href=&quot;https://zjgyb.github.io/flutter%E5
      
    
    </summary>
    
      <category term="flutter" scheme="https://zjgyb.github.io/categories/flutter/"/>
    
    
      <category term="flutter" scheme="https://zjgyb.github.io/tags/flutter/"/>
    
      <category term="dart" scheme="https://zjgyb.github.io/tags/dart/"/>
    
      <category term="material" scheme="https://zjgyb.github.io/tags/material/"/>
    
      <category term="login" scheme="https://zjgyb.github.io/tags/login/"/>
    
  </entry>
  
  <entry>
    <title>flutter学习第二天</title>
    <link href="https://zjgyb.github.io/flutter%E5%AD%A6%E4%B9%A0%E7%AC%AC%E4%BA%8C%E5%A4%A9.html"/>
    <id>https://zjgyb.github.io/flutter学习第二天.html</id>
    <published>2018-10-04T03:10:12.000Z</published>
    <updated>2018-11-13T13:42:57.354Z</updated>
    
    <content type="html"><![CDATA[<img src="/flutter学习第二天/flutter_twoday.png"><a id="more"></a><h2 id="导读"><a href="#导读" class="headerlink" title="导读"></a>导读</h2><p>在<a href="https://zjgyb.github.io/flutter%E5%AD%A6%E4%B9%A0%E7%AC%AC%E4%B8%80%E5%A4%A9.html">flutter 学习第一天</a>已经介绍了 flutter 的相关知识，开发环境，今天完成的效果是基于第一天的。</p><h2 id="实现效果"><a href="#实现效果" class="headerlink" title="实现效果"></a>实现效果</h2><p><img src="/images/flutter_twoday_show.gif" width="350"></p><h2 id="预备知识"><a href="#预备知识" class="headerlink" title="预备知识"></a>预备知识</h2><ol><li><p>padding 介绍，看图<br><img src="/./images/padding.png" alt="padding"><br>针对 padding 有三种常用方式，例如<code>EdgeInsets.symmetric(vertical: 8.0),</code>就是水平方向左右 padding 各为 8.0<br>如果还没有理解，那么请点击<strong><a href="https://github.com/zjgyb/flutter_study/blob/master/flutter_twoday/README.md#padding%E7%9A%84%E5%9B%BE%E7%89%87%E4%BB%8B%E7%BB%8D" target="_blank" rel="noopener">传送门</a></strong></p></li><li><p>AppBar 介绍，看图<br><img src="/./images/flutter_twoday_appbar.png" alt="AppBar"></p></li></ol><h2 id="构建布局"><a href="#构建布局" class="headerlink" title="构建布局"></a>构建布局</h2><h3 id="第一步"><a href="#第一步" class="headerlink" title="第一步"></a>第一步</h3><p>获取*<a href="https://github.com/flutter/udacity-course/tree/master/course/03_category_route/task_03_category_route" target="_blank" rel="noopener">原始代码</a></p><div class="note info"><!-- build time:Sat May 25 2019 09:47:51 GMT+0800 (GMT+08:00) --><p>*这个同样是优达学城中的项目，它给出了原始代码。</p><!-- rebuild by neat --></div><h3 id="第二步：绘制布局"><a href="#第二步：绘制布局" class="headerlink" title="第二步：绘制布局"></a>第二步：绘制布局</h3><p><img src="/./images/flutter_twoday_layout.png" alt="思路图"></p><h3 id="第三步：编写代码"><a href="#第三步：编写代码" class="headerlink" title="第三步：编写代码"></a>第三步：编写代码</h3><p>Container里的代码</p><figure class="highlight dart"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// <span class="doctag">TODO:</span> Create a list of the eight Categories, using the names and colors</span></span><br><span class="line"><span class="comment">// 定义categories数组</span></span><br><span class="line"><span class="keyword">var</span> categories = <span class="keyword">new</span> <span class="built_in">List</span>();</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i < _categoryNames.length; i++) {</span><br><span class="line">    categories.add(Category(name: _categoryNames[i], color: _baseColors[i], iconLocation: icon));</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用ListView构建布局</span></span><br><span class="line"><span class="comment">// <span class="doctag">TODO:</span> Create a list view of the Categories</span></span><br><span class="line"><span class="keyword">final</span> listView = Container(</span><br><span class="line">    color: background, <span class="comment">// 上面已经定义了颜色 final background = Colors.green[100];</span></span><br><span class="line">    padding: EdgeInsets.symmetric(vertical: <span class="number">8.0</span>),</span><br><span class="line">    child: <span class="keyword">new</span> ListView.builder(</span><br><span class="line">        itemCount: categories.length,</span><br><span class="line">        itemBuilder: (context, i) {</span><br><span class="line">            <span class="keyword">return</span> categories[i];</span><br><span class="line">        },</span><br><span class="line">    ),</span><br><span class="line">);</span><br></pre></td></tr></tbody></table></figure><p>appBar里的代码</p><figure class="highlight dart"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> appBar = AppBar(</span><br><span class="line">    title: Text(</span><br><span class="line">    <span class="string">'Unit Converter'</span>,</span><br><span class="line">    style: <span class="keyword">new</span> TextStyle(</span><br><span class="line">            fontSize: <span class="number">30.0</span>,</span><br><span class="line">            color: Colors.black,</span><br><span class="line">        ),</span><br><span class="line">    ),</span><br><span class="line">    centerTitle: <span class="keyword">true</span>,</span><br><span class="line">    backgroundColor: background, <span class="comment">// background前面已说明</span></span><br><span class="line">    elevation: <span class="number">5.0</span>,</span><br><span class="line">);</span><br></pre></td></tr></tbody></table></figure><h2 id="全部代码"><a href="#全部代码" class="headerlink" title="全部代码"></a>全部代码</h2><p><a href="https://github.com/zjgyb/flutter_study/tree/master/flutter_twoday" target="_blank" rel="noopener">传送门</a></p><h2 id="参考资源"><a href="#参考资源" class="headerlink" title="参考资源"></a>参考资源</h2><ul><li><a href="https://flutter.io" target="_blank" rel="noopener">flutter官网</a></li><li><a href="https://github.com/flutter/udacity-course/tree/master/course/03_category_route/task_03_category_route" target="_blank" rel="noopener">优达学城项目代码</a></li><li><a href="https://classroom.udacity.com/courses/ud905/lessons/92a39eec-0c04-4d98-b47f-c884b9cd5a3b/concepts/a253cee9-7f83-4fbf-b00f-1b82621a0853" target="_blank" rel="noopener">优达学城课程</a></li></ul><h2 id="结束语"><a href="#结束语" class="headerlink" title="结束语"></a>结束语</h2><p>刚开始学习flutter，如果有错误之处还希望读者斧正。在<a href="https://zjgyb.github.io/flutter%E5%AD%A6%E4%B9%A0%E7%AC%AC%E4%B8%89%E5%A4%A9.html">flutter学习第三天</a>中，我将根据官网的例子继续学习。感谢阅读！</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;img src=&quot;/flutter学习第二天/flutter_twoday.png&quot;&gt;
    
    </summary>
    
      <category term="flutter" scheme="https://zjgyb.github.io/categories/flutter/"/>
    
    
      <category term="flutter" scheme="https://zjgyb.github.io/tags/flutter/"/>
    
      <category term="dart" scheme="https://zjgyb.github.io/tags/dart/"/>
    
      <category term="material" scheme="https://zjgyb.github.io/tags/material/"/>
    
  </entry>
  
  <entry>
    <title>flutter学习第一天</title>
    <link href="https://zjgyb.github.io/flutter%E5%AD%A6%E4%B9%A0%E7%AC%AC%E4%B8%80%E5%A4%A9.html"/>
    <id>https://zjgyb.github.io/flutter学习第一天.html</id>
    <published>2018-10-02T02:02:22.000Z</published>
    <updated>2018-11-13T13:40:14.133Z</updated>
    
    <content type="html"><![CDATA[<img src="/flutter学习第一天/flutter_logo.png"><a id="more"></a><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>flutter 是由 google 开发的一款跨平台的新框架，一套代码能够同时编译成安卓和 IOS。它使用的是 dart 语言，如果有 JS 或者 JAVA 编程语言，那么 dart 上手会变得相对简单。</p><h2 id="开发环境"><a href="#开发环境" class="headerlink" title="开发环境"></a>开发环境</h2><ul><li>系统: Win10</li><li>IDE：Andriod Studio</li><li>SDK: v0.8.2-beta</li></ul><h2 id="实现效果"><a href="#实现效果" class="headerlink" title="实现效果"></a>实现效果</h2><p><img src="/images/flutter_oneday.gif" width="350"></p><h2 id="构建布局"><a href="#构建布局" class="headerlink" title="构建布局"></a>构建布局</h2><p>第一步</p><p>获取*<a href="https://github.com/flutter/udacity-course/tree/master/course/02_category_widget/task_02_category_widget" target="_blank" rel="noopener">原始代码</a></p><div class="note info"><!-- build time:Sat May 25 2019 09:47:51 GMT+0800 (GMT+08:00) --><p>*这个是优达学城中的项目，它给出了原始代码，我根据它的要求实现</p><!-- rebuild by neat --></div><p>第二步：绘制布局<br><img src="/images/flutter_mind.png" alt="思路图"></p><p>第三步：编写代码</p><p>根据思路创建最基本的布局</p><figure class="highlight dart"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// category.dart</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">'package:flutter/material.dart'</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Category</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>{</span><br><span class="line">  <span class="comment">// <span class="doctag">TODO:</span> You'll need the name, color, and iconLocation from main.dart</span></span><br><span class="line">  <span class="keyword">const</span> Category();</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line"></span><br><span class="line">  Widget build(BuildContext context) {</span><br><span class="line">    <span class="comment">// <span class="doctag">TODO:</span> Build the custom widget here, referring to the Specs.</span></span><br><span class="line">    <span class="keyword">return</span> Container(</span><br><span class="line">      child: <span class="keyword">new</span> InkWell(</span><br><span class="line">        child: <span class="keyword">new</span> Row(</span><br><span class="line">          children: <Widget>[</span><br><span class="line">            <span class="keyword">new</span> Padding(</span><br><span class="line">              child:  <span class="keyword">new</span> Icon(</span><br><span class="line">              ),</span><br><span class="line">            ),</span><br><span class="line">            <span class="keyword">new</span> Text(</span><br><span class="line">            ),</span><br><span class="line">          ],</span><br><span class="line">        )</span><br><span class="line">      )</span><br><span class="line">    );</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>加上样式</p><figure class="highlight dart"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 第一处</span></span><br><span class="line"><span class="keyword">return</span> Container(</span><br><span class="line">    <span class="comment">// from here</span></span><br><span class="line">    height: <span class="number">100.0</span>, <span class="comment">// Widget height</span></span><br><span class="line">    <span class="comment">// padding: const EdgeInsets.all(8.0),</span></span><br><span class="line">    decoration: <span class="keyword">new</span> BoxDecoration(</span><br><span class="line">        borderRadius: <span class="keyword">new</span> BorderRadius.all(</span><br><span class="line">        <span class="keyword">const</span> Radius.circular(<span class="number">50.0</span>),</span><br><span class="line">        ),</span><br><span class="line">    ),</span><br><span class="line">    <span class="comment">// to here</span></span><br><span class="line">    child: <span class="keyword">new</span> InkWell(</span><br><span class="line"></span><br><span class="line"><span class="comment">// 第二处</span></span><br><span class="line"><span class="keyword">new</span> Padding(</span><br><span class="line">    padding: <span class="keyword">new</span> EdgeInsets.all(<span class="number">16.0</span>), <span class="comment">// padding around</span></span><br><span class="line">    child: <span class="keyword">new</span> Icon(</span><br><span class="line">        Icon.cakes,</span><br><span class="line">        size: <span class="number">60.0</span>, <span class="comment">// Icon size</span></span><br><span class="line">        ),</span><br><span class="line">    ),</span><br><span class="line"></span><br><span class="line">    <span class="keyword">new</span> Text(</span><br><span class="line">        <span class="string">"Cake"</span>,</span><br><span class="line">        style: <span class="keyword">new</span> TextStyle(</span><br><span class="line">        fontSize: <span class="number">24.0</span> <span class="comment">// Text size</span></span><br><span class="line">        ),</span><br><span class="line">    ),</span><br></pre></td></tr></tbody></table></figure><p>添加点击事件<br></p><figure class="highlight dart"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">child: <span class="keyword">new</span> InkWell(</span><br><span class="line">    splashColor: Colors.green,</span><br><span class="line">    highlightColor: Colors.green,</span><br><span class="line">    borderRadius: <span class="keyword">new</span> BorderRadius.all(</span><br><span class="line">        <span class="keyword">const</span> Radius.circular(<span class="number">50.0</span>),</span><br><span class="line">    ),</span><br><span class="line">    onTap: () {</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"I was tapped!"</span>);</span><br><span class="line">    },</span><br></pre></td></tr></tbody></table></figure><p></p><p>传参及接收</p><figure class="highlight dart"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// main.dart</span></span><br><span class="line">body: Center(</span><br><span class="line">    <span class="comment">// <span class="doctag">TODO:</span> Determine what properties you'll need to pass into the widget</span></span><br><span class="line">    <span class="comment">// 这里是把定义好的参数传到category.dart中</span></span><br><span class="line">    child: Category(_categoryName, _categoryColor, _categoryIcon),</span><br><span class="line">    ),</span><br><span class="line"></span><br><span class="line"><span class="comment">// category.dart</span></span><br><span class="line"><span class="comment">// 接受参数</span></span><br><span class="line"><span class="keyword">final</span> <span class="built_in">String</span> name;</span><br><span class="line"><span class="keyword">final</span> color;</span><br><span class="line"><span class="keyword">final</span> iconLocation;</span><br><span class="line"><span class="keyword">const</span> Category(<span class="keyword">this</span>.name, <span class="keyword">this</span>.color, <span class="keyword">this</span>.iconLocation);</span><br></pre></td></tr></tbody></table></figure><p>替换定值<br></p><figure class="highlight dart"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// replace color</span></span><br><span class="line">child: <span class="keyword">new</span> InkWell(</span><br><span class="line">    <span class="comment">/* splashColor: green,</span></span><br><span class="line"><span class="comment">     * highlightColor: green,</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    splashColor: <span class="keyword">this</span>.color,</span><br><span class="line">    highlightColor: <span class="keyword">this</span>.color,</span><br><span class="line">    borderRadius: <span class="keyword">new</span> BorderRadius.all(</span><br><span class="line"></span><br><span class="line"><span class="comment">// replace icon</span></span><br><span class="line">child: <span class="keyword">new</span> Icon(</span><br><span class="line">    <span class="comment">// Icons.cake</span></span><br><span class="line">    <span class="keyword">this</span>.iconLocation,</span><br><span class="line">    size: <span class="number">60.0</span>, <span class="comment">// Icon size</span></span><br><span class="line">    ),</span><br><span class="line"></span><br><span class="line"><span class="comment">// replace text</span></span><br><span class="line"><span class="keyword">new</span> Text(</span><br><span class="line">    <span class="comment">// "Cake"</span></span><br><span class="line">    <span class="keyword">this</span>.name,</span><br><span class="line">    style: <span class="keyword">new</span> TextStyle(</span><br><span class="line">    fontSize: <span class="number">24.0</span> <span class="comment">// Text size</span></span><br><span class="line">    ),</span><br></pre></td></tr></tbody></table></figure><p></p><h2 id="全部代码"><a href="#全部代码" class="headerlink" title="全部代码"></a>全部代码</h2><p><a href="https://github.com/zjgyb/flutter_study/tree/master/flutter_oneday" target="_blank" rel="noopener">传送门</a></p><h2 id="参考资源"><a href="#参考资源" class="headerlink" title="参考资源"></a>参考资源</h2><ul><li><a href="https://flutter.io" target="_blank" rel="noopener">flutter官网</a></li><li><a href="https://github.com/flutter/udacity-course/tree/master/course/02_category_widget/task_02_category_widget" target="_blank" rel="noopener">优达学城项目代码</a></li><li><a href="https://classroom.udacity.com/courses/ud905/lessons/92a39eec-0c04-4d98-b47f-c884b9cd5a3b/concepts/434cfc1b-b9d4-4ff9-a723-38b4e5cfaae4" target="_blank" rel="noopener">优达学城课程</a></li></ul><h2 id="结束语"><a href="#结束语" class="headerlink" title="结束语"></a>结束语</h2><p>flutter我也是才刚开始学习，如果有错误之处还希望读者斧正。在<a href="https://zjgyb.github.io/flutter%E5%AD%A6%E4%B9%A0%E7%AC%AC%E4%BA%8C%E5%A4%A9.html">flutter学习第二天</a>中，我将基于这个例子的基础上继续学习。感谢阅读！</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;img src=&quot;/flutter学习第一天/flutter_logo.png&quot;&gt;
    
    </summary>
    
      <category term="flutter" scheme="https://zjgyb.github.io/categories/flutter/"/>
    
    
      <category term="flutter" scheme="https://zjgyb.github.io/tags/flutter/"/>
    
      <category term="dart" scheme="https://zjgyb.github.io/tags/dart/"/>
    
      <category term="material" scheme="https://zjgyb.github.io/tags/material/"/>
    
  </entry>
  
</feed>
